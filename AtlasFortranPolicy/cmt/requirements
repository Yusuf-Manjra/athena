package AtlasFortranPolicy

author Christian Arnault <arnault@lal.in2p3.fr>

#-----------------------------------------------------------------------
#
#  Property package for defining all fortran related general features.
#
#-----------------------------------------------------------------------

use AtlasExternalArea AtlasExternalArea-* External
use AtlasCompilers    AtlasCompilers-*    External

# Force a dependency on GaudiPolicy so that it's tags are available
# and it's policies can be overridden.
use GaudiPolicy v*  -no_auto_imports

#-------------------------------------------------------------	  
# Add support for building 32-bit libraries on a 64-bit system
#-------------------------------------------------------------

# Force g77 for now with gcc34 only
tag gcc34 useG77

macro        for          "gfortran" \
             gcc41        "gfortran" \
             gcc43        "gfortran" \
             gcc45        "gfortran" \
	     gcc46        "gfortran" \
	     gcc47        "gfortran" \
	     gcc48        "gfortran" \
	     gcc49        "gfortran" \
	     target-clang3 "gfortran" \
	     Darwin       "gfortran" \
             useG77       "g77"

macro_append for          "" x86_64&gcc&32 " -m32"
macro_append shlibbuilder "" x86_64&gcc&32 " -m32"

#----------------------------------------------
# Fortran flags and options
#----------------------------------------------
set GFORTRAN_UNBUFFERED_ALL "y"

# Remove fflags values setup by the GaudiPolicy package

macro_remove fflags "" Linux "-O2"
macro_remove fflags "" Linux "-fdollar-ok"
macro_remove fflags "" Linux "-ff90"
macro_remove fflags "" Linux "-w"

# Setup default ATLAS fflags values
# add also cpp macro for generators fortran code

macro cpp_fortran_macro "" \
      32                "-DFVOIDP=INTEGER*4" \
      64                "-DFVOIDP=INTEGER*8"


macro_append fflags   "" \
            Linux    " -pipe -fno-automatic -fno-second-underscore -ffixed-line-length-132 -Wall -W -Wno-unused -Wsurprising -fPIC $(cpp_fortran_macro)" \
            Darwin   " -ffixed-line-length-132 -Wall -W -Wsurprising -Wno-unused -fPIC $(cpp_fortran_macro)"

macro_append fflags   "" \
             gcc&dbg  " -fbounds-check "

macro_append fflags      "" \
			 noWerror    "" \
			 applyWerror " -Werror"

macro fortran_linkopts_prefix  "" \
      notAsNeeded              "" \
      asNeeded                 "-Wl,--no-as-needed"
macro fortran_linkopts_postfix "" \
      notAsNeeded              "" \
      asNeeded                 "-Wl,--as-needed"

macro f77_linkopts "" \
      Darwin       "" \
      useG77       "$(fortran_linkopts_prefix) -lg2c $(fortran_linkopts_postfix) -lnsl -lcrypt -ldl" 

#Enable hash-style=both since we get some benefit (speadup in loading libs)
macro_append componentshr_linkopts      "" \ 
                Linux                   " -Wl,--hash-style=both " 
macro_append libraryshr_linkopts        "" \ 
                Linux                   " -Wl,--hash-style=both " 
macro_append application_linkopts       "" \ 
        Linux                   " -Wl,--hash-style=both " 

#----------------------------------------------
# Support for Fortran 90
#
# We differentiate sites wher the full compiler is available from
# sites where only the runtime (free) is available.
#----------------------------------------------

tag HAS_PGI32  HAS_PGI
tag HAS_PGI41  HAS_PGI
tag HAS_PGI51  HAS_PGI
tag HAS_PGI52  HAS_PGI

tag HAS_PGI    HAS_PGI_RUNTIME
tag HAS_PGI    HAS_FORTRAN_RUNTIME
tag HAS_PGI    HAS_FORTRAN

tag HAS_G95    HAS_FORTRAN
tag HAS_G95    HAS_G95_RUNTIME
tag HAS_GFO    HAS_FORTRAN
tag HAS_GFO    HAS_GFO_RUNTIME

tag HAS_PGI_RUNTIME    HAS_FORTRAN_RUNTIME
tag HAS_G95_RUNTIME    HAS_FORTRAN_RUNTIME
tag HAS_GFO_RUNTIME    HAS_FORTRAN_RUNTIME

# Setup several platform and site specializations for the HAS_GFO tag
macro SLES9_HAS_GFO "NO_GFO" \
      SLES9         "NO_GFO" \
      CERN          "HAS_GFO" \
      BNL           "HAS_GFO" \
      LBNL          "HAS_PGI32" \
      STANDALONE    "HAS_GFO"
apply_tag $(SLES9_HAS_GFO)

macro f90_native_version "" \
     HAS_PGI32          "32" \
     HAS_PGI41          "41" \
     HAS_PGI51          "51"

macro PGI  "" \
   CERN       "/afs/cern.ch/sw/fortran/pgi/pgi$(f90_native_version)" \
   BNL        "/usr/pgi" \
   LBNL       "/usr/local/pkg/pgi$(f90_native_version)"

macro G95  "" \
   CERN       "/afs/cern.ch/sw/fortran/g95-install"

macro AtlasFortranPolicy_native_version "" \
              HAS_GFO                  "gcc-v-4.2.0-20060924"

macro gfo_base_cmd  "$(ATLASFORTRANPOLICYROOT)/cmt/setup_gfo_base.sh"
macro GFO_BASE      "${ATLAS_EXTERNAL}/fortran/$(AtlasFortranPolicy_native_version)/gfortran32" \
      slc4&gcc-3.2.3 "${ATLAS_EXTERNAL}/fortran/$(AtlasFortranPolicy_native_version)/gfortran32" \
      gcc43         "`$(gfo_base_cmd)`" \
      gcc45         "`$(gfo_base_cmd)`" \
      gcc46         "`$(gfo_base_cmd)`" \
      gcc47         "`$(gfo_base_cmd)`" \
      gcc48         "`$(gfo_base_cmd)`" \
      gcc49         "`$(gfo_base_cmd)`" \
      target-clang3       "`$(gfo_base_cmd)`" \	  
      slc4          "/usr" \
      slc5          "/usr" \
      slc6          "/usr" \
      Darwin        "/usr" \
      x86_64&gcc    "${ATLAS_EXTERNAL}/fortran/$(AtlasFortranPolicy_native_version)/gfortran64"

macro GFO_LIBS      "lib" \
      slc4&64       "lib64" \
      slc5&64       "lib64" \
      slc6&64       "lib64" 
      
macro GFO           "" \
   slc4&gcc-3.2.3   "$(GFO_BASE)/irun" \
   slc4             "$(GFO_BASE)" \
   slc5             "$(GFO_BASE)" \
   slc6             "$(GFO_BASE)" \
   slc7             "$(GFO_BASE)" \
   target-clang3    "$(GFO_BASE)" \
   Darwin           "$(GFO_BASE)/local/gfortran" \
   CERN             "$(GFO_BASE)/irun" \
   BNL              "$(GFO_BASE)/irun" \
   STANDALONE       "$(GFO_BASE)/irun"

# These two macros are identical to the asNeeded_linkopt and notAsNeeded_linkopt macros defined in AtlasPolicy
# but are needed here because this package doesn't have a dependency against AtlasPolicy
macro gfo_asNeeded_linkopt    "" \
      Darwin                  "" \
      notAsNeeded             "" \
      asNeeded                "-Wl,--as-needed"

macro gfo_notAsNeeded_linkopt "" \
      Darwin                  "" \
      notAsNeeded             "" \
      asNeeded                "-Wl,--no-as-needed" 

macro FORTRAN_libset "" \
     HAS_PGI32  " $(PGI)/linux86/lib/event_init.o $(PGI)/linux86/lib/libpgf90.a $(PGI)/linux86/lib/libpgf90_rpm1.a \
                  $(PGI)/linux86/lib/libpgf902.a $(PGI)/linux86/lib/libpgf90rtl.a $(PGI)/linux86/lib/libpgftnrtl.a $(PGI)/linux86/lib/libpgc.a" \
     HAS_PGI41  " $(PGI)/linux86/lib/libpgf90.a $(PGI)/linux86/lib/libpgf90_rpm1.a $(PGI)/linux86/lib/libpgf902.a \
                  $(PGI)/linux86/lib/libpgf90rtl.a $(PGI)/linux86/lib/libpgftnrtl.a $(PGI)/linux86/lib/libpgc.a " \
     HAS_PGI51  " $(PGI)/linux86/lib/libpgf90.a $(PGI)/linux86/lib/libpgf90_rpm1.a $(PGI)/linux86/lib/libpgf902.a \
                  $(PGI)/linux86/lib/libpgf90rtl.a $(PGI)/linux86/lib/libpgftnrtl.a $(PGI)/linux86/lib/libpgc.a " \
     HAS_PGI52  " $(PGI)/lib/libpgf90.a $(PGI)/lib/libpgf90_rpm1.a $(PGI)/lib/libpgf902.a $(PGI)/lib/libpgf90rtl.a \
                  $(PGI)/lib/libpgftnrtl.a $(PGI)/lib/libnspgc.a $(PGI)/lib/libpgc.a " \
     HAS_GFO&gcc43  " $(gfo_notAsNeeded_linkopt) $(GFO)/$(GFO_LIBS)/libgfortran.so $(gfo_asNeeded_linkopt)" \
     HAS_GFO&gcc45  " $(gfo_notAsNeeded_linkopt) $(GFO)/$(GFO_LIBS)/libgfortran.so $(gfo_asNeeded_linkopt)" \
     HAS_GFO&gcc46  " $(gfo_notAsNeeded_linkopt) `$(for) -print-file-name=libgfortran.so` $(gfo_asNeeded_linkopt)" \
     HAS_GFO&gcc47  " $(gfo_notAsNeeded_linkopt) `$(for) -print-file-name=libgfortran.so` $(gfo_asNeeded_linkopt)" \
     HAS_GFO&gcc48  " $(gfo_notAsNeeded_linkopt) `$(for) -print-file-name=libgfortran.so` $(gfo_asNeeded_linkopt)" \
     HAS_GFO&gcc49  " $(gfo_notAsNeeded_linkopt) `$(for) -print-file-name=libgfortran.so` $(gfo_asNeeded_linkopt)" \
     HAS_GFO&target-clang3  " $(gfo_notAsNeeded_linkopt) `$(for) -print-file-name=libgfortran.so` $(gfo_asNeeded_linkopt)" \	 
     HAS_GFO&slc4   " $(GFO)/$(GFO_LIBS)/libgfortran.so.1" \
     HAS_GFO&slc5   " $(GFO)/$(GFO_LIBS)/libgfortran.so.1" \
     HAS_GFO&slc6   " $(GFO)/$(GFO_LIBS)/libgfortran.so.1" \
     HAS_GFO&Darwin " $(GFO)/$(GFO_LIBS)/libgfortran.dylib" \
     HAS_GFO        " $(GFO)/$(GFO_LIBS)/libgfortranbegin.a $(GFO)/$(GFO_LIBS)/libgfortran.a" \
     HAS_G95        " $(G95)/lib/gcc-lib/i686-pc-linux-gnu/4.0.1/libf95.a"


macro HAS_GFO_export "" \
      HAS_GFO&slc4   "" \
      HAS_GFO&slc5   "" \
      HAS_GFO&slc6   "" \
      HAS_GFO "$(GFO)/bin $(GFO)/include $(GFO)/$(GFO_LIBS)  $(GFO)/libexec "

#
# Settings only appropriate when the full compiler is available
#

pattern fortran_macro \
 macro <name>_platform "" HAS_FORTRAN "<value>" ; \
 macro <name> "" Linux "$(<name>_platform)" Darwin "$(<name>_platform)"

pattern pgi_gfo_g95_macro \
 macro <name>_platform "" HAS_PGI "<pgivalue>" HAS_GFO "<gforvalue>" HAS_G95 "<g95value>" ; \
 macro <name> "" Linux "$(<name>_platform)" Darwin "$(<name>_platform)"

pattern fortran_runtime_macro \
 macro <name>_platform "" HAS_FORTRAN_RUNTIME "<value>" ; \
 macro <name> "" Linux "$(<name>_platform)" Darwin "$(<name>_platform)"

# use the default gfortran compiler on MacOSX rather than specifying a particular path for it
macro gfortran_path "$(GFO)/bin/" \
      Darwin        ""
apply_pattern pgi_gfo_g95_macro name=f90_home pgivalue="$(PGI)/bin" gforvalue="$(gfortran_path)" g95value="$(G95)/bin"


path_remove  PATH "" Linux /pacific/
path_remove  PATH "" Linux /pgi/
path_remove  PATH "" Linux "/gfortran/"
####path_prepend PATH "" Linux "$(f90_home)"

#### For SL4 native gfortran compiler one has to add /usr/lib64 to LD_LIBRARY_PATH
cmtpath_pattern \
  path_remove LD_LIBRARY_PATH "" \
              slc4&64 "/usr/lib64" \
              slc5&64 "/usr/lib64" \
	      slc6&64 "/usr/lib64"

cmtpath_pattern \
  path_append LD_LIBRARY_PATH "" \
              slc4&64 "/usr/lib64" \
              slc5&64 "/usr/lib64" \
	      slc6&64 "/usr/lib64"

apply_pattern pgi_gfo_g95_macro name=for90   pgivalue="pgf90" gforvalue="$(f90_home)gfortran" g95value="i686-pc-linux-gnu-g95"
#### Only the 32-bit gfortran compiler is available and it doesn't have support for generating 64-bit binaries built in
#### I believe the following options should work for 64-bit mode when such support is available
macro_append for90 "" x86_64&gcc&32 " -m32" x86_64&gcc&64 " -m64"

apply_pattern fortran_macro name=f90pp      value="$(for) -E -P $(fincludes) "
### pour g95
###apply_pattern fortran_macro name=f90flags   value="-fno-second-underscore -fPIC"
### pour gfortran                                       -ff2c ne semble rien changer plante toujours
apply_pattern fortran_macro name=f90flags   value=" -O3 -fno-second-underscore -fPIC"
macro_append f90flags "" x86_64&gcc&32 " -march=pentium -Wa,-32" x86_64&gcc&64 " -Wa,-64"
### pour pgf90
####apply_pattern fortran_macro name=f90flags   value="-Mnosecond_underscore -fPIC"
apply_pattern fortran_macro name=f90ppflags value=" -pipe -fno-second-underscore -Wall -W -Wsurprising -fPIC "
macro_append f90flags "" \
             dbg      " -fbounds-check "

apply_pattern fortran_macro name=f90comp    value="$(for90) -c $(includes) $(f90flags) $(pp_f90flags)"
apply_pattern fortran_macro name=f90link    value="$(for90) $(f90linkflags)"

#
#  This macro should be installed in AtlasFortranPolicy_linkopts. However,
#  since nowadays this package is used automatically (through AtlasPolicy)
#  by all packages, it's probably better to keep it manual.
#   Thus F90 users are advised to append $(f90_linkopts) to their
#  <application>linkopts macro
#

macro gcc_s            "" \
      gcc41            "" \
      useG77&x86_64&32 "-lgcc_s_32" \
      Darwin           "" \
      useG77           "-lgcc_s"

apply_pattern pgi_gfo_g95_macro name=f90_system_linkopts pgivalue="-lm -lgcc -lc -lgcc $(f77_linkopts)" gforvalue="-lm $(gcc_s) -lgcc -lc $(gcc_s) -lgcc $(f77_linkopts)" g95value="-lm -lgcc -lc -lgcc $(f77_linkopts)"
apply_pattern fortran_runtime_macro name=f90_linkopts value="$(FORTRAN_libset) $(f90_system_linkopts)"

#
#   ff90 suffix is for fixed format compiling
#   f90 suffix is for free format compiling
#

language fortran90 -suffix=ff90 -suffix=FF90 -suffix=f90 -suffix=F90 -linker=$(f90link) -preprocessor_command=$(ppcmd)

macro fortran90_fragment "" HAS_FORTRAN "fortran90"
macro fortran90_library_fragment "" HAS_FORTRAN "fortran90_library"

make_fragment $(fortran90_fragment)
make_fragment $(fortran90_library_fragment)

macro AtlasFortranPolicy_linkopts " $(f90_linkopts) $(f77_linkopts) "

#
# When using f90, please install the following statement to your requirements file
#
###macro AtlasFortranPolicy_linkopts "$(f90_linkopts)"

macro AtlasFortranPolicy_export_paths "$(FORTRAN_libset)" \
              HAS_GFO " $(HAS_GFO_export) "

#--------------------------------------------------
#
# This is a hack to overcome a problem with g77 where it fails if -I<path>
# fragments are too long (about 100 chars). This converts the absolute
# path names to relative path names.

pattern -global relative_fincludes \
 macro old_dir        "" useG77 "`echo $(<package>_project)/$(<package>_project_release) | sed -e 's#//#/#g'`" ; \
 macro old_base       "" useG77 "`echo $(<package>_cmtpath) | sed -e 's#/$(old_dir)##'`" ; \
 macro sedcmd         "" useG77 "'s#$(old_base)##' -e 's#^/##' -e 's#/$##' -e 's#[^/]*#..#g'" ; \
 macro new_base       "" useG77 "`echo $(<package>_root)/cmt | sed -e $(sedcmd)`" ; \
 macro part_fincludes "" useG77 "`( echo $(includes) | sed -e 's#$(old_base)#$(new_base)#g')`" ; \
 macro new_fincludes  "" useG77 "`$(ATLASFORTRANPOLICYROOT)/cmt/patch_fincludes.sh $(<package>_cmtpath) $(<package>_root)`" ; \
 macro fincludes      "$(includes)" useG77 "`cmt show macro_value new_fincludes`"
