#
#Copyright (C) 2002-2021 CERN for the benefit of the ATLAS collaboration                                                                                           
#

import ROOT

Dic_etaStation_dbZ = {
  1:[1,2], 
  2:[1,2,3], 
  3:[1,2], 
  4:[1,2,3], 
  5:[1,2], 
  6:[1,2], 
  7:[1,2], 
  8:[1,2]
}

#############################################################################
xTitleOffset = {"TH1"      : 0.9,
              "TH2"         : 0.9,
              "TGraph"      : 1.0,
              "TEfficiency" : 1.0
}
yTitleOffset = {"TH1"      : 1.6,
              "TH2"         : 1.0,
              "TGraph"      : 1.6,
              "TEfficiency" : 1.6
}
zTitleOffset = {"TH1"      : 0.,
              "TH2"         : 1.2,
              "TGraph"      : 0.,
              "TEfficiency" : 0.
}

#############################################################################
list_boxes_layers = {
  1: [ 
        ("1:3",  "1:32"),  ("7", "1:32"), ("9", "1:32"), ("19:20", "1:32"), ("30", "1:32"), ("32", "1:32"),("36:38", "1:32"),
        
        ("4:12", "23:24"), ("4:12", "27:28"), ("27:35", "23:24"), ("27:35", "27:28"), 

        ("4",  "3:4"), ("4",  "7:8"),  ("4",  "11:12"),  ("4",  "15:16"),  ("4",  "19:20"),  ("4",  "31:32"),
        ("35", "3:4"), ("35", "7:8"),  ("35", "11:12"),  ("35", "15:16"),  ("35", "19:20"),  ("35", "31:32"),

        ("10", "1:2"), ("10", "5:6"), ("10", "9:10"), ("10", "13:14"), ("10", "17:18"), ("10", "21:22"), ("10", "29:30"), 
        ("14", "1:2"), ("14", "5:6"), ("14", "9:10"), ("14", "13:14"), ("14", "17:18"), ("14", "21:30"), 
        ("17", "1:2"),                                ("17", "13:14"), ("17", "17:18"), ("17", "21:22"), ("17", "25:26"), ("17", "29:30"), 

        ("29", "1:2"), ("29", "5:6"), ("29", "9:10"), ("29", "13:14"), ("29", "17:18"), ("29", "21:22"), ("29", "29:30"), 
        ("25", "1:2"), ("25", "5:6"), ("25", "9:10"), ("25", "13:14"), ("25", "17:18"), ("25", "21:30"), 
                                                      ("22", "13:14"), ("22", "17:18"), ("22", "21:22"), ("22", "25:26"), ("22", "29:30"), 
     ],

  2: [ 
      ("1:3",  "1:32"),  ("7", "1:32"), ("9", "1:32"), ("19:20", "1:32"), ("30", "1:32"), ("32", "1:32"),("36:38", "1:32"),
      
      ("4:12", "23:24"), ("4:12", "27:28"), ("27:35", "23:24"), ("27:35", "27:28"), 

      ("4",  "3:4"), ("4",  "7:8"),  ("4",  "11:12"),  ("4",  "15:16"),  ("4",  "19:20"),  ("4",  "31:32"),
      ("35", "3:4"), ("35", "7:8"),  ("35", "11:12"),  ("35", "15:16"),  ("35", "19:20"),  ("35", "31:32"),

      ("10", "1:2"), ("10", "5:6"), ("10", "9:10"), ("10", "13:14"), ("10", "17:18"), ("10", "21:22"), ("10", "29:30"), 
      ("14", "1:2"), ("14", "5:6"), ("14", "9:10"), ("14", "13:14"), ("14", "17:18"), ("14", "21:30"), 
      ("17", "1:2"),                                ("17", "13:14"), ("17", "17:18"), ("17", "21:22"), ("17", "25:26"), ("17", "29:30"), 

      ("29", "1:2"), ("29", "5:6"), ("29", "9:10"), ("29", "13:14"), ("29", "17:18"), ("29", "21:22"), ("29", "29:30"), 
      ("25", "1:2"), ("25", "5:6"), ("25", "9:10"), ("25", "13:14"), ("25", "17:18"), ("25", "21:30"), 
                                                    ("22", "13:14"), ("22", "17:18"), ("22", "21:22"), ("22", "25:26"), ("22", "29:30"), 
   ],

  3: [ 
      ("1:4",  "1:32"),  ("7", "1:32"), ("19:20", "1:32"), ("32", "1:32"),("35:38", "1:32"),
      
      ("5:11", "23:24"), ("5:11", "27:28"), ("28:34", "23:24"), ("28:34", "27:28"), 

      ("9:10",  "1:2"), ("9:10",  "5:6"), ("9:10",  "9:10"), ("9:10",  "13:14"), ("9:10",  "17:18"), ("9:10",  "21:22"), ("9:10",  "29:30"),
      ("29:30", "1:2"), ("29:30", "5:6"), ("29:30", "9:10"), ("29:30", "13:14"), ("29:30", "17:18"), ("29:30", "21:22"), ("29:30", "29:30"),

      ("9", "25:26"), ("30", "25:26"), 

      ("14", "1:2"), ("14", "5:6"), ("14", "9:10"), ("14", "13:14"), ("14", "17:18"), ("14", "21:30"), 
      ("17", "1:2"),                                ("17", "13:14"), ("17", "17:18"), ("17", "21:22"), ("17", "25:26"), ("17", "29:30"), 

      ("25", "1:2"), ("25", "5:6"), ("25", "9:10"), ("25", "13:14"), ("25", "17:18"), ("25", "21:30"), 
                                                    ("22", "13:14"), ("22", "17:18"), ("22", "21:22"), ("22", "25:26"), ("22", "29:30"), 
   ],

  4: [ 
      ("1:4",  "1:32"),  ("7", "1:32"), ("19:20", "1:32"), ("32", "1:32"),("35:38", "1:32"),
      
      ("5:11", "23:24"), ("5:11", "27:28"), ("28:34", "23:24"), ("28:34", "27:28"), 

      ("9:10",  "1:2"), ("9:10",  "5:6"), ("9:10",  "9:10"), ("9:10",  "13:14"), ("9:10",  "17:18"), ("9:10",  "21:22"), ("9:10",  "29:30"),
      ("29:30", "1:2"), ("29:30", "5:6"), ("29:30", "9:10"), ("29:30", "13:14"), ("29:30", "17:18"), ("29:30", "21:22"), ("29:30", "29:30"),

      ("9", "25:26"), ("30", "25:26"), 

      ("14", "1:2"), ("14", "5:6"), ("14", "9:10"), ("14", "13:14"), ("14", "17:18"), ("14", "21:30"), 
      ("17", "1:2"),                                ("17", "13:14"), ("17", "17:18"), ("17", "21:22"), ("17", "25:26"), ("17", "29:30"), 

      ("25", "1:2"), ("25", "5:6"), ("25", "9:10"), ("25", "13:14"), ("25", "17:18"), ("25", "21:30"), 
                                                    ("22", "13:14"), ("22", "17:18"), ("22", "21:22"), ("22", "25:26"), ("22", "29:30"), 
   ],

  5: [ 
      ("1:4",  "1:22"),  ("19:20", "1:22"),  ("35:38", "1:22"),
      ("1:4",  "29:32"), ("19:20", "29:32"), ("35:38", "29:32"),

      ("9", "1:32"), ("14", "1:32"), ("25", "1:32"), ("30", "1:32"), 
      
      ("1", "23:28"), ("3", "23:28"), ("19", "23:28"), ("36", "23:28"), ("38", "23:28"), 

      ("5", "23:24"), ("10", "23:24"), ("15", "23:24"), ("24", "23:24"), ("29", "23:24"), ("34", "23:24"), 
      ("5", "27:28"), ("10", "27:28"), ("15", "27:28"), ("24", "27:28"), ("29", "27:28"), ("34", "27:28"), 
      
      ("4", "25:26"), ("20", "25:26"), ("35", "25:26"), 
   ],

  6: [ 
      ("1:4",  "1:22"),  ("19:20", "1:22"),  ("35:38", "1:22"),
      ("1:4",  "29:32"), ("19:20", "29:32"), ("35:38", "29:32"),

      ("9", "1:32"), ("14", "1:32"), ("25", "1:32"), ("30", "1:32"), 
      
      ("1", "23:28"), ("3", "23:28"), ("19", "23:28"), ("36", "23:28"), ("38", "23:28"), 

      ("5", "23:24"), ("10", "23:24"), ("15", "23:24"), ("24", "23:24"), ("29", "23:24"), ("34", "23:24"), 
      ("5", "27:28"), ("10", "27:28"), ("15", "27:28"), ("24", "27:28"), ("29", "27:28"), ("34", "27:28"), 
      
      ("4", "25:26"), ("20", "25:26"), ("35", "25:26"), 
   ],

  7: [ 
    ("1:38",  "1:22"),
    ("1:38",  "29:32"),

    ("14:25", "23:28"),
    ("1:38",  "25:26"),

    ("1", "23:28"), ("3", "23:28"), ("5", "23:28"), ("34", "23:28"), ("36", "23:28"), ("38", "23:28"), 

    ("9:11", "23:28"), ("28:30", "23:28"), 
  ],

  8: [ 
    ("1:38",  "1:22"),
    ("1:38",  "29:32"),

    ("14:25", "23:28"),
    ("1:38",  "25:26"),

    ("1", "23:28"), ("3", "23:28"), ("5", "23:28"), ("34", "23:28"), ("36", "23:28"), ("38", "23:28"), 

    ("9:11", "23:28"), ("28:30", "23:28"), 
  ],
}


# -----------------------------------------------------------------------
def classifyInstance(hist):
    if isinstance(hist, ROOT.TH1D) or isinstance(hist, ROOT.TH1I) or isinstance(hist, ROOT.TProfile) or isinstance(hist, ROOT.TH1F):
      instance = "TH1"
    elif isinstance(hist, ROOT.TH2D) or isinstance(hist, ROOT.TH2I) or isinstance(hist, ROOT.TH2F) or isinstance(hist, ROOT.TProfile2D):
      instance = "TH2"
    elif isinstance(hist, ROOT.TGraph) or isinstance(hist, ROOT.TGraphErrors):
      instance = "TGraph"
    elif isinstance(hist, ROOT.TEfficiency):
      instance = "TEfficiency"

    return instance

# -----------------------------------------------------------------------
def setTitleOffset(hist, instance=""):
  if instance == "":
    instance = classifyInstance(hist)

  if instance == "TEfficiency":
    hist.GetPaintedGraph().GetXaxis().SetTitleOffset(xTitleOffset[instance])
    hist.GetPaintedGraph().GetYaxis().SetTitleOffset(yTitleOffset[instance])
  else:
    hist.GetXaxis().SetTitleOffset(xTitleOffset[instance])
    hist.GetYaxis().SetTitleOffset(yTitleOffset[instance])
    if instance == "TH2":
      hist.GetZaxis().SetTitleOffset(zTitleOffset[instance])


# -----------------------------------------------------------------------
def set_verticalGrid(hist2d):
    y_min = 0.
    y_max = 32.
    dashlines_x  = [-18., -16., -14., -12., -10., -9., -7., -5., -4., -2., 2., 4., 5., 7., 9., 10., 12., 14., 16., 18.]
    solidlines_x = [-17., -15., -13., -11., -8.,  -6., -3., -1., 1., 3., 6., 8., 11., 13., 15., 17.]

    for i_x in dashlines_x:
      dash_line = ROOT.TLine(i_x, y_min, i_x, y_max)
      dash_line.SetLineStyle(2) 
      dash_line.SetLineWidth(1) 
      dash_line.SetLineColor(ROOT.kBlack) 

      hist2d.GetListOfFunctions().Add(dash_line)

    for i_x in solidlines_x:
      solid_line = ROOT.TLine(i_x, y_min, i_x, y_max)
      solid_line.SetLineStyle(1) 
      solid_line.SetLineWidth(1) 
      solid_line.SetLineColor(ROOT.kBlack) 

      hist2d.GetListOfFunctions().Add(solid_line)

# -----------------------------------------------------------------------
def set_horizonGrid(hist2d):
    xmin  = -19.
    xmax  = 19.
    for i_sec in range(1, 16+1):
      solid_line = ROOT.TLine(xmin, i_sec*2, xmax, i_sec*2)
      solid_line.SetLineStyle(1) 
      solid_line.SetLineWidth(1)
      solid_line.SetLineColor(ROOT.kBlack)
      hist2d.GetListOfFunctions().Add(solid_line)

      dash_line = ROOT.TLine(xmin, i_sec*2-1, xmax, i_sec*2-1)
      dash_line .SetLineStyle(2)
      dash_line .SetLineWidth(1)
      dash_line .SetLineColor(ROOT.kBlack) 
      hist2d.GetListOfFunctions().Add(dash_line)

# -----------------------------------------------------------------------
def set_blankBox(hist_2d, layer):
    if not (layer in list_boxes_layers):
        print("HistDecorate::set_blankBox::ERROR - unknown layer index %d"%layer)
        return

    list_boxes = list_boxes_layers[layer]
    for box_str in list_boxes:
        box_pos = findBoxPos(hist_2d, box_str[0], box_str[1])

        tbox =ROOT.TBox(box_pos[0], box_pos[1], box_pos[2], box_pos[3])
        tbox.SetFillColor(ROOT.kGray)

        hist_2d.GetListOfFunctions().Add(tbox)

# -----------------------------------------------------------------------
def findBoxPos(h2, binx_str, biny_str):
    bins_X = [int(i) for i in binx_str.split(":")]
    bins_Y = [int(i) for i in biny_str.split(":")]

    Xpos = findAxisPos(h2, bins_X, axis = 1)
    Ypos = findAxisPos(h2, bins_Y, axis = 2)

    return (Xpos[0], Ypos[0], Xpos[1], Ypos[1])

# -----------------------------------------------------------------------
def findAxisPos(h2, bins, axis = 1):
    low_bin = 0
    up_bin  = 0
    if len(bins) == 2:
        low_bin = bins[0]
        up_bin  = bins[1]
    else:
        low_bin = bins[0]
        up_bin  = bins[0]

    if axis == 1:
        pos_1 = h2.GetXaxis().GetBinLowEdge(low_bin)
        pos_2 = h2.GetXaxis().GetBinUpEdge(up_bin)
    elif  axis == 2:
        pos_1 = h2.GetYaxis().GetBinLowEdge(low_bin)
        pos_2 = h2.GetYaxis().GetBinUpEdge(up_bin)
    else:
        print("HistDecorate::findAxisPos::ERROR - the axis index can only be 1 or 2")

    return (pos_1, pos_2) 

#############################################################################
def setAxisLabel_EtaPhi(hist2d):
  x_axis = hist2d.GetXaxis()
  y_axis = hist2d.GetYaxis()

  XBins_Labeled = { # bin : eta station
    1 : '-8', 
    3 : '-7', 
    5 : '-6', 
    7 : '-5', 
    10: '-4', 
    12: '-3', 
    15: '-2', 
    17: '-1', 
    19:  '0', 
    21:  '1', 
    24:  '2', 
    26:  '3', 
    29:  '4', 
    32:  '5', 
    34:  '6', 
    36:  '7', 
    38:  '8'
  }

  YBins_Labeled = { # bin : Sector name
    1:"L1",
    2:"S2",
    3:"L3",
    4:"S4",
    5:"L5",
    6:"S6",
    7:"L7",
    8:"S8",
    9:"L9",
    10:"S10",
    11:"L11",
    12:"FG12",
    13:"L13",
    14:"FG14",
    15:"L15",
    16:"S16"
  }

  for i_bin, i_label in XBins_Labeled.items():
    x_axis.SetBinLabel(i_bin, i_label)

  for i_bin, i_label in YBins_Labeled.items():
    y_axis.SetBinLabel(i_bin*2-1, i_label)

  hist2d.GetXaxis().SetTitleOffset(0.9)
  hist2d.GetYaxis().SetTitleOffset(1.0)
  hist2d.GetZaxis().SetTitleOffset(1.2)

#############################################################################
if __name__ ==  '__main__':
  print ("HistDecorate:  Hello, World !")
