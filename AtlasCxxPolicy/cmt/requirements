package AtlasCxxPolicy

# Force a dependency on GaudiPolicy so that it's tags are available 
# and it's policies can be overridden.

use GaudiPolicy v* -no_auto_imports

# Setup tags etc. declared by ExternalPolicy
use ExternalPolicy      ExternalPolicy-*  External
use AtlasCompilers      AtlasCompilers-*  External

build_strategy no_prototypes

##### remove config ######################
#make_fragment build_config -header=build_config_header
#
#pattern -global config document build_config config config_dir=../${package}
#
##macro config_command "$(cmtexe) check_files "
#macro config_command "cp "
#
#ignore_pattern config
##########################################

include_dirs $(AtlasCxxPolicy_root)

#-------------------------------------------------------------
# Override C++ compiler version on MacOSX 10.6 (Snow Leopard) when using gcc40 
#-------------------------------------------------------------
macro cpp_name "$(cpp_name)" host-mac106&gcc40 "gcc-4.0"

#-------------------------------------------------------------	  
# Add support for building 32-bit libraries on a 64-bit system
#-------------------------------------------------------------
macro_append shlibbuilder                       "" \
             target-gcc&target-i686&host-x86_64 " -m32" \
             target-gcc&target-i386&host-x86_64 " -m32"

#----------------------------------------------
# C++ flags and options
#----------------------------------------------

# Setup default ATLAS cppflags values, ignoring any that are set by GaudiPolicy. Unfortunately it's
# not possible to predict which one will have priority, which is why there's an initial "macro" 
# ensure that the ATLAS-specific warning flags are set. 
# DRQ: The -ansi is omitted for MacOSX because it causes problem with e.g. finite() which needs
# to be replaced by std::isfinite() even though on Linux the former works ok. In principle I'd like
# to use the same cppflags for both platforms (since std::isfinite() is ok for both), but I'm going
# to leave things as they are for now and avoid having to fix multiple packages. 
macro cppflags                       "" \
      target-darwin                  " -D_GNU_SOURCE -pthread -pipe -fPIC -W -Wall " \
      target-unix                    " -D_GNU_SOURCE -pthread -pipe -ansi -fPIC -W -Wall "
macro_append cppflags                " -pedantic -Wwrite-strings -Wpointer-arith -Woverloaded-virtual -Wno-long-long "
macro_append cppflags                "" \
             errorConversion         " -Werror=conversion "
macro_append cppflags                "" \
             target-unix&target-i686 " -march=pentium "
macro_append cppflags                "" \
             target-gcc&padded       " -Wpadded "
macro_append cppflags                "" \
      target-dbg&no-inline           " -fno-inline -fno-default-inline"
macro_append cppflags                "" \
             noWerror                "" \
             applyWerror             " -Werror"
macro_append cppflags                "" \
             target-gcc              " -fno-var-tracking-assignments "

# Enable c++11 for gcc47 (enables target-c11)
macro_append cppflags  "" \
      target-c11       " -std=c++11 "

# Checking.
# Can't use use_if here, since that makes a private dependency and we need
# it to be public.
macro use_CheckerGccPlugins_if "" target-gcc "CheckerGccPlugins CheckerGccPlugins-* External"
use $(use_CheckerGccPlugins_if)
macro_append cppflags " $(CheckerGccPlugins_args) "


# Intel compiler support
macro_remove cppflags "" target-icc "-W "

macro AtlasCxxPolicy_pp_cppflags  "" \
      target-gcc40   " \
-DHAVE_PRETTY_FUNCTION \
-DHAVE_LONG_LONG \
-DHAVE_BOOL \
-DHAVE_EXPLICIT \
-DHAVE_MUTABLE \
-DHAVE_SIGNED \
-DHAVE_TYPENAME \
-DHAVE_NEW_STYLE_CASTS \
-DHAVE_DYNAMIC_CAST \
-DHAVE_TYPEID \
-DHAVE_ANSI_TEMPLATE_INSTANTIATION \
-DHAVE_TEMPLATE_DEFAULT_ARGS \
-DHAVE_BROKEN_TEMPLATE_RESCOPE \
-DHAVE_TEMPLATE_NULL_ARGS \
-DHAVE_TEMPLATE_NULL_SPEC \
-DHAVE_TEMPLATE_PARTIAL_SPEC \
-DHAVE_MEMBER_TEMPLATES \
-DHAVE_ANSI_OPERATOR_ARROW \
-DHAVE_NAMESPACES \
-DHAVE_NAMESPACE_STD \
-DHAVE_NEW_IOSTREAMS \
-DHAVE_OSTREAM_CHAR_OVERLOAD \
-DHAVE_ITERATOR_TRAITS \
-DHAVE_ITERATOR \
-DHAVE_REVERSE_ITERATOR_STYLE \
-DHAVE_CXX_STDC_HEADERS" \
      target-gcc41   " \
-DHAVE_PRETTY_FUNCTION \
-DHAVE_LONG_LONG \
-DHAVE_BOOL \
-DHAVE_EXPLICIT \
-DHAVE_MUTABLE \
-DHAVE_SIGNED \
-DHAVE_TYPENAME \
-DHAVE_NEW_STYLE_CASTS \
-DHAVE_DYNAMIC_CAST \
-DHAVE_TYPEID \
-DHAVE_ANSI_TEMPLATE_INSTANTIATION \
-DHAVE_TEMPLATE_DEFAULT_ARGS \
-DHAVE_BROKEN_TEMPLATE_RESCOPE \
-DHAVE_TEMPLATE_NULL_ARGS \
-DHAVE_TEMPLATE_NULL_SPEC \
-DHAVE_TEMPLATE_PARTIAL_SPEC \
-DHAVE_MEMBER_TEMPLATES \
-DHAVE_ANSI_OPERATOR_ARROW \
-DHAVE_NAMESPACES \
-DHAVE_NAMESPACE_STD \
-DHAVE_NEW_IOSTREAMS \
-DHAVE_OSTREAM_CHAR_OVERLOAD \
-DHAVE_ITERATOR_TRAITS \
-DHAVE_ITERATOR \
-DHAVE_REVERSE_ITERATOR_STYLE \
-DHAVE_CXX_STDC_HEADERS" \
      target-gcc42   " \
-DHAVE_PRETTY_FUNCTION \
-DHAVE_LONG_LONG \
-DHAVE_BOOL \
-DHAVE_EXPLICIT \
-DHAVE_MUTABLE \
-DHAVE_SIGNED \
-DHAVE_TYPENAME \
-DHAVE_NEW_STYLE_CASTS \
-DHAVE_DYNAMIC_CAST \
-DHAVE_TYPEID \
-DHAVE_ANSI_TEMPLATE_INSTANTIATION \
-DHAVE_TEMPLATE_DEFAULT_ARGS \
-DHAVE_BROKEN_TEMPLATE_RESCOPE \
-DHAVE_TEMPLATE_NULL_ARGS \
-DHAVE_TEMPLATE_NULL_SPEC \
-DHAVE_TEMPLATE_PARTIAL_SPEC \
-DHAVE_MEMBER_TEMPLATES \
-DHAVE_ANSI_OPERATOR_ARROW \
-DHAVE_NAMESPACES \
-DHAVE_NAMESPACE_STD \
-DHAVE_NEW_IOSTREAMS \
-DHAVE_OSTREAM_CHAR_OVERLOAD \
-DHAVE_ITERATOR_TRAITS \
-DHAVE_ITERATOR \
-DHAVE_REVERSE_ITERATOR_STYLE \
-DHAVE_CXX_STDC_HEADERS" \
      target-gcc43   " \
-DHAVE_PRETTY_FUNCTION \
-DHAVE_LONG_LONG \
-DHAVE_BOOL \
-DHAVE_EXPLICIT \
-DHAVE_MUTABLE \
-DHAVE_SIGNED \
-DHAVE_TYPENAME \
-DHAVE_NEW_STYLE_CASTS \
-DHAVE_DYNAMIC_CAST \
-DHAVE_TYPEID \
-DHAVE_ANSI_TEMPLATE_INSTANTIATION \
-DHAVE_TEMPLATE_DEFAULT_ARGS \
-DHAVE_BROKEN_TEMPLATE_RESCOPE \
-DHAVE_TEMPLATE_NULL_ARGS \
-DHAVE_TEMPLATE_NULL_SPEC \
-DHAVE_TEMPLATE_PARTIAL_SPEC \
-DHAVE_MEMBER_TEMPLATES \
-DHAVE_ANSI_OPERATOR_ARROW \
-DHAVE_NAMESPACES \
-DHAVE_NAMESPACE_STD \
-DHAVE_NEW_IOSTREAMS \
-DHAVE_OSTREAM_CHAR_OVERLOAD \
-DHAVE_ITERATOR_TRAITS \
-DHAVE_ITERATOR \
-DHAVE_REVERSE_ITERATOR_STYLE \
-DHAVE_CXX_STDC_HEADERS" \
      target-gcc4    " \
-DHAVE_PRETTY_FUNCTION \
-DHAVE_LONG_LONG \
-DHAVE_BOOL \
-DHAVE_EXPLICIT \
-DHAVE_MUTABLE \
-DHAVE_SIGNED \
-DHAVE_TYPENAME \
-DHAVE_NEW_STYLE_CASTS \
-DHAVE_DYNAMIC_CAST \
-DHAVE_TYPEID \
-DHAVE_ANSI_TEMPLATE_INSTANTIATION \
-DHAVE_TEMPLATE_DEFAULT_ARGS \
-DHAVE_BROKEN_TEMPLATE_RESCOPE \
-DHAVE_TEMPLATE_NULL_ARGS \
-DHAVE_TEMPLATE_NULL_SPEC \
-DHAVE_TEMPLATE_PARTIAL_SPEC \
-DHAVE_MEMBER_TEMPLATES \
-DHAVE_ANSI_OPERATOR_ARROW \
-DHAVE_NAMESPACES \
-DHAVE_NAMESPACE_STD \
-DHAVE_NEW_IOSTREAMS \
-DHAVE_OSTREAM_CHAR_OVERLOAD \
-DHAVE_ITERATOR_TRAITS \
-DHAVE_ITERATOR \
-DHAVE_REVERSE_ITERATOR_STYLE \
-DHAVE_CXX_STDC_HEADERS" \
      target-icc    " \
-DHAVE_NEW_IOSTREAMS" \
-DHAVE_CXX_STDC_HEADERS" \
      target-clang3    " \
-DHAVE_NEW_IOSTREAMS"

# Note that MacOSX (Darwin) will report itself as host-i386 depending on whether it was booted
# in 32-bit or 64-bit mode, although it can in either case run 64-bit applications.
macro_append AtlasCxxPolicy_pp_cppflags           "" \
             target-gcc&target-x86_64&host-x86_64 " -DHAVE_64_BITS" \
             target-gcc&target-x86_64&host-darwin " -DHAVE_64_BITS"

# Add flag to control 64-bit Identifiers
macro_append AtlasCxxPolicy_pp_cppflags  " -D__IDENTIFIER_64BIT__ " 

#
# Generate a C++ macro for providing the package version 
#
macro q2 '"'
macro_append AtlasCxxPolicy_pp_cppflags " '-DPACKAGE_VERSION=$(q2)$(version)$(q2)' -DPACKAGE_VERSION_UQ=$(version) "

#
# Suppression of DEBUG activities when opt qualifier is active
#
macro_append AtlasCxxPolicy_pp_cppflags "" \
             target-opt                 " -DNDEBUG "

# Append the GAUDI pp_cppflags contents
macro_append AtlasCxxPolicy_pp_cppflags "$(pp_cppflags)"

#----------------------------------------------
# C flags and options
#----------------------------------------------

macro cflags     "-fPIC"
macro clinkflags "-fPIC"

macro_append cflags  "" \
      target-c11     " -std=c11 "

# Make use of C++ preprocessor for dependencies Makefiles generation
# (CMT v1r20p20090520 and later)
tag Linux cpp_native_dependencies
tag Darwin cpp_native_dependencies

