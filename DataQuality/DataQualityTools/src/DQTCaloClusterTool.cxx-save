// ********************************************************************
//
// NAME:     DQTCaloClusterTool.cxx
// PACKAGE:  DataQualityTools  
//
// AUTHORS:   Jahred Adelman (jahred.adelman@cern.ch)
//            and Max Baak (mbaakcern.ch)
//
// ********************************************************************

#include "DataQualityTools/DQTCaloClusterTool.h"

#include "GaudiKernel/MsgStream.h"
#include "GaudiKernel/ITHistSvc.h"

#include "xAODCaloEvent/CaloCluster.h"
#include "xAODCaloEvent/CaloClusterContainer.h"
#include "xAODMissingET/MissingET.h"
//#include "MissingETEvent/MissingEtCalo.h"

#include "AnalysisTriggerEvent/LVL1_ROI.h"

#include "TProfile.h"

#include "xAODTracking/TrackParticle.h"
#include "TrkParameters/TrackParameters.h"
#include "RecoToolInterfaces/IExtrapolateToCaloTool.h"

//----------------------------------------------------------------------------------
DQTCaloClusterTool::DQTCaloClusterTool(const std::string & type, 
		   const std::string & name,
		   const IInterface* parent)
   : DataQualityFatherMonTool(type, name, parent),
     m_eta_highestEtGM(0),
     m_phi_highestEtGM(0),
     m_eta_highestEtCombined_v_L1GM(0),
     m_phi_highestEtCombined_v_L1GM(0),
     m_et_highestEtCombined_v_L1GM(0),
     m_phi_metGM(0),
     m_phi_trt_v_caloGM(0),
     m_phi_trt_v_emGM(0),
     m_phi_trt_v_hadGM(0),
     m_deta_highestEtGM(0),
     m_dphi_highestEtGM(0),
     m_deta_highestEtCombined_v_L1GM(0),
     m_dphi_highestEtCombined_v_L1GM(0),
     m_det_highestEtCombined_v_L1GM(0),
     m_dphi_metGM(0),
     m_dphi_trt_v_caloGM(0),
     m_dphi_trt_v_emGM(0),
     m_dphi_trt_v_hadGM(0),
     m_eOverpGM(0),
     m_dRTrackDQTCaloClusterGM(0),
     //REL19 
     m_trackToCalo("ExtrapolateToCaloTool/extrapolateToCaloTool"),
     //REL18 m_trackToCalo("ExtrapolTrackToCaloTool/extrapolTrackToCaloTool"),
     m_EMClusterName("LArClusterEM"),
     m_HadClusterName("HadTopoCluster"),
     m_DQTCaloClusterName("CaloCalTopoCluster"),
     m_METTopoName("MET_Calib"),
     m_METName("MET_Final"),
     m_trackIDName("CombinedInDetTracks"),
     m_dRTrackCalo(0.4),
     m_TrackIsoCut(0.1),
     m_TrackIsoCone(0.2)

//     m_trigDec("TrigDec::TrigDecisionTool")

//----------------------------------------------------------------------------------

{
  declareInterface<IMonitorToolBase>(this);
  m_path = "GLOBAL/DQTCaloCluster";
  declareProperty("EMCluster", m_EMClusterName);
  declareProperty("HadCluster", m_HadClusterName);
  declareProperty("DQTCaloCluster", m_DQTCaloClusterName);
  declareProperty("METTopo", m_METTopoName);
  declareProperty("METName", m_METName);
  declareProperty("TrackID", m_trackIDName);
  declareProperty("DRTrackCalo", m_dRTrackCalo);
  declareProperty("TrackIsoCut", m_TrackIsoCut);
  declareProperty("TrackIsoCone", m_TrackIsoCone);
///  declareProperty("TrigDecisionTool", m_trigDec, "Tool to access the trigger decision");
  declareProperty("doRunCosmics", m_doRunCosmics = 1);
  declareProperty("doRunBeam", m_doRunBeam = 1);
  declareProperty("doOfflineHists", m_doOfflineHists = 1);
  declareProperty("doOnlineHists", m_doOnlineHists = 1);

}

//----------------------------------------------------------------------------------
DQTCaloClusterTool::~DQTCaloClusterTool()
//----------------------------------------------------------------------------------
{
}

//----------------------------------------------------------------------------------
StatusCode DQTCaloClusterTool::bookHistograms( )
//StatusCode DQTCaloClusterTool::bookHistograms( bool isNewEventsBlock, bool isNewLumiBlock, bool isNewRun )
//----------------------------------------------------------------------------------
{
  bool failure(false);

  printedErrorL1Item = false;
  printedErrorEMCluster = false;
  printedErrorDQTCaloCluster = false;
  printedErrorHadCluster = false;
  printedErrorMetTopo = false;
  printedErrorMet = false;
  printedErrorROI = false;
  printedErrorTrackID = false;
  printedErrorTrackFound = false;


  MsgStream log(msgSvc(), name());

//  StatusCode sc;
//  sc = m_trigDec.retrieve();

//   if ( sc.isFailure() ){

//     log << MSG::ERROR << "Unable to retrieve TrigDecisionTool!" << endreq;
//     return sc;
//   }
 
  //if (newRun) {
    log << MSG::DEBUG << "in bookHistograms() and m_doRunCosmics = " << m_doRunCosmics << " and m_doRunBeam = " << m_doRunBeam << endreq;
    log << MSG::DEBUG << "Using base path " << m_path << endreq;
  
    failure = bookDQTCaloCluster();
  //}
  //else if (newEventsBlock || newLumiBlock) {
  //  return StatusCode::SUCCESS;
  //}
  if (failure) {return  StatusCode::FAILURE;}
  else {return StatusCode::SUCCESS;}
}	

		

//----------------------------------------------------------------------------------
bool DQTCaloClusterTool::bookDQTCaloCluster()
//----------------------------------------------------------------------------------
{
  bool failure(false);
  //  if (isNewEventsBlock || isNewLumiBlock || isNewRun) {
  MsgStream log(msgSvc(), name());


  StatusCode sc = m_trackToCalo.retrieve();
  if (sc.isFailure()) {
     log << MSG::ERROR << "Cannot get ExtrapolTrackToCaloTool" << endreq;
     return StatusCode::FAILURE;    
  }
 

  std::string  fullPathDQTCaloCluster=m_path+"/DQTCaloCluster";

  failure = failure | registerHist(fullPathDQTCaloCluster, m_eta_highestEtGM = TH2F_LW::create("m_eta_highestEtGM", "Eta highest EM cluster vs highest Had Cluster",
                                                                                     50,-6,6,50,-6,6)).isFailure();
  failure = failure | registerHist(fullPathDQTCaloCluster, m_phi_highestEtGM = TH2F_LW::create("m_phi_highestEtGM", "Phi highest EM cluster vs highest Had Cluster",
                                                                                     50,-3.5,3.5,50,-3.5,3.5)).isFailure();
  failure = failure | registerHist(fullPathDQTCaloCluster, m_eta_highestEtCombined_v_L1GM = TH2F_LW::create("m_eta_highestEtCombined_v_L1GM", 
                                                                                                   "Eta highest EM+Had cluster vs highest L1Calo Cluster",
                                                                                                   50,-6,6,50,-6,6)).isFailure();
  failure = failure | registerHist(fullPathDQTCaloCluster, m_phi_highestEtCombined_v_L1GM = TH2F_LW::create("m_phi_highestEtCombined_v_L1GM", 
                                                                                                   "Phi highest EM+Had cluster vs highest L1Calo Cluster",
                                                                                                   50,-3.5,3.5,50,-3.5,3.5)).isFailure();
  failure = failure | registerHist(fullPathDQTCaloCluster, m_et_highestEtCombined_v_L1GM = TH2F_LW::create("m_et_highestEtCombined_v_L1GM", 
                                                                                                   "Et highest EM+Had cluster vs highest L1Calo Cluster",
                                                                                                   50,0,5000000,50,0,5000000)).isFailure();
  failure = failure | registerHist(fullPathDQTCaloCluster, m_phi_metGM = TH2F_LW::create("m_phi_metGM", "Met phi EM vs Had",
                                                                               50,-3.5,3.5,50,-3.5,3.5)).isFailure();


  failure = failure | registerHist(fullPathDQTCaloCluster, m_phi_trt_v_caloGM = TH2F_LW::create("m_phi_trt_v_caloGM", "Phi track MET vs phi combined calo MET",
                                                                                     50,-3.5,3.5,50,-3.5,3.5)).isFailure();

  failure = failure | registerHist(fullPathDQTCaloCluster, m_phi_trt_v_emGM = TH2F_LW::create("m_phi_trt_v_emGM", "Phi track MET vs phi EM MET",
                                                                                     50,-3.5,3.5,50,-3.5,3.5)).isFailure();

  failure = failure | registerHist(fullPathDQTCaloCluster, m_phi_trt_v_hadGM = TH2F_LW::create("m_phi_trt_v_hadGM", "Phi track MET vs phi combined had MET",
                                                                                     50,-3.5,3.5,50,-3.5,3.5)).isFailure();


  failure = failure | registerHist(fullPathDQTCaloCluster, m_deta_highestEtGM = TH1F_LW::create("m_deta_highestEtGM", "Eta highest EM cluster - highest Had Cluster",
                                                                                     50,-6,6)).isFailure();
  failure = failure | registerHist(fullPathDQTCaloCluster, m_dphi_highestEtGM = TH1F_LW::create("m_dphi_highestEtGM", "Phi highest EM cluster - highest Had Cluster",
                                                                                      50,-3.5,3.5)).isFailure();
  failure = failure | registerHist(fullPathDQTCaloCluster, m_deta_highestEtCombined_v_L1GM = TH1F_LW::create("m_deta_highestEtCombined_v_L1GM", 
                                                                                                   "Eta highest EM+Had cluster - highest L1Calo Cluster",
                                                                                                   50,-6,6)).isFailure();
  failure = failure | registerHist(fullPathDQTCaloCluster, m_dphi_highestEtCombined_v_L1GM = TH1F_LW::create("m_dphi_highestEtCombined_v_L1GM", 
                                                                                                   "Phi highest EM+Had cluster - highest L1Calo Cluster",
                                                                                                   50,-3.5,3.5)).isFailure();
  failure = failure | registerHist(fullPathDQTCaloCluster, m_det_highestEtCombined_v_L1GM = TH1F_LW::create("m_det_highestEtCombined_v_L1GM", 
                                                                                                  "Et highest EM+Had cluster - highest L1Calo Cluster",
                                                                                                  100,-5000000,5000000)).isFailure();
  failure = failure | registerHist(fullPathDQTCaloCluster, m_dphi_metGM = TH1F_LW::create("m_dphi_metGM", "Met phi EM - Had",
                                                                                50,-3.5,3.5)).isFailure();
  
  
  failure = failure | registerHist(fullPathDQTCaloCluster, m_dphi_trt_v_caloGM = TH1F_LW::create("m_dphi_trt_v_caloGM", "Phi track MET - phi combined calo MET",
                                                                                       50,-3.5,3.5)).isFailure();
  
  failure = failure | registerHist(fullPathDQTCaloCluster, m_dphi_trt_v_emGM = TH1F_LW::create("m_dphi_trt_v_emGM", "Phi track MET - phi EM MET",
                                                                                     50,-3.5,3.5)).isFailure();
  
  failure = failure | registerHist(fullPathDQTCaloCluster, m_dphi_trt_v_hadGM = TH1F_LW::create("m_dphi_trt_v_hadGM", "Phi track MET - phi combined had MET",
                                                                                      50,-3.5,3.5)).isFailure();


  if (m_doRunBeam) {
     failure = failure | registerHist(fullPathDQTCaloCluster, m_eOverpGM = TH1F_LW::create("m_eOverpGM", "E (calo)/P(TRT) for highest Pt isolated track",
                                                                              100,0,5)).isFailure();

     failure = failure | registerHist(fullPathDQTCaloCluster, m_dRTrackDQTCaloClusterGM = TH1F_LW::create("m_dRTrackDQTCaloClusterGM", "dR calo cluster and TRT track",
                                                                                             50,0,m_dRTrackCalo)).isFailure();
  }


  if (failure) 
    {
      log << MSG::ERROR << "Error Booking histograms " << endreq;
    }
  return failure;

}


//----------------------------------------------------------------------------------
StatusCode DQTCaloClusterTool::fillHistograms()
//----------------------------------------------------------------------------------
{
  MsgStream log(msgSvc(), name());

  StatusCode sc;
  sc.setChecked();

  Double_t emPhi = 0, hadPhi = 0, calPhi = 0, l1Phi = 0;
  Double_t emEta = 0, hadEta = 0, calEta = 0, l1Eta = 0;
  Double_t emEt = -999, hadEt = -999, calEt = -999, l1Et = -999;
  

//   const std::vector<const LVL1CTP::Lvl1Item*> allItems = m_trigDec->getL1Items();
//   if (!allItems.empty()) {
//      int L1_bin_Nr = 0;
//      for (std::vector<const LVL1CTP::Lvl1Item*>::const_iterator aItem = allItems.begin();
//           aItem !=allItems.end(); ++aItem){
//         if (!*aItem) continue;
//         if ((*aItem)->name()=="") continue;
//         if ((*aItem)->isPassed()) {
//            log << MSG::DEBUG << " L1 trig number " << L1_bin_Nr << " Passed!" << endreq;
//         }
//         else {
// //           log << MSG::DEBUG << " L1 number " << L1_bin_Nr << " Did NOT Pass!" << endreq;
//         }
//         L1_bin_Nr++;
//      }    
//   } else {
//     if (!printedErrorL1Item) log << MSG::WARNING << "Could not retrive L1 item" << endreq;
//     printedErrorL1Item = true;
//   }



  const xAOD::CaloClusterContainer* cluster_container;

  if ( evtStore()->contains<xAOD::CaloClusterContainer>(m_EMClusterName) ) {
     
     if(evtStore()->retrieve(cluster_container,m_EMClusterName).isFailure()) {
        if (!printedErrorEMCluster) log << MSG::WARNING << " cannot retrieve " << m_EMClusterName << endreq;
        printedErrorEMCluster = true;
     }  
     else  {   
        xAOD::CaloClusterContainer::const_iterator clus_iter;
        log << MSG::DEBUG << " start loop over em clusters " << endreq;
        for(clus_iter=cluster_container->begin();
            clus_iter != cluster_container->end();clus_iter++) {        
           const xAOD::CaloCluster* clus = (*clus_iter);
           Double_t energy = clus->e();        
           if (energy > emEt) {
              emEt = energy;
              emPhi = clus->phi();
              emEta = clus->eta();
           }
        }
     }
  }
  else {
     if (!printedErrorEMCluster) log << MSG::WARNING << " cannot retrieve " << m_EMClusterName << endreq;
     printedErrorEMCluster = true;

  }

  if ( evtStore()->contains<xAOD::CaloClusterContainer>(m_DQTCaloClusterName) ) {
     
     if(evtStore()->retrieve(cluster_container,m_DQTCaloClusterName).isFailure()) {
        if (!printedErrorDQTCaloCluster) log << MSG::WARNING << " cannot retrieve " << m_DQTCaloClusterName << endreq;
        printedErrorDQTCaloCluster = true;
        
//     return StatusCode::SUCCESS;
     }  
     else  {   
        xAOD::CaloClusterContainer::const_iterator clus_iter;
        log << MSG::DEBUG << " start loop over calo clusters " << endreq;
        for(clus_iter=cluster_container->begin();
            clus_iter != cluster_container->end();clus_iter++) {        
           const xAOD::CaloCluster* clus = (*clus_iter);
           Double_t energy = clus->e();
           if (energy > calEt) {
              calEt = energy;
              calPhi = clus->phi();
              calEta = clus->eta();
           }
        }
     }
  }
  else {
     if (!printedErrorDQTCaloCluster) log << MSG::WARNING << " cannot retrieve " << m_DQTCaloClusterName << endreq;
     printedErrorDQTCaloCluster = true;
  }




  if ( evtStore()->contains<xAOD::CaloClusterContainer>(m_HadClusterName) ) {
     if(evtStore()->retrieve(cluster_container,m_HadClusterName).isFailure()) {
        if (!printedErrorHadCluster) log << MSG::WARNING << " cannot retrieve " << m_HadClusterName << endreq;
        printedErrorHadCluster = true;
//     return StatusCode::SUCCESS;
     }  
     else  {   
        xAOD::CaloClusterContainer::const_iterator clus_iter;
        log << MSG::DEBUG << " start loop over tile clusters " << endreq;
        for(clus_iter=cluster_container->begin();
            clus_iter != cluster_container->end();clus_iter++) {        
           const xAOD::CaloCluster* clus = (*clus_iter);
           Double_t energy = clus->e();
           if (energy > hadEt) {
              hadEt = energy;
              hadPhi = clus->phi();
              hadEta = clus->eta();
           }
        }
     }
  }
  else {
     if (!printedErrorHadCluster) log << MSG::WARNING << " cannot retrieve " << m_HadClusterName << endreq;
     printedErrorHadCluster = true;

  }
     
  if (hadEt > 0 && emEt > 0) {
     m_eta_highestEtGM->Fill(hadEta, emEta);
     m_deta_highestEtGM->Fill(hadEta-emEta);
     m_phi_highestEtGM->Fill(hadPhi, emPhi);
     Float_t dphi = hadPhi-emPhi;
     while (dphi > TMath::Pi()) dphi -= 2*TMath::Pi();
     while (dphi < -1*TMath::Pi()) dphi += 2*TMath::Pi();
     m_dphi_highestEtGM->Fill(dphi);
  }

  Double_t phiMetTile = 0, phiMetEM = 0, phiMETMet = 0;
  Double_t metTile = -999, metEM = -999, metMet = -999;

  const xAOD::MissingET *missET;
  //const MissingEtCalo *metCal;
  // Couldn't find the xAOD equivalent of MissingETCalo
  //if ( evtStore()->contains<xAOD::MissingEtCalo>(m_METTopoName) ) {
  //   if ( (evtStore()->retrieve(metCal,m_METTopoName)).isFailure() ) {
  //      if (!printedErrorMetTopo) 
  //         log << MSG::WARNING << "Cannot retrieve " << m_METTopoName << endreq;
  //      printedErrorMetTopo = true;
  ////     return StatusCode::SUCCESS;
  //   } else {
  //      Double_t ex    = metCal->exCalo(MissingEtCalo::TILE);
  //      Double_t ey    = metCal->eyCalo(MissingEtCalo::TILE);     
  //      phiMetTile = atan2(ey,ex);
  //      metTile = sqrt(ex*ex+ey*ey);
  //      ex = metCal->exCalo(MissingEtCalo::EME);
  //      ey = metCal->eyCalo(MissingEtCalo::EME);
  //      phiMetEM = atan2(ey,ex);
  //      metEM = sqrt(ex*ex+ey*ey);
  //   }
  //}
  //else {
  //   if (!printedErrorMetTopo) 
  //      log << MSG::WARNING << "Cannot retrieve " << m_METTopoName << endreq;
  //   printedErrorMetTopo = true;
  //}

  if ( evtStore()->contains<xAOD::MissingET>(m_METName) ) {
     if ( (evtStore()->retrieve(missET,m_METName)).isFailure() ) {
        if (!printedErrorMet)
           log << MSG::WARNING << "Cannot retrieve " << m_METName << endreq;
        printedErrorMet = true;
//     return StatusCode::SUCCESS;
     }
     else {
        phiMETMet = missET->phi();
        metMet = missET->met();
     }
  }
  else {
     if (!printedErrorMet)
        log << MSG::WARNING << "Cannot retrieve " << m_METName << endreq;
     printedErrorMet = true;
  }

  if (metTile > 0 && metEM > 0) {
     m_phi_metGM->Fill(phiMetTile, phiMetEM);
     Float_t dphi = phiMetTile-phiMetEM;
     while (dphi > TMath::Pi()) dphi -= 2*TMath::Pi();
     while (dphi < -1*TMath::Pi()) dphi += 2*TMath::Pi();
     m_dphi_metGM->Fill(dphi);
  }

  const LVL1_ROI * roi;
  
  if (evtStore()->contains<LVL1_ROI>("LVL1_ROI")) {
     sc = evtStore()->retrieve(roi,"LVL1_ROI"); 
     if (sc.isFailure()) {
        if (!printedErrorROI)
           log << MSG::WARNING << "No LVL1_ROI found"  << endreq;
        printedErrorROI = true;
//     return StatusCode::SUCCESS;
     } 
     else {     
        LVL1_ROI::jets_type::const_iterator itJET  = (roi->getJetROIs()).begin();
        LVL1_ROI::jets_type::const_iterator itJETe = (roi->getJetROIs()).end();
        for (; itJET != itJETe; ++itJET) {
           Double_t pt = itJET->getET8x8();
           if (pt > l1Et) {
              l1Et = pt;
              l1Phi = itJET->getPhi();
              l1Eta = itJET->getEta();
           }
        }
        
        LVL1_ROI::emtaus_type::const_iterator itEMTau = (roi->getEmTauROIs()).begin();
        LVL1_ROI::emtaus_type::const_iterator itEMTaue = (roi->getEmTauROIs()).end();
        for (; itEMTau != itEMTaue; ++itEMTau) {
           Double_t pt = itEMTau->getTauClus();
           if (pt > l1Et) {
              l1Et = pt;
              l1Phi = itEMTau->getPhi();
              l1Eta = itEMTau->getEta();
           }        
        }
     }
  }
  else {
     if (!printedErrorROI)
        log << MSG::WARNING << "No LVL1_ROI found"  << endreq;
     printedErrorROI = true;
     
  }

  if (l1Et > 0 && calEt > 0) {
     m_eta_highestEtCombined_v_L1GM->Fill(l1Eta, calEta);
     m_phi_highestEtCombined_v_L1GM->Fill(l1Phi, calPhi);
     m_et_highestEtCombined_v_L1GM->Fill(l1Et, calEt);
     m_deta_highestEtCombined_v_L1GM->Fill(l1Eta -calEta);

     Float_t dphi = l1Phi-calPhi;
     while (dphi > TMath::Pi()) dphi -= 2*TMath::Pi();
     while (dphi < -1*TMath::Pi()) dphi += 2*TMath::Pi();
     m_dphi_highestEtCombined_v_L1GM->Fill(dphi);
     m_det_highestEtCombined_v_L1GM->Fill(l1Et - calEt);


  }


   const TrackCollection *trt_tracks = 0;
   Double_t missingPx = 0.0, missingPy = 0.0;
   bool foundTRTTracks = false;
   Double_t ptBestTrack = 0.0, pBestTrack = 0.0;
   Double_t etaTrackAtCalo = -999, phiTrackAtCalo = -999;
   
   CaloCell_ID :: CaloSample p_sampling[8];
   p_sampling[0] = CaloCell_ID :: PreSamplerB;
   p_sampling[1] = CaloCell_ID :: EMB1;
   p_sampling[2] = CaloCell_ID :: EMB2;
   p_sampling[3] = CaloCell_ID :: EMB3;
   p_sampling[4] = CaloCell_ID :: PreSamplerE;
   p_sampling[5] = CaloCell_ID :: EME1;
   p_sampling[6] = CaloCell_ID :: EME2;
   p_sampling[7] = CaloCell_ID :: EME3;
 
   
   if ( evtStore()->contains<TrackCollection>(m_trackIDName)) {
      sc = evtStore()->retrieve(trt_tracks, m_trackIDName);
      if  ( sc.isFailure()) { 
         if (!printedErrorTrackID) 
            log << MSG::WARNING <<"Cannot retrieve" << m_trackIDName << " in evtStore " << endreq;
         printedErrorTrackID = true;
//         return StatusCode::SUCCESS;
      } else {        
         log << MSG::DEBUG <<"found TRT segments in evtStore " << endreq;

         UInt_t ipointer = 0;
         for(TrackCollection::const_iterator itrt = trt_tracks->begin(); itrt != trt_tracks->end(); ++itrt) {
            ipointer++;
            const Trk::Track *trt_track=(*itrt);      
            if (!trt_track) {
               log << MSG::DEBUG <<"not a track! " << endreq;
               continue;
            }
            //REL19 
            const Trk::Perigee *perigee = ((**itrt).perigeeParameters());
            //REL18 const Trk::MeasuredPerigee *perigee = dynamic_cast<const Trk::MeasuredPerigee *>((**itrt).perigeeParameters());
            if (!perigee) {
               log << MSG::DEBUG <<"no perigee! " << endreq;
               continue;
            }

            foundTRTTracks = true;

            Double_t qOverp = perigee->parameters()[Trk::qOverP];
            Double_t p = fabs(1./qOverp);
            Double_t theta = perigee->parameters()[Trk::theta];
            Double_t eta = -1*TMath::Log(tan(theta/2.));
            Double_t phi = perigee->parameters()[Trk::phi0];
            Double_t pt = p*sin(theta);
            missingPx -= pt*cos(phi);
            missingPy -= pt*sin(phi);


            UInt_t ipointer2 = 0;
            Double_t p2tot = 0;
            for(TrackCollection::const_iterator itrt2 = trt_tracks->begin(); itrt2 != trt_tracks->end(); ++itrt2) {
               ipointer2++;

               if (ipointer2 == ipointer) continue;

               const Trk::Track *trt_track2=(*itrt2);      
               if (!trt_track2) continue;
               //REL19 
               const Trk::Perigee *perigee2 = ((**itrt2).perigeeParameters());
               //REL18 const Trk::MeasuredPerigee *perigee2 = dynamic_cast<const Trk::MeasuredPerigee *>((**itrt2).perigeeParameters());
               if (!perigee2) continue;
               
               Double_t qOverp2 = perigee2->parameters()[Trk::qOverP];
               Double_t p2 = fabs(1./qOverp2);
               Double_t theta2 = perigee2->parameters()[Trk::theta];
               Double_t eta2 = -1*TMath::Log(tan(theta2/2.));
               Double_t phi2 = perigee2->parameters()[Trk::phi0];
               
               Double_t dphi = phi-phi2;
               while (dphi > TMath::Pi()) dphi -= 2*TMath::Pi();
               while (dphi < -1*TMath::Pi()) dphi += 2*TMath::Pi();
               Double_t dr = sqrt(pow(eta-eta2,2) + pow(dphi,2));
               if (dr < m_TrackIsoCone) p2tot += p2;               
            }

            if (p2tot/p < m_TrackIsoCut) {
               if (pt > ptBestTrack) {
                  pBestTrack = p;
                  ptBestTrack = pt;

                  // Apparently this isn't exact, but is hopefully (?) good enough?
                  int isampling = 0;
                  if (eta > 1.5) isampling = 4;
                  //REL18 HepGeom::Point3D<double> p_ctb;
                  //REL18 HepGeom::Point3D<double> p_local;
                  //REL19 
                  Amg::Vector3D p_ctb; 
                  //REL19 
                  Amg::Vector3D p_local;  

                  // very crude treatement of crack region
                  // FIXME!!! (see egammaRec CaloClusterBuilderSE.cxx for better solution
                  //
                  //REL18 StatusCode p_sc = m_trackToCalo->TrackSeenByCalo( trt_track, p_sampling[isampling], 0, &p_ctb, &p_local ); 

                  //REL19 x4
                  const Trk::TrackParameters* params = m_trackToCalo->extrapolate( *trt_track, p_sampling[isampling],0.0);
                  StatusCode p_sc = params != NULL;
                  if (p_sc)
                    p_local = params->position();


                  if( p_sc == StatusCode :: SUCCESS ) {
                     etaTrackAtCalo = p_local.eta();
                     phiTrackAtCalo = p_local.phi();
                     log << MSG::DEBUG <<"FOUND Match to cal! Eta = " << etaTrackAtCalo << " and Phi = " << phiTrackAtCalo << endreq;                                    
                  }
               }
            }
         }
         log << MSG::DEBUG <<"We found " << ipointer << " numer of tracks" << endreq;
      }     
   }                
   else {
      if (!printedErrorTrackFound)
         log << MSG::WARNING <<"Could not find " << m_trackIDName << endreq;              
      printedErrorTrackFound = true;
   }


   if (foundTRTTracks) {
      Double_t trtMetphi = atan2(missingPy,missingPx);
      if (metMet > 0) {
         m_phi_trt_v_caloGM->Fill(phiMETMet, trtMetphi);
         Double_t dphi = phiMETMet - trtMetphi;
         while (dphi > TMath::Pi()) dphi -= 2*TMath::Pi();
         while (dphi < -1*TMath::Pi()) dphi += 2*TMath::Pi();
         m_dphi_trt_v_caloGM->Fill(dphi);
      }
      if (metEM > 0) {
         m_phi_trt_v_emGM->Fill(phiMetEM, trtMetphi);
         m_dphi_trt_v_emGM->Fill(phiMetEM - trtMetphi);
      }
      if (metTile > 0) {
         m_phi_trt_v_hadGM->Fill(phiMetTile, trtMetphi);
         m_dphi_trt_v_hadGM->Fill(phiMetTile - trtMetphi);
      }
   }
   if (ptBestTrack > 0 && emEt > 0) {
      Double_t dphi = phiTrackAtCalo-emPhi;
      while (dphi > TMath::Pi()) dphi -= 2*TMath::Pi();
      while (dphi < -1*TMath::Pi()) dphi += 2*TMath::Pi();
      Double_t dR = sqrt(pow(etaTrackAtCalo-emEta,2) + pow(dphi,2));
      if (dR < m_dRTrackCalo) {
         if (m_doRunBeam) {
            m_dRTrackDQTCaloClusterGM->Fill(dR);
            m_eOverpGM->Fill(emEt/pBestTrack);
         }
      }
   }

   return StatusCode::SUCCESS;
}

//----------------------------------------------------------------------------------
StatusCode DQTCaloClusterTool::procHistograms( )
//StatusCode DQTCaloClusterTool::procHistograms( bool isEndOfEventsBlock, bool isEndOfLumiBlock, bool isEndOfRun )
//----------------------------------------------------------------------------------
{
  //if ( endOfEventsBlock || endOfLumiBlock || endOfRun ) {
  if (  endOfLumiBlock || endOfRun ) {
  MsgStream log(msgSvc(), name());

  log << MSG::DEBUG << "in finalHists()" << endreq;
  }
  return StatusCode::SUCCESS;
}

//----------------------------------------------------------------------------------
StatusCode DQTCaloClusterTool::checkHists(bool /* fromFinalize */)
//----------------------------------------------------------------------------------
{
  MsgStream log(msgSvc(), name());

  log << MSG::DEBUG << "in checkHists()" << endreq;

  return StatusCode::SUCCESS;
}

