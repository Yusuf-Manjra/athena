/*
  Copyright (C) 2002-2020 CERN for the benefit of the ATLAS collaboration
*/
############################################################
# AFP
# Nikola Dikic
# rel 21
############################################################

############################################################
 # Reference
reference AFPOfficialReference {
	 location = /afs/cern.ch/work/n/ndikic/public/reference/
	 file = data18_13TeV.00355754.physics_Main.merge.AOD.f950_m1999.AFP-3.root
	 path = run_355754
	 name = same_name
}
############################################################

############################################################
# Output
############################################################

output top_level {
	output AFP {
		output SiT {
			output BCID_Mask {
			}
			output Aux {
			}
			output pixelColRow2D {
				output nearAside {
				}
				output farAside {
				}
				output nearCside {
				}
				output farCside {
				}
			}
			output PixelColIDChip {
				output nearAside {
				}
				output farAside {
				}
				output nearCside {
				}
				output farCside {
				}
			}
			output PixelRowIDChip {
				output nearAside {
				}
				output farAside {
				}
				output nearCside {
				}
				output farCside {
				}
			}
			output SiTimeOverThreshold {
				output nearAside {
				}
				output farAside {
				}
				output nearCside {
				}
				output farCside {
				}
			}
			output HitsCounterPlanes {
			}
			output HitsPerPlanes {
			}
			output HitsPerPlanesVsLb {
			}
			output Cluster {
				output nearAside {
				}
				output farAside {
				}
				output nearCside {
				}
				output farCside {
				}
			}
			output ClustersPerPlanesPP {
			}
			output Track {
			}
			output TracksVsLb {
				output Front {
				}
				output Middle {
				}
				output End {
				}
			}
			output StationEvents {
			}
			output PP {
				output HitOccupancy {
					output PlaneOccupancy {
					}
					output Occupancy_vs_lb {
					}
				}
				output TrackFME {
					output Front {
					}
					output Middle {
					}
					output End {
					}
				}
				output ClustersFME {
				}
			}
		}
		output ToF {
			output HitBarvsTrain {
			}
			output HitsPerBarsInTrain {
				output farAside {
				}
				output farCside {
				}
			}
		}
	}
}

############################################################
# Histogram Assessments
############################################################

dir AFP {
	dir SiT {
		dir BCID_Mask {
			hist bcidAll {
				algorithm = HNE
				output = AFP/SiT/BCID_Mask
				display = Draw=HIST
			}
			hist bcidMiddle {
				algorithm = HNE
				output = AFP/SiT/BCID_Mask
				display = Draw=HIST
			}
			hist bcidFront {
				algorithm = HNE
				output = AFP/SiT/BCID_Mask
				display = Draw=HIST
			}
			hist bcidEnd {
				algorithm = HNE
				output = AFP/SiT/BCID_Mask
				display = Draw=HIST
			}
		}
		dir Aux {
			hist NumberOfEventsPerLumiblock {
				algorithm = HNE
				output = AFP/SiT/Aux
				display = Draw=HIST
			}
			hist numberOfEventsPerLumiblockFront {
				algorithm = HNE
				output = AFP/SiT/Aux
				display = Draw=HIST
			}
			hist numberOfEventsPerLumiblockMiddle {
				algorithm = HNE
				output = AFP/SiT/Aux
				display = Draw=HIST
			}
			hist numberOfEventsPerLumiblockEnd {
				algorithm = HNE
				output = AFP/SiT/Aux
				display = Draw=HIST
			}
			hist numberOfHitsPerStation {
				algorithm = HNE
				output = AFP/SiT/Aux
				display = Draw=HIST
			}
			hist NumberOfHitsPerLumiblock {
				algorithm = HNE
				output = AFP/SiT/Aux
				display = Draw=HIST
			}
			hist eventsPerStation {
				algorithm = HNE
				output = AFP/SiT/Aux
				display = Draw=HIST
			}
			hist clustersInPlanes {
				algorithm = HNE
				output = AFP/SiT/Aux
				display = Draw=HIST
			}
		}
		dir pixelColRow2D {
			dir nearAside {
				hist pixelColIDChip_vs_pixelRowIDChip_nearAside_P0 {
					algorithm = HNE
					output = AFP/SiT/pixelColRow2D/nearAside
					display = LogZ,Draw=COLZ
				}
				hist pixelColIDChip_vs_pixelRowIDChip_nearAside_P1 {
					algorithm = HNE
					output = AFP/SiT/pixelColRow2D/nearAside
					display = LogZ,Draw=COLZ
				}
				hist pixelColIDChip_vs_pixelRowIDChip_nearAside_P2 {
					algorithm = HNE
					output = AFP/SiT/pixelColRow2D/nearAside
					display = LogZ,Draw=COLZ
				}
				hist pixelColIDChip_vs_pixelRowIDChip_nearAside_P3 {
					algorithm = HNE
					output = AFP/SiT/pixelColRow2D/nearAside
					display = LogZ,Draw=COLZ
				}
			}
			dir nearCside {
				hist pixelColIDChip_vs_pixelRowIDChip_nearCside_P0 {
					algorithm = HNE
					output = AFP/SiT/pixelColRow2D/nearCside
					display = LogZ,Draw=COLZ
				}
				hist pixelColIDChip_vs_pixelRowIDChip_nearCside_P1 {
					algorithm = HNE
					output = AFP/SiT/pixelColRow2D/nearCside
					display = LogZ,Draw=COLZ
				}
				hist pixelColIDChip_vs_pixelRowIDChip_nearCside_P2 {
					algorithm = HNE
					output = AFP/SiT/pixelColRow2D/nearCside
					display = LogZ,Draw=COLZ
				}
				hist pixelColIDChip_vs_pixelRowIDChip_nearCside_P3 {
					algorithm = HNE
					output = AFP/SiT/pixelColRow2D/nearCside
					display = LogZ,Draw=COLZ
				}
			}
			dir farAside {
				hist pixelColIDChip_vs_pixelRowIDChip_farAside_P0 {
					algorithm = HNE
					output = AFP/SiT/pixelColRow2D/farAside
					display = LogZ,Draw=COLZ
				}
				hist pixelColIDChip_vs_pixelRowIDChip_farAside_P1 {
					algorithm = HNE
					output = AFP/SiT/pixelColRow2D/farAside
					display = LogZ,Draw=COLZ
				}
				hist pixelColIDChip_vs_pixelRowIDChip_farAside_P2 {
					algorithm = HNE
					output = AFP/SiT/pixelColRow2D/farAside
					display = LogZ,Draw=COLZ
				}
				hist pixelColIDChip_vs_pixelRowIDChip_farAside_P3 {
					algorithm = HNE
					output = AFP/SiT/pixelColRow2D/farAside
					display = LogZ,Draw=COLZ
				}
			}
			dir farCside {
				hist pixelColIDChip_vs_pixelRowIDChip_farCside_P0 {
					algorithm = HNE
					output = AFP/SiT/pixelColRow2D/farCside
					display = LogZ,Draw=COLZ
				}
				hist pixelColIDChip_vs_pixelRowIDChip_farCside_P1 {
					algorithm = HNE
					output = AFP/SiT/pixelColRow2D/farCside
					display = LogZ,Draw=COLZ
				}
				hist pixelColIDChip_vs_pixelRowIDChip_farCside_P2 {
					algorithm = HNE
					output = AFP/SiT/pixelColRow2D/farCside
					display = LogZ,Draw=COLZ
				}
				hist pixelColIDChip_vs_pixelRowIDChip_farCside_P3 {
					algorithm = HNE
					output = AFP/SiT/pixelColRow2D/farCside
					display = LogZ,Draw=COLZ
				}
			}
		}
		dir PixelColIDChip {
			dir nearAside {
				hist pixelColIDChip_nearAside_P0 {
					algorithm = AFPBinContentComp
					output = AFP/SiT/PixelColIDChip/nearAside
					display = Draw=HIST
				}
				hist pixelColIDChip_nearAside_P1 {
					algorithm = AFPBinContentComp
					output = AFP/SiT/PixelColIDChip/nearAside
					display = Draw=HIST
				}
				hist pixelColIDChip_nearAside_P2 {
					algorithm = AFPBinContentComp
					output = AFP/SiT/PixelColIDChip/nearAside
					display = Draw=HIST
				}
				hist pixelColIDChip_nearAside_P3 {
					algorithm = AFPBinContentComp
					output = AFP/SiT/PixelColIDChip/nearAside
					display = Draw=HIST
				}
			}
			dir farAside {
				hist pixelColIDChip_farAside_P0 {
					algorithm = AFPBinContentComp
					output = AFP/SiT/PixelColIDChip/farAside
					display = Draw=HIST
				}
				hist pixelColIDChip_farAside_P1 {
					algorithm = AFPBinContentComp
					output = AFP/SiT/PixelColIDChip/farAside
					display = Draw=HIST
				}
				hist pixelColIDChip_farAside_P2 {
					algorithm = AFPBinContentComp
					output = AFP/SiT/PixelColIDChip/farAside
					display = Draw=HIST
				}
				hist pixelColIDChip_farAside_P3 {
					algorithm = AFPBinContentComp
					output = AFP/SiT/PixelColIDChip/farAside
					display = Draw=HIST
				}
			}
			dir nearCside {
				hist pixelColIDChip_nearCside_P0 {
					algorithm = AFPBinContentComp
					output = AFP/SiT/PixelColIDChip/nearCside
					display = Draw=HIST
				}
				hist pixelColIDChip_nearCside_P1 {
					algorithm = AFPBinContentComp
					output = AFP/SiT/PixelColIDChip/nearCside
					display = Draw=HIST
				}
				hist pixelColIDChip_nearCside_P2 {
					algorithm = AFPBinContentComp
					output = AFP/SiT/PixelColIDChip/nearCside
					display = Draw=HIST
				}
				hist pixelColIDChip_nearCside_P3 {
					algorithm = AFPBinContentComp
					output = AFP/SiT/PixelColIDChip/nearCside
					display = Draw=HIST
				}
			}
			dir farCside {
				hist pixelColIDChip_farCside_P0 {
					algorithm = AFPBinContentComp
					output = AFP/SiT/PixelColIDChip/farCside
					display = Draw=HIST
				}
				hist pixelColIDChip_farCside_P1 {
					algorithm = AFPBinContentComp
					output = AFP/SiT/PixelColIDChip/farCside
					display = Draw=HIST
				}
				hist pixelColIDChip_farCside_P2 {
					algorithm = AFPBinContentComp
					output = AFP/SiT/PixelColIDChip/farCside
					display = Draw=HIST
				}
				hist pixelColIDChip_farCside_P3 {
					algorithm = AFPBinContentComp
					output = AFP/SiT/PixelColIDChip/farCside
					display = Draw=HIST
				}
			}
		}
		dir PixelRowIDChip {
			dir nearAside {
				hist pixelRowIDChip_nearAside_P0 {
					algorithm = AFPBinContentComp
					output = AFP/SiT/PixelRowIDChip/nearAside
					display = Draw=HIST
				}
				hist pixelRowIDChip_nearAside_P1 {
					algorithm = AFPBinContentComp
					output = AFP/SiT/PixelRowIDChip/nearAside
					display = Draw=HIST
				}
				hist pixelRowIDChip_nearAside_P2 {
					algorithm = AFPBinContentComp
					output = AFP/SiT/PixelRowIDChip/nearAside
					display = Draw=HIST
				}
				hist pixelRowIDChip_nearAside_P3 {
					algorithm = AFPBinContentComp
					output = AFP/SiT/PixelRowIDChip/nearAside
					display = Draw=HIST
				}
			}
			dir farAside {
				hist pixelRowIDChip_farAside_P0 {
					algorithm = AFPBinContentComp
					output = AFP/SiT/PixelRowIDChip/farAside
					display = Draw=HIST
				}
				hist pixelRowIDChip_farAside_P1 {
					algorithm = AFPBinContentComp
					output = AFP/SiT/PixelRowIDChip/farAside
					display = Draw=HIST
				}
				hist pixelRowIDChip_farAside_P2 {
					algorithm = AFPBinContentComp
					output = AFP/SiT/PixelRowIDChip/farAside
					display = Draw=HIST
				}
				hist pixelRowIDChip_farAside_P3 {
					algorithm = AFPBinContentComp
					output = AFP/SiT/PixelRowIDChip/farAside
					display = Draw=HIST
				}
			}
			dir nearCside {
				hist pixelRowIDChip_nearCside_P0 {
					algorithm = AFPBinContentComp
					output = AFP/SiT/PixelRowIDChip/nearCside
					display = Draw=HIST
				}
				hist pixelRowIDChip_nearCside_P1 {
					algorithm = AFPBinContentComp
					output = AFP/SiT/PixelRowIDChip/nearCside
					display = Draw=HIST
				}
				hist pixelRowIDChip_nearCside_P2 {
					algorithm = AFPBinContentComp
					output = AFP/SiT/PixelRowIDChip/nearCside
					display = Draw=HIST
				}
				hist pixelRowIDChip_nearCside_P3 {
					algorithm = AFPBinContentComp
					output = AFP/SiT/PixelRowIDChip/nearCside
					display = Draw=HIST
				}
			}
			dir farCside {
				hist pixelRowIDChip_farCside_P0 {
					algorithm = AFPBinContentComp
					output = AFP/SiT/PixelRowIDChip/farCside
					display = Draw=HIST
				}
				hist pixelRowIDChip_farCside_P1 {
					algorithm = AFPBinContentComp
					output = AFP/SiT/PixelRowIDChip/farCside
					display = Draw=HIST
				}
				hist pixelRowIDChip_farCside_P2 {
					algorithm = AFPBinContentComp
					output = AFP/SiT/PixelRowIDChip/farCside
					display = Draw=HIST
				}
				hist pixelRowIDChip_farCside_P3 {
					algorithm = AFPBinContentComp
					output = AFP/SiT/PixelRowIDChip/farCside
					display = Draw=HIST
				}
			}
		}
		dir SiTimeOverThreshold {
			dir nearAside {
				hist timeOverThreshold_nearAside_P0 {
					algorithm = AFPBinContentComp
					output = AFP/SiT/SiTimeOverThreshold/nearAside
					display = Draw=HIST
					}
				hist timeOverThreshold_nearAside_P1 {
					algorithm = AFPBinContentComp
					output = AFP/SiT/SiTimeOverThreshold/nearAside
					display = Draw=HIST
				}
				hist timeOverThreshold_nearAside_P2 {
					algorithm = AFPBinContentComp
					output = AFP/SiT/SiTimeOverThreshold/nearAside
					display = Draw=HIST
				}
				hist timeOverThreshold_nearAside_P3 {
					algorithm = AFPBinContentComp
					output = AFP/SiT/SiTimeOverThreshold/nearAside
					display = Draw=HIST
				}
			}
			dir farAside {
				hist timeOverThreshold_farAside_P0 {
					algorithm = AFPBinContentComp
					output = AFP/SiT/SiTimeOverThreshold/farAside
					display = Draw=HIST
				}
				hist timeOverThreshold_farAside_P1 {
					algorithm = AFPBinContentComp
					output = AFP/SiT/SiTimeOverThreshold/farAside
					display = Draw=HIST
				}
				hist timeOverThreshold_farAside_P2 {
					algorithm = AFPBinContentComp
					output = AFP/SiT/SiTimeOverThreshold/farAside
					display = Draw=HIST
				}
				hist timeOverThreshold_farAside_P3 {
					algorithm = AFPBinContentComp
					output = AFP/SiT/SiTimeOverThreshold/farAside
					display = Draw=HIST
				}
			}
			dir nearCside {
				hist timeOverThreshold_nearCside_P0 {
					algorithm = AFPBinContentComp
					output = AFP/SiT/SiTimeOverThreshold/nearCside
					display = Draw=HIST
				}
				hist timeOverThreshold_nearCside_P1 {
					algorithm = AFPBinContentComp
					output = AFP/SiT/SiTimeOverThreshold/nearCside
					display = Draw=HIST
				}
				hist timeOverThreshold_nearCside_P2 {
					algorithm = AFPBinContentComp
					output = AFP/SiT/SiTimeOverThreshold/nearCside
					display = Draw=HIST
				}
				hist timeOverThreshold_nearCside_P3 {
					algorithm = AFPBinContentComp
					output = AFP/SiT/SiTimeOverThreshold/nearCside
					display = Draw=HIST
				}
			}
			dir farCside {
				hist timeOverThreshold_farCside_P0 {
					algorithm = AFPBinContentComp
					output = AFP/SiT/SiTimeOverThreshold/farCside
					display = Draw=HIST
				}
				hist timeOverThreshold_farCside_P1 {
					algorithm = AFPBinContentComp
					output = AFP/SiT/SiTimeOverThreshold/farCside
					display = Draw=HIST
				}
				hist timeOverThreshold_farCside_P2 {
					algorithm = AFPBinContentComp
					output = AFP/SiT/SiTimeOverThreshold/farCside
					display = Draw=HIST
				}
				hist timeOverThreshold_farCside_P3 {
					algorithm = AFPBinContentComp
					output = AFP/SiT/SiTimeOverThreshold/farCside
					display = Draw=HIST
				}
			}
		}
		dir HitsCounterPlanes {
			hist hitsCounterPlanesTProfile_vs_lb_nearAside_P0 {
				algorithm = HNE
				output = AFP/SiT/HitsCounterPlanes
				display = Draw=HIST
			}
			hist hitsCounterPlanesTProfile_vs_lb_nearAside_P1 {
				algorithm = HNE
				output = AFP/SiT/HitsCounterPlanes
				display = Draw=HIST
			}
			hist hitsCounterPlanesTProfile_vs_lb_nearAside_P2 {
				algorithm = HNE
				output = AFP/SiT/HitsCounterPlanes
				display = Draw=HIST
			}
			hist hitsCounterPlanesTProfile_vs_lb_nearAside_P3 {
				algorithm = HNE
				output = AFP/SiT/HitsCounterPlanes
				display = Draw=HIST
			}
			hist hitsCounterPlanesTProfile_vs_lb_farAside_P0 {
				algorithm = HNE
				output = AFP/SiT/HitsCounterPlanes
				display = Draw=HIST
			}
			hist hitsCounterPlanesTProfile_vs_lb_farAside_P1 {
				algorithm = HNE
				output = AFP/SiT/HitsCounterPlanes
				display = Draw=HIST
			}
			hist hitsCounterPlanesTProfile_vs_lb_farAside_P2 {
				algorithm = HNE
				output = AFP/SiT/HitsCounterPlanes
				display = Draw=HIST
			}
			hist hitsCounterPlanesTProfile_vs_lb_farAside_P3 {
				algorithm = HNE
				output = AFP/SiT/HitsCounterPlanes
				display = Draw=HIST
			}
			hist hitsCounterPlanesTProfile_vs_lb_farCside_P0 {
				algorithm = HNE
				output = AFP/SiT/HitsCounterPlanes
				display = Draw=HIST
			}
			hist hitsCounterPlanesTProfile_vs_lb_farCside_P1 {
				algorithm = HNE
				output = AFP/SiT/HitsCounterPlanes
				display = Draw=HIST
			}
			hist hitsCounterPlanesTProfile_vs_lb_farCside_P2 {
				algorithm = HNE
				output = AFP/SiT/HitsCounterPlanes
				display = Draw=HIST
			}
			hist hitsCounterPlanesTProfile_vs_lb_farCside_P3 {
				algorithm = HNE
				output = AFP/SiT/HitsCounterPlanes
				display = Draw=HIST
			}
			hist hitsCounterPlanesTProfile_vs_lb_nearCside_P0 {
				algorithm = HNE
				output = AFP/SiT/HitsCounterPlanes
				display = Draw=HIST
			}
			hist hitsCounterPlanesTProfile_vs_lb_nearCside_P1 {
				algorithm = HNE
				output = AFP/SiT/HitsCounterPlanes
				display = Draw=HIST
			}
			hist hitsCounterPlanesTProfile_vs_lb_nearCside_P2 {
				algorithm = HNE
				output = AFP/SiT/HitsCounterPlanes
				display = Draw=HIST
			}
			hist hitsCounterPlanesTProfile_vs_lb_nearCside_P3 {
				algorithm = HNE
				output = AFP/SiT/HitsCounterPlanes
				display = Draw=HIST
			}
		}
		dir HitsPerPlanes {
			hist planeHitsAll {
				algorithm = HNE
				output = AFP/SiT/HitsPerPlanes
				display = Draw=HIST
			}
			hist planeHitsAllMU {
				algorithm = HNE
				output = AFP/SiT/HitsPerPlanes
				display = Draw=HIST
			}
			hist planeHits_nearAside {
				algorithm = AFPBinContentComp
				output = AFP/SiT/HitsPerPlanes
				display = Draw=HIST
			}
			hist planeHits_nearCside {
				algorithm = AFPBinContentComp
				output = AFP/SiT/HitsPerPlanes
				display = Draw=HIST
			}
			hist planeHits_farAside {
				algorithm = AFPBinContentComp
				output = AFP/SiT/HitsPerPlanes
				display = Draw=HIST
			}
			hist planeHits_farCside {
				algorithm = AFPBinContentComp
				output = AFP/SiT/HitsPerPlanes
				display = Draw=HIST
			}
		}
		dir HitsPerPlanesVsLb {
			hist lbHitsPerPlanes_farAside_P0 {
				algorithm = HNE
			        output = AFP/SiT/HitsPerPlanesVsLb
				display = Draw=COLZ
			}
			hist lbHitsPerPlanes_farAside_P1 {
				algorithm = HNE
				output = AFP/SiT/HitsPerPlanesVsLb
				display = Draw=COLZ
			}
			hist lbHitsPerPlanes_farAside_P2 {
				algorithm = HNE
				output = AFP/SiT/HitsPerPlanesVsLb
				display = Draw=COLZ
			}
			hist lbHitsPerPlanes_farAside_P3 {
				algorithm = HNE
				output = AFP/SiT/HitsPerPlanesVsLb
				display = Draw=COLZ
			}
			hist lbHitsPerPlanes_nearAside_P0 {
				algorithm = HNE
				output = AFP/SiT/HitsPerPlanesVsLb
				display = Draw=COLZ
			}
			hist lbHitsPerPlanes_nearAside_P1 {
				algorithm = HNE
				output = AFP/SiT/HitsPerPlanesVsLb
				display = Draw=COLZ
			}
			hist lbHitsPerPlanes_nearAside_P2 {
				algorithm = HNE
				output = AFP/SiT/HitsPerPlanesVsLb
				display = Draw=COLZ
			}
			hist lbHitsPerPlanes_nearAside_P3 {
				algorithm = HNE
				output = AFP/SiT/HitsPerPlanesVsLb
				display = Draw=COLZ
			}
			hist lbHitsPerPlanes_farCside_P0 {
				algorithm = HNE
				output = AFP/SiT/HitsPerPlanesVsLb
				display = Draw=COLZ
			}
			hist lbHitsPerPlanes_farCside_P1 {
				algorithm = HNE
				output = AFP/SiT/HitsPerPlanesVsLb
				display = Draw=COLZ
			}
			hist lbHitsPerPlanes_farCside_P2 {
				algorithm = HNE
				output = AFP/SiT/HitsPerPlanesVsLb
				display = Draw=COLZ
			}
			hist lbHitsPerPlanes_farCside_P3 {
				algorithm = HNE
				output = AFP/SiT/HitsPerPlanesVsLb
				display = Draw=COLZ
			}
			hist lbHitsPerPlanes_nearCside_P0 {
				algorithm = HNE
				output = AFP/SiT/HitsPerPlanesVsLb
				display = Draw=COLZ
			}
			hist lbHitsPerPlanes_nearCside_P1 {
				algorithm = HNE
				output = AFP/SiT/HitsPerPlanesVsLb
				display = Draw=COLZ
			}
			hist lbHitsPerPlanes_nearCside_P2 {
				algorithm = HNE
				output = AFP/SiT/HitsPerPlanesVsLb
				display = Draw=COLZ
			}
			hist lbHitsPerPlanes_nearCside_P3 {
				algorithm = HNE
				output = AFP/SiT/HitsPerPlanesVsLb
				display = Draw=COLZ
			}
		}
		dir ClustersPerPlanesPP {
			hist lbClustersPerPlanes_farAside_P0 {
				algorithm = HNE
				output = AFP/SiT/ClustersPerPlanesPP
				display = Draw=COLZ
			}
			hist lbClustersPerPlanes_farAside_P1 {
				algorithm = HNE
				output = AFP/SiT/ClustersPerPlanesPP
				display = Draw=COLZ
			}
			hist lbClustersPerPlanes_farAside_P2 {
				algorithm = HNE
				output = AFP/SiT/ClustersPerPlanesPP
				display = Draw=COLZ
			}
			hist lbClustersPerPlanes_farAside_P3 {
				algorithm = HNE
				output = AFP/SiT/ClustersPerPlanesPP
				display = Draw=COLZ
			}
			hist lbClustersPerPlanes_nearAside_P0 {
				algorithm = HNE
				output = AFP/SiT/ClustersPerPlanesPP
				display = Draw=COLZ
			}
			hist lbClustersPerPlanes_nearAside_P1 {
				algorithm = HNE
				output = AFP/SiT/ClustersPerPlanesPP
				display = Draw=COLZ
			}
			hist lbClustersPerPlanes_nearAside_P2 {
				algorithm = HNE
				output = AFP/SiT/ClustersPerPlanesPP
				display = Draw=COLZ
			}
			hist lbClustersPerPlanes_nearAside_P3 {
				algorithm = HNE
				output = AFP/SiT/ClustersPerPlanesPP
				display = Draw=COLZ
			}
			hist lbClustersPerPlanes_farCside_P0 {
				algorithm = HNE
				output = AFP/SiT/ClustersPerPlanesPP
				display = Draw=COLZ
			}
			hist lbClustersPerPlanes_farCside_P1 {
				algorithm = HNE
				output = AFP/SiT/ClustersPerPlanesPP
				display = Draw=COLZ
			}
			hist lbClustersPerPlanes_farCside_P2 {
				algorithm = HNE
				output = AFP/SiT/ClustersPerPlanesPP
				display = Draw=COLZ
			}
			hist lbClustersPerPlanes_farCside_P3 {
				algorithm = HNE
				output = AFP/SiT/ClustersPerPlanesPP
				display = Draw=COLZ
			}
			hist lbClustersPerPlanes_nearCside_P0 {
				algorithm = HNE
				output = AFP/SiT/ClustersPerPlanesPP
				display = Draw=COLZ
			}
			hist lbClustersPerPlanes_nearCside_P1 {
				algorithm = HNE
				output = AFP/SiT/ClustersPerPlanesPP
				display = Draw=COLZ
			}
			hist lbClustersPerPlanes_nearCside_P2 {
				algorithm = HNE
				output = AFP/SiT/ClustersPerPlanesPP
				display = Draw=COLZ
			}
			hist lbClustersPerPlanes_nearCside_P3 {
				algorithm = HNE
				output = AFP/SiT/ClustersPerPlanesPP
				display = Draw=COLZ
			}
		}
		dir Cluster {
			dir nearAside {
				hist clusterX_vs_clusterY_nearAside_P0 {
					algorithm = HNE
					output = AFP/SiT/Cluster/nearAside
					display = LogZ,Draw=COLZ
				}
				hist clusterX_vs_clusterY_nearAside_P0 {
					algorithm = HNE
					output = AFP/SiT/Cluster/nearAside
					display = LogZ,Draw=COLZ
				}
				hist clusterX_vs_clusterY_nearAside_P2 {
					algorithm = HNE
					output = AFP/SiT/Cluster/nearAside
					display = LogZ,Draw=COLZ
				}
				hist clusterX_vs_clusterY_nearAside_P3 {
					algorithm = HNE
					output = AFP/SiT/Cluster/nearAside
					display = LogZ,Draw=COLZ
				}
			}
			dir farAside {
				hist clusterX_vs_clusterY_farAside_P0 {
					algorithm = HNE
					output = AFP/SiT/Cluster/farAside
					display = LogZ,Draw=COLZ
				}
				hist clusterX_vs_clusterY_farAside_P1 {
					algorithm = HNE
					output = AFP/SiT/Cluster/farAside
					display = LogZ,Draw=COLZ
				}
				hist clusterX_vs_clusterY_farAside_P2 {
					algorithm = HNE
					output = AFP/SiT/Cluster/farAside
					display = LogZ,Draw=COLZ
				}
				hist clusterX_vs_clusterY_farAside_P3 {
					algorithm = HNE
					output = AFP/SiT/Cluster/farAside
					display = LogZ,Draw=COLZ
				}
			}
			dir nearCside {
				hist clusterX_vs_clusterY_nearCside_P0 {
					algorithm = HNE
					output = AFP/SiT/Cluster/nearCside
					display = LogZ,Draw=COLZ
				}
				hist clusterX_vs_clusterY_nearCside_P1 {
					algorithm = HNE
					output = AFP/SiT/Cluster/nearCside
					display = LogZ,Draw=COLZ
				}
				hist clusterX_vs_clusterY_nearCside_P2 {
					algorithm = HNE
					output = AFP/SiT/Cluster/nearCside
					display = LogZ,Draw=COLZ
				}
				hist clusterX_vs_clusterY_nearCside_P3 {
					algorithm = HNE
					output = AFP/SiT/Cluster/nearCside
					display = LogZ,Draw=COLZ
				}
			}
			dir farCside {
				hist clusterX_vs_clusterY_farCside_P0 {
					algorithm = HNE
					output = AFP/SiT/Cluster/farCside
					display = LogZ,Draw=COLZ
				}
				hist clusterX_vs_clusterY_farCside_P1 {
					algorithm = HNE
					output = AFP/SiT/Cluster/farCside
					display = LogZ,Draw=COLZ
				}
				hist clusterX_vs_clusterY_farCside_P2 {
					algorithm = HNE
					output = AFP/SiT/Cluster/farCside
					display = LogZ,Draw=COLZ
				}
				hist clusterX_vs_clusterY_farCside_P3 {
					algorithm = HNE
					output = AFP/SiT/Cluster/farCside
					display = LogZ,Draw=COLZ
				}
			}
		}
		dir Track {
			hist trackX_vs_trackY_nearAside {
				algorithm = HNE
				output = AFP/SiT/Track
				display = LogZ,Draw=COLZ
			}
			hist trackX_vs_trackY_nearCside {
				algorithm = HNE
				output = AFP/SiT/Track
				display = LogZ,Draw=COLZ
			}
			hist trackX_vs_trackY_farAside {
				algorithm = HNE
				output = AFP/SiT/Track
				display = LogZ,Draw=COLZ
			}
			hist trackX_vs_trackY_farCside {
				algorithm = HNE
				output = AFP/SiT/Track
				display = LogZ,Draw=COLZ
			}
		}
		dir TracksVsLb {
			dir Front {
				hist lbTracksFront_farAside {
					algorithm = HNE
					output = AFP/SiT/TracksVsLb/Front
					display = Draw=HIST
				}
				hist lbTracksFront_nearAside {
					algorithm = HNE
					output = AFP/SiT/TracksVsLb/Front
					display = Draw=HIST
				}
				hist lbTracksFront_nearCside {
					algorithm = HNE
					output = AFP/SiT/TracksVsLb/Front
					display = Draw=HIST
				}
				hist lbTracksFront_farCside {
					algorithm = HNE
					output = AFP/SiT/TracksVsLb/Front
					display = Draw=HIST
				}
			}
			dir Middle {
				hist lbTracksMiddle_farAside {
					algorithm = HNE
					output = AFP/SiT/TracksVsLb/Middle
					display = Draw=HIST
				}
				hist lbTracksMiddle_nearAside {
					algorithm = HNE
					output = AFP/SiT/TracksVsLb/Middle
					display = Draw=HIST
				}
				hist lbTracksMiddle_nearCside {
					algorithm = HNE
					output = AFP/SiT/TracksVsLb/Middle
					display = Draw=HIST
				}
				hist lbTracksMiddle_farCside {
					algorithm = HNE
					output = AFP/SiT/TracksVsLb/Middle
					display = Draw=HIST
				}
			}
			dir End {
				hist lbTracksEnd_farAside {
					algorithm = HNE
					output = AFP/SiT/TracksVsLb/End
					display = Draw=HIST
				}
				hist lbTracksEnd_nearAside {
					algorithm = HNE
					output = AFP/SiT/TracksVsLb/End
					display = Draw=HIST
				}
				hist lbTracksEnd_nearCside {
					algorithm = HNE
					output = AFP/SiT/TracksVsLb/End
					display = Draw=HIST
				}
				hist lbTracksEnd_farCside {
					algorithm = HNE
					output = AFP/SiT/TracksVsLb/End
					display = Draw=HIST
				}
			}
			hist lbTracksAll_farAside {
				algorithm = HNE
				output = AFP/SiT/TracksVsLb
				display = Draw=HIST
			}
			hist lbTracksAll_nearAside {
				algorithm = HNE
				output = AFP/SiT/TracksVsLb
				display = Draw=HIST
			}
			hist lbTracksAll_nearCside {
				algorithm = HNE
				output = AFP/SiT/TracksVsLb
				display = Draw=HIST
			}
			hist lbTracksAll_farCside {
				algorithm = HNE
				output = AFP/SiT/TracksVsLb
				display = Draw=HIST
			}
		}
		dir StationEvents {
			hist lbEventsStationsAll {
				algorithm = HNE
				output = AFP/SiT/StationEvents
				display = Draw=HIST
			}
			hist lbEventsStations_farAside {
				algorithm = HNE
				output = AFP/SiT/StationEvents
				display = Draw=HIST
			}
			hist lbEventsStations_farCside {
				algorithm = HNE
				output = AFP/SiT/StationEvents
				display = Draw=HIST
			}
			hist lbEventsStations_nearAside {
				algorithm = HNE
				output = AFP/SiT/StationEvents
				display = Draw=HIST
			}
			hist lbEventsStations_nearCside {
				algorithm = HNE
				output = AFP/SiT/StationEvents
				display = Draw=HIST
			}
		}
		dir PP {
			dir HitOccupancy {
				dir PlaneOccupancy {
					hist OccupancyAllMU {
						algorithm = HNE
						output = AFP/SiT/PP/HitOccupancy/PlaneOccupancy
						display = Draw=HIST
					}
				}
				dir Occupancy_vs_lb {
					hist Occupancy_vs_lb_farAside_P0 {
						algorithm = AFPBinsOutOfRangeFarA0
						output = AFP/SiT/PP/HitOccupancy/Occupancy_vs_lb
						display = Draw=HIST
					}
					hist Occupancy_vs_lb_farAside_P1 {
						algorithm = AFPBinsOutOfRangeFarA1
						output = AFP/SiT/PP/HitOccupancy/Occupancy_vs_lb
						display = Draw=HIST
					}
					hist Occupancy_vs_lb_farAside_P2 {
						algorithm = AFPBinsOutOfRangeFarA2
						output = AFP/SiT/PP/HitOccupancy/Occupancy_vs_lb
						display = Draw=HIST
					}
					hist Occupancy_vs_lb_farAside_P3 {
						algorithm = AFPBinsOutOfRangeFarA3
						output = AFP/SiT/PP/HitOccupancy/Occupancy_vs_lb
						display = Draw=HIST
					}
					hist Occupancy_vs_lb_nearAside_P0 {
						algorithm = AFPBinsOutOfRangeNearA0
						output = AFP/SiT/PP/HitOccupancy/Occupancy_vs_lb
						display = Draw=HIST
					}
					hist Occupancy_vs_lb_nearAside_P1 {
						algorithm = AFPBinsOutOfRangeNearA1
						output = AFP/SiT/PP/HitOccupancy/Occupancy_vs_lb
						display = Draw=HIST
					}
					hist Occupancy_vs_lb_nearAside_P2 {
						algorithm = AFPBinsOutOfRangeNearA2
						output = AFP/SiT/PP/HitOccupancy/Occupancy_vs_lb
						display = Draw=HIST
					}
					hist Occupancy_vs_lb_nearAside_P3 {
						algorithm = AFPBinsOutOfRangeNearA3
						output = AFP/SiT/PP/HitOccupancy/Occupancy_vs_lb
						display = Draw=HIST
					}
					hist Occupancy_vs_lb_farCside_P0 {
						algorithm = AFPBinsOutOfRangeFarC0
						output = AFP/SiT/PP/HitOccupancy/Occupancy_vs_lb
						display = Draw=HIST
					}
					hist Occupancy_vs_lb_farCside_P1 {
						algorithm = AFPBinsOutOfRangeFarC1
						output = AFP/SiT/PP/HitOccupancy/Occupancy_vs_lb
						display = Draw=HIST
					}
					hist Occupancy_vs_lb_farCside_P2 {
						algorithm = AFPBinsOutOfRangeFarC2
						output = AFP/SiT/PP/HitOccupancy/Occupancy_vs_lb
						display = Draw=HIST
					}
					hist Occupancy_vs_lb_farCside_P3 {
						algorithm = AFPBinsOutOfRangeFarC3
						output = AFP/SiT/PP/HitOccupancy/Occupancy_vs_lb
						display = Draw=HIST
					}
					hist Occupancy_vs_lb_nearCside_P0 {
						algorithm = AFPBinsOutOfRangeNearC0
						output = AFP/SiT/PP/HitOccupancy/Occupancy_vs_lb
						display = Draw=HIST
					}
					hist Occupancy_vs_lb_nearCside_P1 {
						algorithm = AFPBinsOutOfRangeNearC1
						output = AFP/SiT/PP/HitOccupancy/Occupancy_vs_lb
						display = Draw=HIST
					}
					hist Occupancy_vs_lb_nearCside_P2 {
						algorithm = AFPBinsOutOfRangeNearC2
						output = AFP/SiT/PP/HitOccupancy/Occupancy_vs_lb
						display = Draw=HIST
					}
					hist Occupancy_vs_lb_nearCside_P3 {
						algorithm = AFPBinsOutOfRangeNearC3
						output = AFP/SiT/PP/HitOccupancy/Occupancy_vs_lb
						display = Draw=HIST
					}
				}
			}
			dir TrackFME {
				hist lbTracksAll_vs_lb_farAside {
					algorithm = HNE
					output = AFP/SiT/PP/TrackFME
					display = Draw=HIST
				}
				hist lbTracksAll_vs_lb_nearAside {
					algorithm = HNE
					output = AFP/SiT/PP/TrackFME
					display = Draw=HIST
				}
				hist lbTracksAll_vs_lb_farCside {
					algorithm = HNE
					output = AFP/SiT/PP/TrackFME
					display = Draw=HIST
				}
				hist lbTracksAll_vs_lb_nearCside {
					algorithm = HNE
					output = AFP/SiT/PP/TrackFME
					display = Draw=HIST
				}
				dir Front {
					hist lbTracksFront_vs_lb_nearCside {
						algorithm = HNE
						output = AFP/SiT/PP/TrackFME/Front
						display = Draw=HIST
					}
					hist lbTracksFront_vs_lb_nearAside {
						algorithm = HNE
						output = AFP/SiT/PP/TrackFME/Front
						display = Draw=HIST
					}
					hist lbTracksFront_vs_lb_farCside {
						algorithm = HNE
						output = AFP/SiT/PP/TrackFME/Front
						display = Draw=HIST
					}
					hist lbTracksFront_vs_lb_farAside {
						algorithm = HNE
						output = AFP/SiT/PP/TrackFME/Front
						display = Draw=HIST
					}
				}
				dir Middle {
					hist lbTracksMiddle_vs_lb_nearCside {
						algorithm = HNE
						output = AFP/SiT/PP/TrackFME/Middle
						display = Draw=HIST
					}
					hist lbTracksMiddle_vs_lb_nearAside {
						algorithm = HNE
						output = AFP/SiT/PP/TrackFME/Middle
						display = Draw=HIST
					}
					hist lbTracksMiddle_vs_lb_farCside {
						algorithm = HNE
						output = AFP/SiT/PP/TrackFME/Middle
						display = Draw=HIST
					}
					hist lbTracksMiddle_vs_lb_farAside {
						algorithm = HNE
						output = AFP/SiT/PP/TrackFME/Middle
						display = Draw=HIST
					}
				}
				dir End {
					hist lbTracksEnd_vs_lb_nearCside {
						algorithm = HNE
						output = AFP/SiT/PP/TrackFME/End
						display = Draw=HIST
					}
					hist lbTracksEnd_vs_lb_nearAside {
						algorithm = HNE
						output = AFP/SiT/PP/TrackFME/End
						display = Draw=HIST
					}
					hist lbTracksEnd_vs_lb_farCside {
						algorithm = HNE
						output = AFP/SiT/PP/TrackFME/End
						display = Draw=HIST
					}
					hist lbTracksEnd_vs_lb_farAside {
						algorithm = HNE
						output = AFP/SiT/PP/TrackFME/End
						display = Draw=HIST
					}
				}
			}
			dir ClustersFME {	
				hist nearAside_P0 {
					algorithm = HNE
					output = AFP/SiT/PP/ClustersFME
					display = Draw=HIST
				}
				hist nearAside_P1 {
					algorithm = HNE
					output = AFP/SiT/PP/ClustersFME
					display = Draw=HIST
				}
				hist nearAside_P2 {
					algorithm = HNE
					output = AFP/SiT/PP/ClustersFME
					display = Draw=HIST
				}
				hist nearAside_P3 {
					algorithm = HNE
					output = AFP/SiT/PP/ClustersFME
					display = Draw=HIST
				}
				hist nearCside_P0 {
					algorithm = HNE
					output = AFP/SiT/PP/ClustersFME
					display = Draw=HIST
				}
				hist nearCside_P1 {
					algorithm = HNE
					output = AFP/SiT/PP/ClustersFME
					display = Draw=HIST
				}
				hist nearCside_P2 {
					algorithm = HNE
					output = AFP/SiT/PP/ClustersFME
					display = Draw=HIST
				}
				hist nearCside_P3 {
					algorithm = HNE
					output = AFP/SiT/PP/ClustersFME
					display = Draw=HIST
				}
				hist farAside_P0 {
					algorithm = HNE
					output = AFP/SiT/PP/ClustersFME
					display = Draw=HIST
				}
				hist farAside_P1 {
					algorithm = HNE
					output = AFP/SiT/PP/ClustersFME
					display = Draw=HIST
				}
				hist farAside_P2 {
					algorithm = HNE
					output = AFP/SiT/PP/ClustersFME
					display = Draw=HIST
				}
				hist farAside_P3 {
					algorithm = HNE
					output = AFP/SiT/PP/ClustersFME
					display = Draw=HIST
				}
				hist farCside_P0 {
					algorithm = HNE
					output = AFP/SiT/PP/ClustersFME
					display = Draw=HIST
				}
				hist farCside_P1 {
					algorithm = HNE
					output = AFP/SiT/PP/ClustersFME
					display = Draw=HIST
				}
				hist farCside_P2 {
					algorithm = HNE
					output = AFP/SiT/PP/ClustersFME
					display = Draw=HIST
				}
				hist farCside_P3 {
					algorithm = HNE
					output = AFP/SiT/PP/ClustersFME
					display = Draw=HIST
				}
			}
		}
		hist nSiHits_vs_lb {
			algorithm = HNE
			output = AFP/SiT
			display = Draw=HIST
		}
		hist muPerBX_vs_lb {
			algorithm = HNE
			output = AFP/SiT
			display = Draw=HIST
		}
	}
	dir ToF {
		hist numberOfHit_S0 {
			algorithm = HNE
			output = AFP/ToF
			display = Draw=HIST
		}
		hist numberOfHit_S3 {
			algorithm = HNE
			output = AFP/ToF
			display = Draw=HIST
		}
		dir HitBarvsTrain {
			hist trainID_vs_barInTrainID_farAside {
				algorithm = HNE
				output = AFP/ToF/HitBarvsTrain
				display = Draw=COLZ
			}
			hist trainID_vs_barInTrainID_farCside {
				algorithm = HNE
				output = AFP/ToF/HitBarvsTrain
				display = Draw=COLZ
			}
		}
		dir HitsPerBarsInTrain {
			hist barInTrainAllA {
				algorithm = HNE
				output = AFP/ToF/HitsPerBarsInTrain
				display = Draw=COLZ
			}
			hist barInTrainAllC {
				algorithm = HNE
				output = AFP/ToF/HitsPerBarsInTrain
				display = Draw=COLZ
			}
			dir farAside {
				hist barInTrainIDA_train0 {
					algorithm = AFPBinContentComp
					output = AFP/ToF/HitsPerBarsInTrain/farAside
					display = Draw=COLZ
				}
				hist barInTrainIDA_train1 {
					algorithm = AFPBinContentComp
					output = AFP/ToF/HitsPerBarsInTrain/farAside
					display = Draw=COLZ
				}
				hist barInTrainIDA_train2 {
					algorithm = AFPBinContentComp
					output = AFP/ToF/HitsPerBarsInTrain/farAside
					display = Draw=COLZ
				}
				hist barInTrainIDA_train3 {
					algorithm = AFPBinContentComp
					output = AFP/ToF/HitsPerBarsInTrain/farAside
					display = Draw=COLZ
				}
			}
			dir farCside {
				hist barInTrainIDC_train0 {
					algorithm = AFPBinContentComp
					output = AFP/ToF/HitsPerBarsInTrain/farCside
					display = Draw=COLZ
				}
				hist barInTrainIDC_train1 {
					algorithm = AFPBinContentComp
					output = AFP/ToF/HitsPerBarsInTrain/farCside
					display = Draw=COLZ
				}
				hist barInTrainIDC_train2 {
					algorithm = AFPBinContentComp
					output = AFP/ToF/HitsPerBarsInTrain/farCside
					display = Draw=COLZ
				}
				hist barInTrainIDC_train3 {
					algorithm = AFPBinContentComp
					output = AFP/ToF/HitsPerBarsInTrain/farCside
					display = Draw=COLZ
				}
			}
		}
	}
}

############################################################
# Algorithms

algorithm HNE {
	libname = libdqm_algorithms.so
	name = Histogram_Not_Empty
}

algorithm AFPBinContentComp {
	libname = libdqm_algorithms.so
	name = BinContentComp
	thresholds = AFPTestThreshold
	NSigma = 3
	reference = AFPOfficialReference
	publish = 4
	NormRef = 1
}

algorithm AFPBinsOutOfRangeFarA0 {
	libname = libdqm_algorithms.so
	name = BinsOutOfRange
	RANGE_D = 0.07
	RANGE_U = 0.085
	ignoreval = 0
	reference = AFPOfficialReference
	thresholds = AFPBinsOutOfRangeThreshold
}

algorithm AFPBinsOutOfRangeFarA1 {
	libname = libdqm_algorithms.so
	name = BinsOutOfRange
	RANGE_D = 0.07
	RANGE_U = 0.085
	ignoreval = 0
	reference = AFPOfficialReference
	thresholds = AFPBinsOutOfRangeThreshold
}

algorithm AFPBinsOutOfRangeFarA2 {
	libname = libdqm_algorithms.so
	name = BinsOutOfRange
	RANGE_D = 0.1
	RANGE_U = 0.125
	ignoreval = 0
	reference = AFPOfficialReference
	thresholds = AFPBinsOutOfRangeThreshold
}

algorithm AFPBinsOutOfRangeFarA3 {
	libname = libdqm_algorithms.so
	name = BinsOutOfRange
	RANGE_D = 0.135
	RANGE_U = 0.16
	ignoreval = 0
	reference = AFPOfficialReference
	thresholds = AFPBinsOutOfRangeThreshold
}

algorithm AFPBinsOutOfRangeNearA0 {
	libname = libdqm_algorithms.so
	name = BinsOutOfRange
	RANGE_D = 0.042
	RANGE_U = 0.052
	ignoreval = 0
	reference = AFPOfficialReference
	thresholds = AFPBinsOutOfRangeThreshold
}

algorithm AFPBinsOutOfRangeNearA1 {
	libname = libdqm_algorithms.so
	name = BinsOutOfRange
	RANGE_D = 0.044
	RANGE_U = 0.054
	ignoreval = 0
	reference = AFPOfficialReference
	thresholds = AFPBinsOutOfRangeThreshold
}

algorithm AFPBinsOutOfRangeNearA2 {
	libname = libdqm_algorithms.so
	name = BinsOutOfRange
	RANGE_D = 0.06
	RANGE_U = 0.075
	ignoreval = 0
	reference = AFPOfficialReference
	thresholds = AFPBinsOutOfRangeThreshold
}

algorithm AFPBinsOutOfRangeNearA3 {
	libname = libdqm_algorithms.so
	name = BinsOutOfRange
	RANGE_D = 0.08
	RANGE_U = 0.095
	ignoreval = 0
	reference = AFPOfficialReference
	thresholds = AFPBinsOutOfRangeThreshold
}

algorithm AFPBinsOutOfRangeFarC0 {
	libname = libdqm_algorithms.so
	name = BinsOutOfRange
	RANGE_D = 0.065
	RANGE_U = 0.08
	ignoreval = 0
	reference = AFPOfficialReference
	thresholds = AFPBinsOutOfRangeThreshold
}

algorithm AFPBinsOutOfRangeFarC1 {
	libname = libdqm_algorithms.so
	name = BinsOutOfRange
	RANGE_D = 0.075
	RANGE_U = 0.095
	ignoreval = 0
	reference = AFPOfficialReference
	thresholds = AFPBinsOutOfRangeThreshold
}

algorithm AFPBinsOutOfRangeFarC2 {
	libname = libdqm_algorithms.so
	name = BinsOutOfRange
	RANGE_D = 0.08
	RANGE_U = 0.095
	ignoreval = 0
	reference = AFPOfficialReference
	thresholds = AFPBinsOutOfRangeThreshold
}

algorithm AFPBinsOutOfRangeFarC3 {
	libname = libdqm_algorithms.so
	name = BinsOutOfRange
	RANGE_D = 0.01
	RANGE_U = 0.012
	ignoreval = 0
	reference = AFPOfficialReference
	thresholds = AFPBinsOutOfRangeThreshold
}

algorithm AFPBinsOutOfRangeNearC0 {
	libname = libdqm_algorithms.so
	name = BinsOutOfRange
	RANGE_D = 0.044
	RANGE_U = 0.052
	ignoreval = 0
	reference = AFPOfficialReference
	thresholds = AFPBinsOutOfRangeThreshold
}

algorithm AFPBinsOutOfRangeNearC1 {
	libname = libdqm_algorithms.so
	name = BinsOutOfRange
	RANGE_D = 0.048
	RANGE_U = 0.056
	ignoreval = 0
	reference = AFPOfficialReference
	thresholds = AFPBinsOutOfRangeThreshold
}

algorithm AFPBinsOutOfRangeNearC2 {
	libname = libdqm_algorithms.so
	name = BinsOutOfRange
	RANGE_D = 0.05
	RANGE_U = 0.06
	ignoreval = 0
	reference = AFPOfficialReference
	thresholds = AFPBinsOutOfRangeThreshold
}

algorithm AFPBinsOutOfRangeNearC3 {
	libname = libdqm_algorithms.so
	name = BinsOutOfRange
	RANGE_D = 0.06
	RANGE_U = 0.07
	ignoreval = 0
	reference = AFPOfficialReference
	thresholds = AFPBinsOutOfRangeThreshold
}

############################################################


############################################################
# Thresholds
thresholds AFPTestThreshold {
	limits NBins {
		warning = 1
		error = 2
	}
}

thresholds AFPBinsOutOfRangeThreshold {
	limits NbadBins {
		warning = 1
		error = 2
	}
}
###########################################################
