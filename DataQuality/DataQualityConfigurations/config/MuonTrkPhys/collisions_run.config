# **********************************************************************
# $Id: collisions_run.config 330123 2010-11-02 15:02:57Z ponyisi $
# **********************************************************************

###########################################################
# MuonMidLvl
###########################################################

#reference CompToRef_Ref {
#  file = /afs/cern.ch/user/r/rrosten/data.100003.Muons.root
#  path = run_100003
#  file = /afs/cern.ch/user/r/rrosten/data.203876.Muons.root
#  path = run_203876
#  name = same_name
#}

#############
# Output
#############

output top_level {
  algorithm = WorstCaseSummary  
           
  output MuonTrkPhysMonitoring {

    output NoTrigger {
      
   
      output TrackingPerformance {
      
        output Z_Signal {
        
          output Experts {
            output Muons {
            }
          }
          output Shifters {
            output Mass {
            }
            output Efficiency {
            }
            output Counting {
            }
          }
            
        } #closing Z_Signal
        
      } #closing TrackingPerformance
      
    } 
  }
}
#######################
# Histogram Assessments
#######################

dir Muon {      
   dir MuonTrkPhysMonitoring {            
      dir NoTrigger {    
                                 
         dir TrackingPerformance {
            dir Z_Signal {
                                   
               dir Muons {
                  #output = MuonTrkPhysMonitoring/NoTrigger/TrackingPerformance/Z_Signal/Muons
                                                      
                  hist m_Z_Mass@Muons {
                     output = MuonTrkPhysMonitoring/NoTrigger/TrackingPerformance/Z_Signal/Shifters/Mass
                     description = Red line corresponds to the gaussian used by the flagging algorithm.
                     display   = Draw=E1,gaus(60,120)
                     algorithm = GausFit_Z
                  }         
          
                  hist m_N_Z_Lumi@Muons {
                     output = MuonTrkPhysMonitoring/NoTrigger/TrackingPerformance/Z_Signal/Shifters/Counting
                     display   = Draw=E1
                     algorithm = Symmetric
                  }
          
                  hist m_Z_occupancy@Muons {
                     output = MuonTrkPhysMonitoring/NoTrigger/TrackingPerformance/Z_Signal/Shifters/Counting
                     display   = Draw=E1
                     algorithm = Symmetric
                  }         
          
                  hist m_Z_Efficiency@Muons {
                     output = MuonTrkPhysMonitoring/NoTrigger/TrackingPerformance/Z_Signal/Shifters/Efficiency
                     display   = Draw=COLZ,SetGridx,SetGridy,SetGridStyle(2),<AxisRange(0.8,1,"Z")>
                     algorithm = BinsOutOfRange_Eff2
                  }
         
                  hist m_Z_Efficiency_eta@Muons {
                     output = MuonTrkPhysMonitoring/NoTrigger/TrackingPerformance/Z_Signal/Shifters/Efficiency
                     description = Uses BinsOutOfRange and BinContentComp together, however BinContentComp is used in such a way that it behaves as a second BinsOutOfRange algorithm. This allows two lower limits to be set to check both the low eta and other eta bins.
                     display   = Draw=E1,<AxisRange(0.85,1.01,"Y")>
                     algorithm = TripleBinsOutOfRange
                  }
          
                  hist m_M_Z_Mean@Muons {
                     output = MuonTrkPhysMonitoring/NoTrigger/TrackingPerformance/Z_Signal/Shifters/Mass
                     description = Require at least 100 events in a region to perform the fit. A value of 0 indicates low statistics for the corresponding region. See m_N_Z_Lumi for event counts.
                     display   = Draw=E1,<AxisRange(89,93,"Y")>
                     algorithm = BinsOutOfRange_Zmass
                  }         
          
                  hist m_M_Z_Sigma@Muons {
                     output = MuonTrkPhysMonitoring/NoTrigger/TrackingPerformance/Z_Signal/Shifters/Mass
                     description = Require at least 100 events in a region to perform the fit. A value of 0 indicates low statistics for the corresponding region. See m_N_Z_Lumi for event counts.
                     display   = Draw=E1,<AxisRange(0,5,"Y")>
                     algorithm = BinsOutOfRange_Zsigma
                  }    

                  ### Z_Signal Muons Experts starts here ###

                  hist m_Z_EffDenominator {
                     output = MuonTrkPhysMonitoring/NoTrigger/TrackingPerformance/Z_Signal/Experts/Muons
                     display   = Draw=COLZ
                     algorithm = Histogram_Not_Empty
                  }

                  hist m_Z_EffNumerator {
                     output = MuonTrkPhysMonitoring/NoTrigger/TrackingPerformance/Z_Signal/Experts/Muons
                     display   = Draw=COLZ
                     algorithm = Histogram_Not_Empty
                  }

                  hist m_Z_EffDenominator_eta {
                     output = MuonTrkPhysMonitoring/NoTrigger/TrackingPerformance/Z_Signal/Experts/Muons
                     display   = Draw=E1
                     algorithm = Histogram_Not_Empty
                  }

                  hist m_Z_EffNumerator_eta {
                     output = MuonTrkPhysMonitoring/NoTrigger/TrackingPerformance/Z_Signal/Experts/Muons
                     display   = Draw=E1
                     algorithm = Histogram_Not_Empty
                  }

                  hist m_M_Z_EC_EC {
                     output = MuonTrkPhysMonitoring/NoTrigger/TrackingPerformance/Z_Signal/Experts/Muons
                     display   = Draw=E1
                     algorithm = Histogram_Not_Empty
                  }

                  hist m_M_Z_EC_BC {
                     output = MuonTrkPhysMonitoring/NoTrigger/TrackingPerformance/Z_Signal/Experts/Muons
                     display   = Draw=E1
                     algorithm = Histogram_Not_Empty
                  }

                  hist m_M_Z_EC_BA {
                     output = MuonTrkPhysMonitoring/NoTrigger/TrackingPerformance/Z_Signal/Experts/Muons
                     display   = Draw=E1
                     algorithm = Histogram_Not_Empty
                  }

                  hist m_M_Z_EC_EA {
                     output = MuonTrkPhysMonitoring/NoTrigger/TrackingPerformance/Z_Signal/Experts/Muons
                     display   = Draw=E1
                     algorithm = Histogram_Not_Empty
                  }

                  hist m_M_Z_BC_EC {
                     output = MuonTrkPhysMonitoring/NoTrigger/TrackingPerformance/Z_Signal/Experts/Muons
                     display   = Draw=E1
                     algorithm = Histogram_Not_Empty
                  }

                  hist m_M_Z_BC_BC {
                     output = MuonTrkPhysMonitoring/NoTrigger/TrackingPerformance/Z_Signal/Experts/Muons
                     display   = Draw=E1
                     algorithm = Histogram_Not_Empty
                  }

                  hist m_M_Z_BC_BA {
                     output = MuonTrkPhysMonitoring/NoTrigger/TrackingPerformance/Z_Signal/Experts/Muons
                     display   = Draw=E1
                     algorithm = Histogram_Not_Empty
                  }

                  hist m_M_Z_BC_EA {
                     output = MuonTrkPhysMonitoring/NoTrigger/TrackingPerformance/Z_Signal/Experts/Muons
                     display   = Draw=E1
                     algorithm = Histogram_Not_Empty
                  }

                  hist m_M_Z_BA_EC {
                     output = MuonTrkPhysMonitoring/NoTrigger/TrackingPerformance/Z_Signal/Experts/Muons
                     display   = Draw=E1
                     algorithm = Histogram_Not_Empty
                  }

                  hist m_M_Z_BA_BC {
                     output = MuonTrkPhysMonitoring/NoTrigger/TrackingPerformance/Z_Signal/Experts/Muons
                     display   = Draw=E1
                     algorithm = Histogram_Not_Empty
                  }

                  hist m_M_Z_BA_BA {
                     output = MuonTrkPhysMonitoring/NoTrigger/TrackingPerformance/Z_Signal/Experts/Muons
                     display   = Draw=E1
                     algorithm = Histogram_Not_Empty
                  }

                  hist m_M_Z_BA_EA {
                     output = MuonTrkPhysMonitoring/NoTrigger/TrackingPerformance/Z_Signal/Experts/Muons
                     display   = Draw=E1
                     algorithm = Histogram_Not_Empty
                  }

                  hist m_M_Z_EA_EC {
                     output = MuonTrkPhysMonitoring/NoTrigger/TrackingPerformance/Z_Signal/Experts/Muons
                     display   = Draw=E1
                     algorithm = Histogram_Not_Empty
                  }

                  hist m_M_Z_EA_BC {
                     output = MuonTrkPhysMonitoring/NoTrigger/TrackingPerformance/Z_Signal/Experts/Muons
                     display   = Draw=E1
                     algorithm = Histogram_Not_Empty
                  }

                  hist m_M_Z_EA_BA {
                     output = MuonTrkPhysMonitoring/NoTrigger/TrackingPerformance/Z_Signal/Experts/Muons
                     display   = Draw=E1
                     algorithm = Histogram_Not_Empty
                  }

                  hist m_M_Z_EA_EA {
                     output = MuonTrkPhysMonitoring/NoTrigger/TrackingPerformance/Z_Signal/Experts/Muons
                     display   = Draw=E1
                     algorithm = Histogram_Not_Empty
                  }

               } #closing Collection
        
            } #closing Z_Signal

         } #closing TrackingPerformance
      
      } #closing NoTrigger
   } #closing MuonTrkPhysMonitoring
} #closing Muon

#############
# Algorithms
#############

algorithm BinsOutOfRange_BField {
  libname = libdqm_algorithms.so
  name = BinsOutOfRange
  RANGE_D = -0.02
  RANGE_U = 0.0
  thresholds = bin13_thresholds
}

algorithm BinsOutOfRange_BEE {
  libname = libdqm_algorithms.so
  name = BinsOutOfRange
  RANGE_D = -1000
  RANGE_U = 1000
  thresholds = bin13_thresholds
}

algorithm BinsOutOfRange_CSC {
  libname = libdqm_algorithms.so
  name = BinsOutOfRange
  RANGE_D = -20
  RANGE_U = 20
  thresholds = bin13_thresholds
}

algorithm BinsOutOfRange_MDT {
  libname = libdqm_algorithms.so
  name = BinsOutOfRange
  reference = CentrallyManagedReferences
  RANGE_D = -1
  RANGE_U = 1
  thresholds = bin12_thresholds
}

algorithm BinsOutOfRange_QoPtneg {
  libname = libdqm_algorithms.so
  name = BinsOutOfRange
  RANGE_D = -0.002
  RANGE_U = 0.0005
  thresholds = bin13_thresholds
}

algorithm BinsOutOfRange_QoPtpos {
  libname = libdqm_algorithms.so
  name = BinsOutOfRange
  RANGE_D = -0.002
  RANGE_U = 0.0005
  thresholds = bin13_thresholds
}

algorithm BinsOutOfRange_prelpos {
  libname = libdqm_algorithms.so
  name = BinsOutOfRange
  RANGE_D = -0.16
  RANGE_U = 0.1
  thresholds = bin25_thresholds
}

algorithm BinsOutOfRange_prelneg {
  libname = libdqm_algorithms.so
  name = BinsOutOfRange
  RANGE_D = -0.2
  RANGE_U = 0.1
  thresholds = bin25_thresholds
}

algorithm BinsOutOfRange_chi2 {
  libname = libdqm_algorithms.so
  name = BinsOutOfRange
  RANGE_D = 0.35
  RANGE_U = 1.0
  thresholds = bin12_thresholds
}

algorithm BinsOutOfRange_Zmass {
  libname = libdqm_algorithms.so
  name = BinsOutOfRange
  RANGE_D = 90
  RANGE_U = 92
  ignoreval = 0
  thresholds = bin34_thresholds
}

algorithm BinsOutOfRange_Zsigma {
  libname = libdqm_algorithms.so
  name = BinsOutOfRange
  RANGE_D = 1
  RANGE_U = 4.25
  thresholds = bin13_thresholds
}

algorithm GausFit_Z {
  libname = libdqm_algorithms.so
#  name = Simple_doublegaus_Fit
  name = Simple_gaus_Fit
  thresholds = zgaus_thresholds
  SubtractFromMean = 91
  MinStat = 100
  MinSignificance = 1
}

algorithm BinsOutOfRange_Eff1 {
  libname = libdqm_algorithms.so
  name = BinsOutOfRange
  RANGE_D = 0.90
  RANGE_U = 1.001
  thresholds = bin13_thresholds
}

algorithm BinsOutOfRange_Eff2 {
  libname = libdqm_algorithms.so
  name = BinsOutOfRange
  RANGE_D = 0.85
  RANGE_U = 1.001
  thresholds = bin25_thresholds
}

compositeAlgorithm BinsOutOfRange&BinContentComp {
subalgs = BinsOutOfRange,BinContentComp
libname = libdqm_algorithms.so
}

algorithm TripleBinsOutOfRange {
  name = BinsOutOfRange&BinContentComp

  BinsOutOfRange|RANGE_D = 0.96
  BinsOutOfRange|RANGE_U = 1.001
  BinsOutOfRange|PublishBins = 1
  BinsOutOfRange|thresholds = bin34_thresholds
  BinContentComp|Value = 0.91
  BinContentComp|FixedError = 0.0001
  BinContentComp|NSigma = 1
  BinContentComp|LessThan = 1
  BinContentComp|PublishBins = 1
  BinContentComp|thresholds = lowereff_thresholds
}

algorithm TripleBinsOutOfRange_staco {
  name = BinsOutOfRange&BinContentComp

  BinsOutOfRange|RANGE_D = 0.95
  BinsOutOfRange|RANGE_U = 1.001
  BinsOutOfRange|PublishBins = 1
  BinsOutOfRange|thresholds = bin34_thresholds
  BinContentComp|Value = 0.90
  BinContentComp|FixedError = 0.0001
  BinContentComp|NSigma = 1
  BinContentComp|LessThan = 1
  BinContentComp|PublishBins = 1
  BinContentComp|thresholds = lowereff_thresholds_staco
}

algorithm BField_sag {
  name = BinsOutOfRange&BinContentComp
  reference = CentrallyManagedReferences

  BinsOutOfRange|RANGE_D = 0.0
  BinsOutOfRange|RANGE_U = 0.2
  BinsOutOfRange|PublishBins = 1
  BinsOutOfRange|thresholds = binnone_thresholds
  BinContentComp|Ignore0 = 1
  BinContentComp|FixedError = 0.005
  BinContentComp|NSigma = 3
  BinContentComp|PublishBins = 1
  BinContentComp|NinStat = 1000
  BinContentComp|thresholds = comptoref_region_thresholds
}

algorithm BField_oPt {
  name = BinsOutOfRange&BinContentComp
  reference = CentrallyManagedReferences

  BinsOutOfRange|RANGE_D = -0.00075
  BinsOutOfRange|RANGE_U = 0.00075
  BinsOutOfRange|PublishBins = 1
  BinsOutOfRange|thresholds = binnone_thresholds
  BinContentComp|Ignore0 = 1
  BinContentComp|IncludeRefError = 1
  BinContentComp|NSigma = 2
  BinContentComp|PublishBins = 1
  BinContentComp|thresholds = comptoref_region_thresholds
}

algorithm CSC_comp {
  name = BinContentComp
  reference = CentrallyManagedReferences

#  BinsOutOfRange|RANGE_D = -10.0
#  BinsOutOfRange|RANGE_U = 10.0
#  BinsOutOfRange|PublishBins = 1
#  BinsOutOfRange|thresholds = binnone_thresholds
  Ignore0 = 1
  FixedError = 2.5
  NSigma = 5
  PublishBins = 1
  MinStat = 20000
  thresholds = comptoref_CSC_thresholds
}

algorithm MDTBEE_A {
  name = BinContentComp
  reference = CentrallyManagedReferences

#  BinsOutOfRange|RANGE_D = -250.0
#  BinsOutOfRange|RANGE_U = 750.0
#  BinsOutOfRange|PublishBins = 1
#  BinsOutOfRange|thresholds = binnone_thresholds
  Ignore0 = 1
  FixedErrorError = 12
  NSigma = 5
  PublishBins = 1
  MinStat = 20000
  thresholds = comptoref_BEE_thresholds
}

algorithm MDTBEE_C {
  name = BinContentComp
  reference = CentrallyManagedReferences

#  BinsOutOfRange|RANGE_D = -1000.0
#  BinsOutOfRange|RANGE_U = 250.0
#  BinsOutOfRange|PublishBins = 1
#  BinsOutOfRange|thresholds = binnone_thresholds
  Ignore0 = 1
  FixedError = 12
  NSigma = 5
  PublishBins = 1
  MinStat = 20000
  thresholds = comptoref_BEE_thresholds
}

algorithm MDTEE_A {
  name = BinContentComp
  reference = CentrallyManagedReferences

#  BinsOutOfRange|RANGE_D = -75.0
#  BinsOutOfRange|RANGE_U = 50.0
#  BinsOutOfRange|PublishBins = 1
#  BinsOutOfRange|thresholds = binnone_thresholds
  Ignore0 = 1
  FixedError = 2.5
  NSigma = 5
  PublishBins = 1
  MinStat = 20000
  thresholds = comptoref_EE_thresholds
}

algorithm MDTEE_C {
  name = BinContentComp
  reference = CentrallyManagedReferences

#  BinsOutOfRange|RANGE_D = -50.0
#  BinsOutOfRange|RANGE_U = 50.0
#  BinsOutOfRange|PublishBins = 1
#  BinsOutOfRange|thresholds = binnone_thresholds
  Ignore0 = 1
  FixedError = 2.5
  NSigma = 5
  PublishBins = 1
  MinStat = 20000
  thresholds = comptoref_EE_thresholds
}

algorithm MSID_qopt {
  name = BinsOutOfRange&BinContentComp
  reference = CentrallyManagedReferences

  BinsOutOfRange|RANGE_D = -0.0007
  BinsOutOfRange|RANGE_U = 0.0007
  BinsOutOfRange|PublishBins = 1
  BinsOutOfRange|thresholds = binnone_thresholds
  BinContentComp|Ignore0 = 1
  BinContentComp|IncludeRefError = 1
  BinContentComp|NSigma = 3
  BinContentComp|PublishBins = 1
  BinContentComp|thresholds = comptoref_region_thresholds
}

algorithm MSID_dz0 {
  name = BinsOutOfRange&BinContentComp
  reference = CentrallyManagedReferences

  BinsOutOfRange|RANGE_D = -15
  BinsOutOfRange|RANGE_U = 15
  BinsOutOfRange|PublishBins = 1
  BinsOutOfRange|thresholds = binnone_thresholds
  BinContentComp|Ignore0 = 1
  BinContentComp|IncludeRefError = 1
  BinContentComp|NSigma = 2
  BinContentComp|PublishBins = 1
  BinContentComp|thresholds = comptoref_sector_thresholds
}

algorithm MSID_opt {
  name = BinsOutOfRange&BinContentComp
  reference = CentrallyManagedReferences

  BinsOutOfRange|RANGE_D = 0.026
  BinsOutOfRange|RANGE_U = 0.0295
  BinsOutOfRange|PublishBins = 1
  BinsOutOfRange|thresholds = binnone_thresholds
  BinContentComp|Ignore0 = 1
  BinContentComp|IncludeRefError = 1
  BinContentComp|NSigma = 2
  BinContentComp|PublishBins = 1
  BinContentComp|MinStat = 1000
  BinContentComp|thresholds = comptoref_region_thresholds
}

algorithm MSID_optdiff {
  name = BinsOutOfRange&BinContentComp
  reference = CentrallyManagedReferences

  BinsOutOfRange|RANGE_D = -0.0006
  BinsOutOfRange|RANGE_U = 0.0006
  BinsOutOfRange|PublishBins = 1
  BinsOutOfRange|thresholds = binnone_thresholds
  BinContentComp|Ignore0 = 1
  BinContentComp|IncludeRefError = 1
  BinContentComp|NSigma = 3
  BinContentComp|PublishBins = 1
  BinContentComp|MinStat = 1000
  BinContentComp|thresholds = comptoref_region_thresholds
}

algorithm TPGen_nphitra {
  name = BinsOutOfRange&BinContentComp
  reference = CentrallyManagedReferences

  BinsOutOfRange|RANGE_D = 5.
  BinsOutOfRange|RANGE_U = 10.
  BinsOutOfRange|PublishBins = 1
  BinsOutOfRange|thresholds = binnone_thresholds
  BinContentComp|Ignore0 = 1
  BinContentComp|FixedError = 0.2
  BinContentComp|NSigma = 3
  BinContentComp|PublishBins = 1
  BinContentComp|MinStat = 1000
  BinContentComp|thresholds = comptoref_region_thresholds
}

algorithm TPGen_npretra {
  name = BinsOutOfRange&BinContentComp
  reference = CentrallyManagedReferences

  BinsOutOfRange|RANGE_D = 12
  BinsOutOfRange|RANGE_U = 25
  BinsOutOfRange|PublishBins = 1
  BinsOutOfRange|thresholds = binnone_thresholds
  BinContentComp|Ignore0 = 1
  BinContentComp|FixedError = 0.5
  BinContentComp|NSigma = 3
  BinContentComp|PublishBins = 1
  BinContentComp|MinStat = 1000
  BinContentComp|thresholds = comptoref_region_thresholds
}

algorithm TPGen_nhseg {
  name = BinsOutOfRange&BinContentComp
  reference = CentrallyManagedReferences

  BinsOutOfRange|RANGE_D = 8
  BinsOutOfRange|RANGE_U = 11
  BinsOutOfRange|PublishBins = 1
  BinsOutOfRange|thresholds = binnone_thresholds
  BinContentComp|Ignore0 = 1
  BinContentComp|FixedError = 0.05
  BinContentComp|NSigma = 4
  BinContentComp|PublishBins = 1
  BinContentComp|MinStat = 1000
  BinContentComp|thresholds = comptoref_region_thresholds
}

algorithm TPGen_nsegtra {
  name = BinsOutOfRange&BinContentComp
  reference = CentrallyManagedReferences

  BinsOutOfRange|RANGE_D = 2
  BinsOutOfRange|RANGE_U = 4
  BinsOutOfRange|PublishBins = 1
  BinsOutOfRange|thresholds = binnone_thresholds
  BinContentComp|Ignore0 = 1
  BinContentComp|FixedError = 0.05
  BinContentComp|NSigma = 3
  BinContentComp|PublishBins = 4
  BinContentComp|MinStat = 1000
  BinContentComp|thresholds = comptoref_region_thresholds
}

algorithm TPGen_gt0 {
  name = BinsOutOfRange&BinContentComp
  reference = CentrallyManagedReferences

  BinsOutOfRange|RANGE_D = -2
  BinsOutOfRange|RANGE_U = 2
  BinsOutOfRange|PublishBins = 1
  BinsOutOfRange|thresholds = binnone_thresholds
  BinContentComp|Ignore0 = 1
  BinContentComp|FixedError = 0.075
  BinContentComp|NSigma = 3
  BinContentComp|PublishBins = 1
  BinContentComp|MinStat = 1000
  BinContentComp|thresholds = comptoref_side_thresholds
}

algorithm Symmetric {
  libname = libdqm_algorithms.so
  name = BinsSymmetric
  thresholds = sym_thresholds
}

algorithm CompToRef_region_loose {
  libname = libdqm_algorithms.so
  name = BinContentComp
#  reference = CompToRef_Ref
  reference = CentrallyManagedReferences
  IncludeRefError = 1
  MinStat = 1000
  NSigma = 3
  PublishBins = 1
  Ignore0 = 1
  thresholds = comptoref_region_thresholds
}

algorithm CompToRef_region_fixed {
  libname = libdqm_algorithms.so
  name = BinContentComp
#  reference = CompToRef_Ref
  reference = CentrallyManagedReferences
#  IncludeRefError = 1
  FixedError = 0.005
  MinStat = 1000
  NSigma = 3
  PublishBins = 1
  Ignore0 = 1
  thresholds = comptoref_region_thresholds
}

algorithm CompToRef_region_tight {
  libname = libdqm_algorithms.so
  name = BinContentComp
#  reference = CompToRef_Ref
  reference = CentrallyManagedReferences
  IncludeRefError = 1
  MinStat = 1000
  NSigma = 2
  PublishBins = 1
  Ignore0 = 1
  thresholds = comptoref_region_thresholds
}

algorithm CompToRef_sector {
  libname = libdqm_algorithms.so
  name = BinContentComp
#  reference = CompToRef_Ref
  reference = CentrallyManagedReferences
  IncludeRefError = 1
  MinStat = 1000
  NSigma = 2
  PublishBins = 1
  Ignore0 = 1
  thresholds = comptoref_sector_thresholds
}

algorithm CompToRef_zoccu {
  libname = libdqm_algorithms.so
  name = BinContentComp
#  reference = CompToRef_Ref
  reference = CentrallyManagedReferences
#  IncludeRefError = 1
  MinStat = 1000
  NSigma = 7
  PublishBins = 1
  Ignore0 = 1
  NormRef = 1
  thresholds = comptoref_region_thresholds
}

algorithm N_GatherData {
  libname = libdqm_algorithms.so
  name = GatherData
}

algorithm CompToRef_low_region {
  libname = libdqm_algorithms.so
  name = BinContentComp
#  reference = CompToRef_Ref
  reference = CentrallyManagedReferences
  IncludeRefError = 1
#  MinStat = 1
  NSigma = 2
  PublishBins = 1
  Ignore0 = 1
  thresholds = comptoref_region_thresholds
}

algorithm CompToRef_low_sector {
  libname = libdqm_algorithms.so
  name = BinContentComp
#  reference = CompToRef_Ref
  reference = CentrallyManagedReferences
  IncludeRefError = 1
#  MinStat = 1
  NSigma = 2
  PublishBins = 1
  Ignore0 = 1
  thresholds = comptoref_sector_thresholds
}

algorithm BinsOutOfRange_SigZ {
  libname = libdqm_algorithms.so
  name = BinsOutOfRange
  RANGE_D = 2
  RANGE_U = 4
  thresholds = bin25_thresholds
}

algorithm GausFit_Res {
  libname = libdqm_algorithms.so
#  name = Simple_doublegaus_Fit
  name = Simple_gaus_Fit
  xmin = -1000
  xmax = 1000
  MinStat = 100
  MinSignificance = 1
#  Verbose = 1
  thresholds = resgaus_thresholds
}

algorithm GausFit_Good_t0 {
  libname = libdqm_algorithms.so
#  name = Simple_doublegaus_Fit
  name = Simple_gaus_Fit
  thresholds = t0gaus_thresholds
  MinStat = 100
  MinSignificance = 1
#  Verbose = 1
}

algorithm HitResOutliers {
  libname = libdqm_algorithms.so
  name = Bins_Diff_FromAvg
  thresholds = hitresoutliers_thresholds
  NSigma = 2
  PublishBins = 1
}

algorithm BinsOutOfRange_HitResMean {
  libname = libdqm_algorithms.so
  name = BinsOutOfRange
  RANGE_D = -25
  RANGE_U = 25
  #name = Bins_GreaterThanAbs_Threshold
  #BinThreshold = 5
  #PublishBins = 1
  xmin = -1
  xmax = 1
  MaxPublish = 35
  thresholds = bin2030_thresholds
}

algorithm BinsOutOfRange_HitResWidth {
  libname = libdqm_algorithms.so
  name = BinsOutOfRange
  RANGE_D = 0
  RANGE_U = 300
  ignoreval = 0
  xmin = -1
  xmax = 1
  MaxPublish = 35
  thresholds = bin2030_thresholds
}

algorithm BinsOutOfRange_t0 {
  libname = libdqm_algorithms.so
  name = BinsOutOfRange
  RANGE_D = -2
  RANGE_U = 2
  thresholds = bin12_thresholds
}

algorithm BinsOutOfRange_etaphi_t0_im {
  libname = libdqm_algorithms.so
  name = BinsOutOfRange
  RANGE_D = -10
  RANGE_U = 10
#  xmin = -1.68
#  xmax = 1.68
  MaxPublish = 35
  thresholds = bin110_thresholds
}

algorithm BinsOutOfRange_etaphi_t0_o {
  libname = libdqm_algorithms.so
  name = BinsOutOfRange
  RANGE_D = -10
  RANGE_U = 10
#  xmin = -1.02
#  xmax = 1.02
  MaxPublish = 35
  thresholds = bin110_thresholds
}

algorithm BinsOutOfRange_etaphi_t0_comb {
  libname = libdqm_algorithms.so
  name = BinsOutOfRange
  RANGE_D = -10
  RANGE_U = 10
#  xmin = -1.68
#  xmax = 1.68
  MaxPublish = 35
  thresholds = bin110_thresholds
}

algorithm BinsOutOfRange_BMap {
  libname = libdqm_algorithms.so
  name = BinsOutOfRange
  RANGE_D = 0
  RANGE_U = 0.5
  ignoreval = 0
  MaxPublish = 35
  thresholds = bin1015_thresholds
}

#############
# Thresholds
#############

thresholds comptoref_region_thresholds {
#  limits P {
#    warning = 0.5
#    error = 1
#  }
  limits NBins {
    warning = 2
    error = 4
  }
}

thresholds comptoref_side_thresholds {
  limits NBins {
    warning = 1
    error = 3
  }
}

thresholds comptoref_sector_thresholds {
  limits NBins {
    warning = 5
    error = 7
  }
}

thresholds comptoref_CSC_thresholds {
  limits NBins {
    warning = 1
    error = 7
  }
}

thresholds comptoref_EE_thresholds {
  limits NBins {
    warning = 1
    error = 4
  }
}

thresholds comptoref_BEE_thresholds {
  limits NBins {
    warning = 1
    error = 4
  }
}

thresholds lowereff_thresholds {
  limits NBins {
    warning = 0.1
    error = 1.1
  }
}

thresholds lowereff_thresholds_staco {
  limits NBins {
    warning = 1.1
    error = 2.1
  }
}

thresholds resgaus_thresholds {
  limits Sigma {
    warning = 250
    error = 750
  }
#  limits Mean {
#    warning = 0.25
#    error = 0.50
#  }
  limits AbsMean {
    warning = 50.0
    error = 550.0
  }
#  limits Chi2_per_NDF {
#    warning = 30.
#    error = 50.
#  }
}

thresholds t0gaus_thresholds {
  limits Sigma {
    warning = 5
    error = 10
  }
#  limits Mean {
#    warning = 0.25
#    error = 0.50
#  }
  limits AbsMean {
    warning = 1.0
    error = 2.0
  }
#  limits Chi2_per_NDF {
#    warning = 30.
#    error = 50.
#  }
}

thresholds hitresoutliers_thresholds {
  limits NBins {
    warning = 5
    error = 10
  }
}

thresholds binnone_thresholds {
  limits NbadBins {
    warning = 0.9
    error = 1
  }
}

thresholds bin12_thresholds {
  limits NbadBins {
    warning = 1
    error = 2
  }
}

thresholds bin13_thresholds {
  limits NbadBins {
    warning = 1
    error = 3
  }
}

thresholds bin23_thresholds {
  limits NbadBins {
    warning = 2
    error = 3
  }
}

thresholds bin25_thresholds {
  limits NbadBins {
    warning = 2
    error = 5
  }
}

thresholds bin34_thresholds {
  limits NbadBins {
    warning = 3
    error = 4
  }
}

thresholds bin1015_thresholds {
  limits NbadBins {
    warning = 10
    error = 15
  }
}

thresholds bin2030_thresholds {
  limits NbadBins {
    warning = 20
    error = 30
  }
}

thresholds bin110_thresholds {
  limits NbadBins {
    warning = 1
    error = 10
  }
}

thresholds zgaus_thresholds {
  limits Sigma {
    warning = 5.0
    error = 10.0
  }  
  limits Mean {
    warning = 1.0
    error = 2.0
  }
}

thresholds sym_thresholds {
  limits NSigma {
    warning = 20
    error = 30
  }
}
