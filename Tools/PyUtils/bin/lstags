#!/usr/bin/env python

# Copyright (C) 2002-2019 CERN for the benefit of the ATLAS collaboration

# @file:    lstags
# @purpose: List the version (tag) of the currently checked out packages.
#           Optionally compare to the release version and most recent version.
#           Inspired by BaBar's 'statusrel' command.
# @author:  Frank Winklmeier
#

from __future__ import print_function

import sys, os
from PyUtils.Decorators import memoize

@memoize
def read_pkg_file(filename):
   """Read a packages.txt file and cache the content if already read"""
   try:
      lines = open(filename).readlines()
   except:
      lines = []
   pkgs = {}
   for l in lines:
      if l.startswith('#'): continue
      name,tag = l.split()
      pkgs[name] = tag 
   return pkgs

def cmake_get_local_packages():
   """Get the list of local packages"""

   try:
      workDir = os.environ.get("WorkDir_DIR")
      pkgs = read_pkg_file(os.path.join(workDir,"packages.txt"))
      return pkgs
   except: # User might not necessarily have a WorkDir_DIR defined
      return {} 
   
def main():

   import optparse
   parser = optparse.OptionParser(description="List the version of the locally checked out packages.")
   
   parser.add_option("-q", "--quiet", action="store_true", dest="quiet",
                     help="only print package name")
   parser.add_option("-t", "--tag", action="store_true", dest="tag",
                     help="print the package tag")
   
   (opt, args) = parser.parse_args()

   packages = cmake_get_local_packages()

   for pkg in packages:
      msg = "{}".format(pkg.split("/")[-1] if opt.quiet else pkg)
      if opt.tag: msg += " uses {}".format(packages[pkg]) # <unknown> in current infrastructure 
      print (msg)

   return 0


if __name__ == "__main__":
   try:
      sys.exit(main())
   except KeyboardInterrupt:
      sys.exit(1)
      
