/*
  Copyright (C) 2002-2019 CERN for the benefit of the ATLAS collaboration
*/

#ifndef DenseEnvironmentsAmbiguityScoreProcessorTool_H
#define DenseEnvironmentsAmbiguityScoreProcessorTool_H

#include "AthenaBaseComps/AthAlgTool.h"
#include "GaudiKernel/ToolHandle.h"

#include "TrkToolInterfaces/ITrackAmbiguityScoreProcessorTool.h"
#include "TrkEventPrimitives/TrackScore.h"
#include "TrkFitterInterfaces/ITrackFitter.h"
#include "TrkToolInterfaces/IAmbiTrackSelectionTool.h"
#include "InDetPrepRawData/PixelGangedClusterAmbiguities.h"
#include "TrkValInterfaces/ITrkObserverTool.h"


//need to include the following, since its a typedef and can't be forward declared.
#include "TrkTrack/TrackCollection.h"
#include "TrkTrack/TrackSeedMap.h"
#include "TrkParameters/TrackParameters.h"

#include <map>
#include <set>
#include <vector>
#include <functional>


namespace InDet{
  class IPixelClusterSplitProbTool;
  class PixelCluster;
  class SCT_Cluster;
}

namespace Trk {

  class ITrackScoringTool;
  class IPRD_AssociationTool;

  class DenseEnvironmentsAmbiguityScoreProcessorTool: public AthAlgTool, 
                                                  virtual public ITrackAmbiguityScoreProcessorTool
    {
    public:
      
      // public types
      typedef std::multimap< TrackScore, const Track* > TrackScoreMap;
      typedef std::set<const PrepRawData*> PrdSignature;
      typedef std::set<PrdSignature> PrdSignatureSet;
      
      // default methods
      DenseEnvironmentsAmbiguityScoreProcessorTool(const std::string&,const std::string&,const IInterface*);
      virtual ~DenseEnvironmentsAmbiguityScoreProcessorTool();
      virtual StatusCode initialize() override;
      virtual StatusCode finalize  () override;

      virtual void process(std::vector<const Track*>* tracks,
                           TracksScores* trackScoreTrackMap) override;

      /** statistics output */
      virtual void statistics() override;

    private:
      
      /**Add passed TrackCollection, and Trk::PrepRawData from tracks to caches
         @param tracks the TrackCollection is looped over, 
         and each Trk::Track is added to the various caches. 
         The Trk::PrepRawData from each Trk::Track are added to the IPRD_AssociationTool*/
      void addNewTracks(std::vector<const Track*>* tracks,
                        TracksScores* trackScoreTrackMap);

      /**  Find SiS Tracks that share hits in the track score map*/
      void overlappingTracks(TracksScores* scoreTrackMap,
                             InDet::PixelGangedClusterAmbiguities *splitClusterMap);
     
      /**  Update pixel split information based using the fitted track*/    
      void updatePixelSplitInformationForCluster(const std::pair<const InDet::PixelCluster* const,
                                                 const Trk::TrackParameters*> & clusterTrkPara,
                                                 InDet::PixelGangedClusterAmbiguities *splitClusterMap);

               
      /**Scoring tool
         This tool is used to 'score' the tracks, i.e. to quantify what a good track is.
         @todo The actual tool that is used should be configured through job options*/
      ToolHandle<ITrackScoringTool> m_scoringTool;
      
      /** selection tool - here the decision which hits remain on a track and
          which are removed are made */
      ToolHandle<IAmbiTrackSelectionTool> m_selectionTool;

      /** recalculate split prob tool **/
      ToolHandle<InDet::IPixelClusterSplitProbTool> m_splitProbTool; 

      /**Association tool - used to work out which (if any) PRDs are shared between 
       tracks */ 
      ToolHandle<Trk::IPRD_AssociationTool> m_assoTool;

      /** cluster split information generated by previous instances*/
      SG::ReadHandleKey<InDet::PixelGangedClusterAmbiguities>  m_splitClusterMapKey_last;
      
      /** cluster split information which m_splitClusterMap_last will be merged into*/  
      SG::WriteHandleKey<InDet::PixelGangedClusterAmbiguities>  m_splitClusterMapKey;
      
      /**NN split sprob cut for 2 particle clusters */      
      float m_sharedProbCut;

      /**NN split sprob cut for 3 particle clusters */      
      float m_sharedProbCut2;
  };
} //end ns

#endif // TrackAmbiguityProcessorTool_H
