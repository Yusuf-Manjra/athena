/*
  Copyright (C) 2002-2021 CERN for the benefit of the ATLAS collaboration
*/

namespace Trk {

inline TrapezoidBounds*
TrapezoidBounds::clone() const
{
  return new TrapezoidBounds(*this);
}

inline double
TrapezoidBounds::minHalflengthX() const
{
  return m_boundValues[TrapezoidBounds::bv_minHalfX];
}

inline double
TrapezoidBounds::maxHalflengthX() const
{
  return m_boundValues[TrapezoidBounds::bv_maxHalfX];
}

inline double
TrapezoidBounds::halflengthY() const
{
  return m_boundValues[TrapezoidBounds::bv_halfY];
}

inline double
TrapezoidBounds::minHalflengthPhi() const
{
  return minHalflengthX();
}

inline double
TrapezoidBounds::maxHalflengthPhi() const
{
  return maxHalflengthX();
}

inline double
TrapezoidBounds::halflengthEta() const
{
  return halflengthY();
}

inline double
TrapezoidBounds::alpha() const
{
  return m_alpha;
}

inline double
TrapezoidBounds::beta() const
{
  return m_beta;
}

inline double
TrapezoidBounds::r() const
{
  return sqrt(m_boundValues[TrapezoidBounds::bv_maxHalfX] *
                m_boundValues[TrapezoidBounds::bv_maxHalfX] +
              m_boundValues[TrapezoidBounds::bv_halfY] *
                m_boundValues[TrapezoidBounds::bv_halfY]);
}

inline bool
TrapezoidBounds::insideLoc1(const Amg::Vector2D& locpo, double tol1) const
{
  return (std::abs(locpo[locX]) <
          m_boundValues[TrapezoidBounds::bv_maxHalfX] + tol1);
}

inline bool
TrapezoidBounds::insideLoc2(const Amg::Vector2D& locpo, double tol2) const
{
  return (std::abs(locpo[locY]) < m_boundValues[TrapezoidBounds::bv_halfY] + tol2);
}

} // end of namespace

