namespace Trk {

inline RotatedDiamondBounds*
RotatedDiamondBounds::clone() const
{
  return new RotatedDiamondBounds(*this);
}

inline double
RotatedDiamondBounds::minHalflengthX() const
{
  return m_boundValues[RotatedDiamondBounds::bv_minHalfX];
}

inline double
RotatedDiamondBounds::medHalflengthX() const
{
  return m_boundValues[RotatedDiamondBounds::bv_medHalfX];
}

inline double
RotatedDiamondBounds::maxHalflengthX() const
{
  return m_boundValues[RotatedDiamondBounds::bv_maxHalfX];
}

inline double
RotatedDiamondBounds::halflengthY1() const
{
  return m_boundValues[RotatedDiamondBounds::bv_halfY1];
}

inline double
RotatedDiamondBounds::halflengthY2() const
{
  return m_boundValues[RotatedDiamondBounds::bv_halfY2];
}

inline double
RotatedDiamondBounds::r() const
{
  return sqrt(m_boundValues[RotatedDiamondBounds::bv_medHalfX] *
                m_boundValues[RotatedDiamondBounds::bv_medHalfX] +
              m_boundValues[RotatedDiamondBounds::bv_halfY1] *
                m_boundValues[RotatedDiamondBounds::bv_halfY1]);
}

inline bool
RotatedDiamondBounds::insideLoc1(const Amg::Vector2D& locpo, double tol1) const
{
  return (fabs(locpo[locY]) <
          m_boundValues[RotatedDiamondBounds::bv_medHalfX] + tol1);
}

inline bool
RotatedDiamondBounds::insideLoc2(const Amg::Vector2D& locpo, double tol2) const
{
  return (
    (locpo[locX] >
     -2. * m_boundValues[RotatedDiamondBounds::bv_halfY1] - tol2) &&
    (locpo[locY] < 2. * m_boundValues[RotatedDiamondBounds::bv_halfY2] + tol2));
}

} // end of namespace
