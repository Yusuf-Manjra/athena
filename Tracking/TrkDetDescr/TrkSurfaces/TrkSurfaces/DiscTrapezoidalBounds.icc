/*
  Copyright (C) 2002-2021 CERN for the benefit of the ATLAS collaboration
*/

namespace Trk {

inline DiscTrapezoidalBounds*
DiscTrapezoidalBounds::clone() const
{
  return new DiscTrapezoidalBounds(*this);
}


inline bool
DiscTrapezoidalBounds::insideLoc1(const Amg::Vector2D& locpo, double tol1) const
{
  double alpha =
    fabs(locpo[locPhi] - m_boundValues[DiscTrapezoidalBounds::bv_averagePhi]);
  if (alpha > M_PI)
    alpha = 2 * M_PI - alpha;

  return (locpo[locR] >
            (m_boundValues[DiscTrapezoidalBounds::bv_rMin] *
               cos(m_boundValues[DiscTrapezoidalBounds::bv_halfPhiSector]) /
               cos(alpha) -
             tol1) &&
          locpo[locR] <
            (m_boundValues[DiscTrapezoidalBounds::bv_rMax] *
               cos(m_boundValues[DiscTrapezoidalBounds::bv_halfPhiSector]) /
               cos(alpha) +
             tol1));
}

inline bool
DiscTrapezoidalBounds::insideLoc2(const Amg::Vector2D& locpo, double tol2) const
{
  double alpha =
    fabs(locpo[locPhi] - m_boundValues[DiscTrapezoidalBounds::bv_averagePhi]);
  if (alpha > M_PI)
    alpha = 2. * M_PI - alpha;
  return (alpha <=
          (m_boundValues[DiscTrapezoidalBounds::bv_halfPhiSector] + tol2));
}

inline double
DiscTrapezoidalBounds::rMin() const
{
  return m_boundValues[DiscTrapezoidalBounds::bv_rMin];
}

inline double
DiscTrapezoidalBounds::rMax() const
{
  return m_boundValues[DiscTrapezoidalBounds::bv_rMax];
}

inline double
DiscTrapezoidalBounds::r() const
{
  return m_boundValues[DiscTrapezoidalBounds::bv_rMax];
}

inline double
DiscTrapezoidalBounds::averagePhi() const
{
  return m_boundValues[DiscTrapezoidalBounds::bv_averagePhi];
}

inline double
DiscTrapezoidalBounds::rCenter() const
{
  return m_boundValues[DiscTrapezoidalBounds::bv_rCenter];
}

inline double
DiscTrapezoidalBounds::stereo() const
{
  return m_boundValues[DiscTrapezoidalBounds::bv_stereo];
}

inline double
DiscTrapezoidalBounds::halfPhiSector() const
{
  return m_boundValues[DiscTrapezoidalBounds::bv_halfPhiSector];
}

inline double
DiscTrapezoidalBounds::minHalflengthX() const
{
  return m_boundValues[DiscTrapezoidalBounds::bv_minHalfX];
}

inline double
DiscTrapezoidalBounds::maxHalflengthX() const
{
  return m_boundValues[DiscTrapezoidalBounds::bv_maxHalfX];
}

inline double
DiscTrapezoidalBounds::halflengthY() const
{
  return m_boundValues[DiscTrapezoidalBounds::bv_halfY];
}

} // end of namespace

