/*
  Copyright (C) 2002-2021 CERN for the benefit of the ATLAS collaboration
*/

namespace Trk {

inline DiamondBounds*
DiamondBounds::clone() const
{
  return new DiamondBounds(*this);
}

inline double
DiamondBounds::minHalflengthX() const
{
  return m_boundValues[DiamondBounds::bv_minHalfX];
}

inline double
DiamondBounds::medHalflengthX() const
{
  return m_boundValues[DiamondBounds::bv_medHalfX];
}

inline double
DiamondBounds::maxHalflengthX() const
{
  return m_boundValues[DiamondBounds::bv_maxHalfX];
}

inline double
DiamondBounds::halflengthY1() const
{
  return m_boundValues[DiamondBounds::bv_halfY1];
}

inline double
DiamondBounds::halflengthY2() const
{
  return m_boundValues[DiamondBounds::bv_halfY2];
}

inline double
DiamondBounds::r() const
{
  return sqrt(m_boundValues[DiamondBounds::bv_medHalfX] *
                m_boundValues[DiamondBounds::bv_medHalfX] +
              m_boundValues[DiamondBounds::bv_halfY1] *
                m_boundValues[DiamondBounds::bv_halfY1]);
}

inline bool
DiamondBounds::insideLoc1(const Amg::Vector2D& locpo, double tol1) const
{
  return (fabs(locpo[locX]) < m_boundValues[DiamondBounds::bv_medHalfX] + tol1);
}

inline bool
DiamondBounds::insideLoc2(const Amg::Vector2D& locpo, double tol2) const
{
  return (
    (locpo[locY] > -2. * m_boundValues[DiamondBounds::bv_halfY1] - tol2) &&
    (locpo[locY] < 2. * m_boundValues[DiamondBounds::bv_halfY2] + tol2));
}

inline void
DiamondBounds::initCache()
{
  m_alpha1 = atan2(m_boundValues[DiamondBounds::bv_medHalfX] -
                     m_boundValues[DiamondBounds::bv_minHalfX],
                   2. * m_boundValues[DiamondBounds::bv_halfY1]);
  m_alpha2 = atan2(m_boundValues[DiamondBounds::bv_medHalfX] -
                     m_boundValues[DiamondBounds::bv_maxHalfX],
                   2. * m_boundValues[DiamondBounds::bv_halfY2]);
}

} // end of namespace

