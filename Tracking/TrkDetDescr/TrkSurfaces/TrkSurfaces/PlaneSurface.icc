/*
  Copyright (C) 2002-2020 CERN for the benefit of the ATLAS collaboration
*/

namespace Trk {

inline Surface::SurfaceType
PlaneSurface::type() const
{
  return Surface::Plane;
}
/** Use the Surface as a ParametersBase constructor, from local parameters -
 * charged */
inline ParametersT<5, Charged, PlaneSurface>*
PlaneSurface::createTrackParameters(double l1,
                                    double l2,
                                    double phi,
                                    double theta,
                                    double qop,
                                    AmgSymMatrix(5) * cov) const
{
  return new ParametersT<5, Charged, PlaneSurface>(
    l1, l2, phi, theta, qop, *this, cov);
}

/** Use the Surface as a ParametersBase constructor, from global parameters -
 * charged*/
inline ParametersT<5, Charged, PlaneSurface>*
PlaneSurface::createTrackParameters(const Amg::Vector3D& position,
                                    const Amg::Vector3D& momentum,
                                    double charge,
                                    AmgSymMatrix(5) * cov) const
{
  return new ParametersT<5, Charged, PlaneSurface>(
    position, momentum, charge, *this, cov);
}

/** Use the Surface as a ParametersBase constructor, from local parameters -
 * neutral */
inline ParametersT<5, Neutral, PlaneSurface>*
PlaneSurface::createNeutralParameters(double l1,
                                      double l2,
                                      double phi,
                                      double theta,
                                      double oop,
                                      AmgSymMatrix(5) * cov) const
{
  return new ParametersT<5, Neutral, PlaneSurface>(
    l1, l2, phi, theta, oop, *this, cov);
}

/** Use the Surface as a ParametersBase constructor, from global parameters -
 * neutral */
inline ParametersT<5, Neutral, PlaneSurface>*
PlaneSurface::createNeutralParameters(const Amg::Vector3D& position,
                                      const Amg::Vector3D& momentum,
                                      double charge,
                                      AmgSymMatrix(5) * cov) const
{
  return new ParametersT<5, Neutral, PlaneSurface>(
    position, momentum, charge, *this, cov);
}

/** Use the Surface as a ParametersBase constructor, from local parameters */
template<int DIM, class T>
ParametersT<DIM, T, PlaneSurface>*
PlaneSurface::createParameters(double l1,
                               double l2,
                               double phi,
                               double theta,
                               double qop,
                               AmgSymMatrix(DIM) * cov) const
{
  return new ParametersT<DIM, T, PlaneSurface>(
    l1, l2, phi, theta, qop, *this, cov);
}

/** Use the Surface as a ParametersBase constructor, from global parameters */
template<int DIM, class T>
ParametersT<DIM, T, PlaneSurface>*
PlaneSurface::createParameters(const Amg::Vector3D& position,
                               const Amg::Vector3D& momentum,
                               double charge,
                               AmgSymMatrix(DIM) * cov) const
{
  return new ParametersT<DIM, T, PlaneSurface>(
    position, momentum, charge, *this, cov);
}

/** Return properly formatted class name for screen output */
inline std::string
PlaneSurface::name() const
{
  return "Trk::PlaneSurface";
}

inline PlaneSurface*
PlaneSurface::clone() const
{
  return new PlaneSurface(*this);
}

inline bool
PlaneSurface::insideBounds(const Amg::Vector2D& locpos,
                           double tol1,
                           double tol2) const
{
  return (bounds().inside(locpos, tol1, tol2));
}

inline bool
PlaneSurface::insideBoundsCheck(const Amg::Vector2D& locpos,
                                const BoundaryCheck& bchk) const
{
  return (bounds().inside(locpos, bchk));
}

inline const SurfaceBounds&
PlaneSurface::bounds() const
{
  if (m_bounds.get())
    return *(m_bounds.get());
  if (Surface::m_associatedDetElement &&
      Surface::m_associatedDetElementId.is_valid()) {
    return m_associatedDetElement->bounds(Surface::m_associatedDetElementId);
  }
  if (Surface::m_associatedDetElement)
    return m_associatedDetElement->bounds();
  return s_boundless;
}

inline Intersection
PlaneSurface::straightLineIntersection(const Amg::Vector3D& pos,
                                       const Amg::Vector3D& dir,
                                       bool forceDir,
                                       Trk::BoundaryCheck bchk) const
{
  double denom = dir.dot(normal());
  if (denom) {
    double u = (normal().dot((center() - pos))) / (denom);
    Amg::Vector3D intersectPoint(pos + u * dir);
    // evaluate the intersection in terms of direction
    bool isValid = forceDir ? (u > 0.) : true;
    // evaluate (if necessary in terms of boundaries)
    isValid = bchk ? (isValid && isOnSurface(intersectPoint)) : isValid;
    // return the result
    return Trk::Intersection(intersectPoint, u, isValid);
  }
  return Trk::Intersection(pos, 0., false);
}
}
