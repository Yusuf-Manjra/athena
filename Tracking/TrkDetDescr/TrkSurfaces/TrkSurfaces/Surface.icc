/*
  Copyright (C) 2002-2019 CERN for the benefit of the ATLAS collaboration
*/

namespace Trk{

inline bool
Surface::operator!=(const Surface& sf) const
{
  return !((*this) == sf);
}

inline const Amg::Transform3D*
Surface::cachedTransform() const
{
  return m_transform.get();
}

inline const Amg::Transform3D&
Surface::transform() const
{
  if (m_transform)
    return (*m_transform);
  if (m_associatedDetElement && m_associatedDetElementId.is_valid())
    return m_associatedDetElement->transform(m_associatedDetElementId);
  if (m_associatedDetElement)
    return m_associatedDetElement->transform();
  return s_idTransform;
}

inline const Amg::Vector3D&
Surface::center() const
{
  if (m_transform && !m_center) {
    return *(m_center.set(std::make_unique<Amg::Vector3D>(m_transform->translation())));
  }
  if (m_center)
    return (*m_center);
  if (m_associatedDetElement && m_associatedDetElementId.is_valid())
    return m_associatedDetElement->center(m_associatedDetElementId);
  if (m_associatedDetElement)
    return m_associatedDetElement->center();
  return s_origin;
}

inline const Amg::Vector3D&
Surface::normal() const
{
  if (m_transform && !m_normal) {
    return *(m_normal.set(std::make_unique<Amg::Vector3D>(m_transform->rotation().col(2))));
  }
  if (m_normal)
    return (*m_normal);
  if (m_associatedDetElement && m_associatedDetElementId.is_valid())
    return m_associatedDetElement->normal(m_associatedDetElementId);
  if (m_associatedDetElement)
    return m_associatedDetElement->normal();
  return s_zAxis;
}

// standard is to set non-defined parameters to 0, but can be changed for surface type
inline Amg::Vector2D
Surface::localParametersToPosition(const LocalParameters& locpars) const
{
  if (locpars.contains(Trk::loc1) && locpars.contains(Trk::loc2))
    return Amg::Vector2D(locpars[Trk::loc1], locpars[loc2]);
  if (locpars.contains(Trk::loc1))
    return Amg::Vector2D(locpars[Trk::loc1], 0.);
  if (locpars.contains(Trk::loc2))
    return Amg::Vector2D(0., locpars[loc2]);
  return Amg::Vector2D(0., 0.);
}

// common to planar surfaces
inline double
Surface::pathCorrection(const Amg::Vector3D&, const Amg::Vector3D& mom) const
{
  Amg::Vector3D dir(mom.unit());
  double cosAlpha = dir.dot(normal());
  return (cosAlpha != 0 ? fabs(1. / cosAlpha) : 1.); // ST undefined for cosAlpha=0
}

//* the templated parameters on Surface method */
template<class T>
bool
Surface::onSurface(const T& pars, const Trk::BoundaryCheck& bcheck) const
{
  // surface pointer comparison as a first fast check (w/o transform)
  if ((&pars.associatedSurface() == this)) {
    return (bcheck ? insideBoundsCheck(pars.localPosition(), bcheck) : true);
  }
  return isOnSurface(pars.position(), bcheck);
}

// common to all surface, uses memory optized method
inline const Amg::Vector3D*
Surface::localToGlobal(const Amg::Vector2D& locpos) const
{
  Amg::Vector3D* gPosition = new Amg::Vector3D;
  localToGlobal(locpos, Amg::Vector3D(1., 1., 1.), *gPosition);
  return gPosition;
}
// common to all surfaces uses memory optimized method
inline const Amg::Vector3D*
Surface::localToGlobal(const Amg::Vector2D& locpos, const Amg::Vector3D& glomom) const
{
  Amg::Vector3D* gPosition = new Amg::Vector3D;
  localToGlobal(locpos, glomom, *gPosition);
  return gPosition;
}
// common to all surface, uses memory optized method
inline const Amg::Vector3D*
Surface::localToGlobal(const LocalParameters& locpars) const
{
  Amg::Vector3D* gPosition = new Amg::Vector3D;
  localToGlobal(localParametersToPosition(locpars), Amg::Vector3D(1., 1., 1.), *gPosition);
  return gPosition;
}
// common to all surfaces uses memory optimized method
inline const Amg::Vector3D*
Surface::localToGlobal(const LocalParameters& locpars, const Amg::Vector3D& glomom) const
{
  Amg::Vector3D* gPosition = new Amg::Vector3D(0., 0., 0.);
  localToGlobal(localParametersToPosition(locpars), glomom, *gPosition);
  return gPosition;
}
// common to all surfaces, uses memory optized method
inline const Amg::Vector2D*
Surface::globalToLocal(const Amg::Vector3D& glopos, double) const
{
  Amg::Vector2D* lPosition = new Amg::Vector2D(0., 0.);
  if (globalToLocal(glopos, Amg::Vector3D(1., 1., 1.), *lPosition))
    return lPosition;
  delete lPosition;
  return nullptr;
}
// common to all surfaces, uses memory optized method
inline const Amg::Vector2D*
Surface::globalToLocal(const Amg::Vector3D& glopos, const Amg::Vector3D& glomom) const
{
  Amg::Vector2D* lPosition = new Amg::Vector2D(0., 0.);
  if (globalToLocal(glopos, glomom, *lPosition))
    return lPosition;
  delete lPosition;
  return nullptr;
}

// take local position and return global direction
inline const Amg::Vector3D*
Surface::normal(const Amg::Vector2D&) const
{
  return new Amg::Vector3D(normal());
}

inline const Amg::Vector3D&
Surface::globalReferencePoint() const
{
  return center();
}

inline const TrkDetElementBase*
Surface::associatedDetectorElement() const
{
  return m_associatedDetElement;
}

inline Identifier
Surface::associatedDetectorElementIdentifier() const
{
  if (!m_associatedDetElement)
    return Identifier(); // in invalid state
  if (m_associatedDetElementId.is_valid())
    return m_associatedDetElementId;
  return m_associatedDetElement->identify();
}

inline const Layer*
Surface::associatedLayer() const
{
  return (m_associatedLayer);
}

inline const Layer*
Surface::materialLayer() const
{
  return m_materialLayer;
}

inline const Surface*
Surface::baseSurface() const
{
  return (this);
}

inline bool
Surface::isActive() const
{
  return (m_associatedDetElement != nullptr);
}

inline bool
Surface::isFree() const
{
  return (m_owner == Trk::noOwn);
}

inline void
Surface::setOwner ATLAS_NOT_CONST_THREAD_SAFE (SurfaceOwner x) const
{
  const_cast<SurfaceOwner&>(m_owner) = x;
}

inline void 
Surface::setOwner(SurfaceOwner x) { 
  m_owner = x; 
}

inline SurfaceOwner
Surface::owner() const
{
  return m_owner;
}

inline void
Surface::setMaterialLayer(const Layer& mlay)
{
  m_materialLayer = (&mlay);
}

inline void
Surface::setMaterialLayer(const Layer* mlay)
{
  m_materialLayer = mlay;
}

inline void
Surface::setMaterialLayer ATLAS_NOT_CONST_THREAD_SAFE (const Layer& mlay) const
{
  const_cast<Surface*>(this)->m_materialLayer = (&mlay);
}

inline void
Surface::setMaterialLayer ATLAS_NOT_CONST_THREAD_SAFE (const Layer* mlay) const
{
  const_cast<Surface*>(this)->m_materialLayer = mlay;
}

inline void
Surface::associateLayer(const Layer& lay)
{
  m_associatedLayer = (&lay);
}

inline void
Surface::associateLayer ATLAS_NOT_CONST_THREAD_SAFE (const Layer& lay) const
{
  const_cast<Surface*>(this)->m_associatedLayer = (&lay);
}

} // end of namespace Trk


