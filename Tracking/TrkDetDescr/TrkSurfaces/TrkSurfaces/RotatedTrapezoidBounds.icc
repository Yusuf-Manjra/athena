/*
  Copyright (C) 2002-2021 CERN for the benefit of the ATLAS collaboration
*/

namespace Trk {
inline RotatedTrapezoidBounds*
RotatedTrapezoidBounds::clone() const
{
  return new RotatedTrapezoidBounds(*this);
}

inline void
RotatedTrapezoidBounds::initCache()
{
  m_kappa = 0.5 *
            (m_boundValues[RotatedTrapezoidBounds::bv_maxHalfY] -
             m_boundValues[RotatedTrapezoidBounds::bv_minHalfY]) /
            m_boundValues[RotatedTrapezoidBounds::bv_halfX];
  m_delta = 0.5 * (m_boundValues[RotatedTrapezoidBounds::bv_minHalfY] +
                   m_boundValues[RotatedTrapezoidBounds::bv_maxHalfY]);
}

inline double
RotatedTrapezoidBounds::halflengthX() const
{
  return m_boundValues[RotatedTrapezoidBounds::bv_halfX];
}

inline double
RotatedTrapezoidBounds::minHalflengthY() const
{
  return m_boundValues[RotatedTrapezoidBounds::bv_minHalfY];
}

inline double
RotatedTrapezoidBounds::maxHalflengthY() const
{
  return m_boundValues[RotatedTrapezoidBounds::bv_maxHalfY];
}

inline double
RotatedTrapezoidBounds::r() const
{
  return sqrt(m_boundValues[RotatedTrapezoidBounds::bv_halfX] *
                m_boundValues[RotatedTrapezoidBounds::bv_halfX] +
              m_boundValues[RotatedTrapezoidBounds::bv_maxHalfY] *
                m_boundValues[RotatedTrapezoidBounds::bv_maxHalfY]);
}

inline bool
RotatedTrapezoidBounds::insideLoc1(const Amg::Vector2D& pos,
                                   double tol1) const
{
  const Amg::Vector2D locpo = m_rotMat * pos;
  return (std::abs(locpo[locX]) <
          m_boundValues[RotatedTrapezoidBounds::bv_halfX] + tol1);
}

inline bool
RotatedTrapezoidBounds::insideLoc2(const Amg::Vector2D& pos,
                                   double tol2) const
{
  const Amg::Vector2D locpo = m_rotMat * pos;  
  return (std::abs(locpo[locY]) <
          m_boundValues[RotatedTrapezoidBounds::bv_maxHalfY] + tol2);
}
} // end of namespace

