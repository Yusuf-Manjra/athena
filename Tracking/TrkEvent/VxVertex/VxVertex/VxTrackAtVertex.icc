/*
  Copyright (C) 2002-2020 CERN for the benefit of the ATLAS collaboration
*/

namespace Trk {
inline const ITrackLink*
VxTrackAtVertex::trackOrParticleLink(void) const
{
  return m_trackOrParticleLink;
}

inline ITrackLink*
VxTrackAtVertex::trackOrParticleLink(void)
{
  return m_trackOrParticleLink;
}

inline const TrackParameters*
VxTrackAtVertex::initialPerigee(void) const
{
  if (m_initialPerigee != nullptr)
    return m_initialPerigee; // as default always return the proper object (be
                             // consistent!)
  if (m_trackOrParticleLink != nullptr)
    return m_trackOrParticleLink->parameters();
  return nullptr;
}

inline const NeutralParameters*
VxTrackAtVertex::initialNeutralPerigee(void) const
{
  if (m_initialNeutralPerigee != nullptr)
    return m_initialNeutralPerigee; // as default always return the proper
                                    // object (be consistent!)
  if (m_trackOrParticleLink != nullptr)
    return m_trackOrParticleLink->neutralParameters();
  return nullptr;
}

inline VxTrackAtVertex*
VxTrackAtVertex::clone() const
{
  return new VxTrackAtVertex(*this);
}

inline void
VxTrackAtVertex::setImpactPoint3dAtaPlane(const AtaPlane* myIP3dAtaPlane)
{
  if (m_ImpactPoint3dAtaPlane != nullptr)
    delete m_ImpactPoint3dAtaPlane;
  m_ImpactPoint3dAtaPlane = myIP3dAtaPlane;
}

inline const AtaPlane*
VxTrackAtVertex::ImpactPoint3dAtaPlane(void) const
{
  return m_ImpactPoint3dAtaPlane;
}

inline void
VxTrackAtVertex::setImpactPoint3dNeutralAtaPlane(
  const NeutralAtaPlane* myIP3dNeutralAtaPlane)
{
  if (m_ImpactPoint3dNeutralAtaPlane != nullptr)
    delete m_ImpactPoint3dNeutralAtaPlane;
  m_ImpactPoint3dNeutralAtaPlane = myIP3dNeutralAtaPlane;
}

inline const NeutralAtaPlane*
VxTrackAtVertex::ImpactPoint3dNeutralAtaPlane(void) const
{
  return m_ImpactPoint3dNeutralAtaPlane;
}

inline void
VxTrackAtVertex::setWeight(const double weight)
{
  m_trkWeight = weight;
}

inline double
VxTrackAtVertex::weight(void) const
{
  return m_trkWeight;
}

inline void
VxTrackAtVertex::setVtxCompatibility(const double vtxCompatibility)
{
  m_VertexCompatibility = vtxCompatibility;
}

inline double
VxTrackAtVertex::vtxCompatibility(void) const
{
  return m_VertexCompatibility;
}

inline LinearizedTrack*
VxTrackAtVertex::linState(void)
{
  return m_linState;
}

inline const LinearizedTrack*
VxTrackAtVertex::linState(void) const
{
  return m_linState;
}

inline FitQuality
VxTrackAtVertex::trackQuality(void) const
{
  return m_fitQuality;
}

inline const TrackParameters*
VxTrackAtVertex::perigeeAtVertex(void) const
{
  return m_perigeeAtVertex;
}

inline const NeutralParameters*
VxTrackAtVertex::neutralPerigeeAtVertex(void) const
{
  return m_neutralPerigeeAtVertex;
}

inline void
VxTrackAtVertex::setTrackQuality(const FitQuality& trkQuality)
{
  m_fitQuality = trkQuality;
}

inline void
VxTrackAtVertex::setPerigeeAtVertex(TrackParameters* perigee)
{
  if (m_perigeeAtVertex != nullptr)
    delete m_perigeeAtVertex;
  m_perigeeAtVertex = perigee;
}

inline void
VxTrackAtVertex::setPerigeeAtVertex(NeutralParameters* perigee)
{
  if (m_neutralPerigeeAtVertex != nullptr)
    delete m_neutralPerigeeAtVertex;
  m_neutralPerigeeAtVertex = perigee;
}

inline void
VxTrackAtVertex::setLinTrack(LinearizedTrack* myLinTrack)
{
  if (m_linState != nullptr)
    delete m_linState;
  m_linState = myLinTrack;
}

inline void
VxTrackAtVertex::setOrigTrack(ITrackLink* trk)
{
  delete m_trackOrParticleLink;
  // setting first the actual pointer:
  m_trackOrParticleLink = trk;

  // setting the initial perigee to be consistent with this
  // new track
  if (trk != nullptr) {
    // delete initialPerigee before, otherwise memleak!!
    //      if (m_initialPerigee!=0) { delete m_initialPerigee;
    //      m_initialPerigee=0; } const TrackParameters * tmpInPer =
    //      trk->parameters();
    m_initialPerigee = trk->parameters();
    m_initialNeutralPerigee = trk->neutralParameters();
  } else {
    m_initialPerigee = nullptr;
    m_initialNeutralPerigee = nullptr;
  }
} // end of setOrigTrack method

inline void
VxTrackAtVertex::setOrigTrackNoCache(ITrackLink* trk)
{
  delete m_trackOrParticleLink;
  m_trackOrParticleLink = trk;

  m_initialPerigee = nullptr;
  m_initialNeutralPerigee = nullptr;
} // end of setOrigTrackNocache method

inline void
VxTrackAtVertex::setInitialPerigee(const TrackParameters* perigee)
{
  if (m_trackOrParticleLink == nullptr)
    m_initialPerigee = perigee;
}

inline void
VxTrackAtVertex::setInitialPerigee(const NeutralParameters* perigee)
{
  if (m_trackOrParticleLink == nullptr)
    m_initialNeutralPerigee = perigee;
}

/**Overload of << operator for both, MsgStream and std::ostream for debug
output; only needed in base class? */
MsgStream&
operator<<(MsgStream& sl, const VxTrackAtVertex& sf);
std::ostream&
operator<<(std::ostream& sl, const VxTrackAtVertex& sf);

}

