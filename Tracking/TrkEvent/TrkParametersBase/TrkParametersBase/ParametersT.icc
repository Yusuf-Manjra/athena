/*
  Copyright (C) 2002-2020 CERN for the benefit of the ATLAS collaboration
*/

///////////////////////////////////////////////////////////////////
// ParametersT.icc, (c) ATLAS Detector software
///////////////////////////////////////////////////////////////////

// STD
#include <limits>
#include <utility>
// Trk
#include "TrkEventPrimitives/ParamDefs.h"

namespace Trk {

namespace {
template<typename T>
int
sgn(const T& val)
{
  return (val > 0) - (val < 0);
}
}

// Constructor with local arguments - uses global <-> local for parameters
template<int DIM, class T, class S>
ParametersT<DIM, T, S>::ParametersT(double loc1,
                                    double loc2,
                                    double phi,
                                    double theta,
                                    double qop,
                                    const S& surface,
                                    AmgSymMatrix(DIM) * cov)
  : ParametersBase<DIM, T>({}, cov, {}, {}, sgn(qop))
  , m_surface(nullptr)
{
  m_surface.reset((surface.isFree() ? surface.clone() : &surface));
  // check qoverp is physical
  double p = 0.;
  if (qop != 0) {
    p = fabs(1. / qop);
  } else {
    // qop is unphysical. No momentum measurement.
    p = InvalidParam::INVALID_P;
    qop = InvalidParam::INVALID_QOP;
  }

  // fill the parameters
  // cppcheck-suppress constStatement
  m_parameters << loc1, loc2, phi, theta, qop;

  // now calculate the momentum
  m_momentum = Amg::Vector3D(
    p * cos(phi) * sin(theta), p * sin(phi) * sin(theta), p * cos(theta));

  m_surface->localToGlobal(this->localPosition(), m_momentum, m_position);
}

// Constructor with local arguments - uses global <-> local for parameters
template<int DIM, class T, class S>
ParametersT<DIM, T, S>::ParametersT(const AmgVector(DIM) & parameters,
                                    const S& surface,
                                    AmgSymMatrix(DIM) * cov)
  : ParametersBase<DIM, T>(parameters,
                           cov,
                           {},
                           {},
                           sgn(parameters[Trk::qOverP]))
  , m_surface(nullptr)
{
  m_surface.reset((surface.isFree() ? surface.clone() : &surface));
  // decide the sign of the charge
  double qop = m_parameters[Trk::qOverP];

  // check qoverp is physical
  double p = 0.;
  if (qop != 0.) {
    p = fabs(1. / qop);
  } else {
    // qop is unphysical. No momentum measurement.
    p = InvalidParam::INVALID_P;
    qop = InvalidParam::INVALID_QOP;
  }

  // fill momentum & then position using the surface
  m_momentum = Amg::Vector3D(
    p * cos(m_parameters[Trk::phi]) * sin(m_parameters[Trk::theta]),
    p * sin(m_parameters[Trk::phi]) * sin(m_parameters[Trk::theta]),
    p * cos(m_parameters[Trk::theta]));

  m_surface->localToGlobal(this->localPosition(), m_momentum, m_position);
}

// Constructor with global arguments - uses global <-> local for parameters */
template<int DIM, class T, class S>
ParametersT<DIM, T, S>::ParametersT(const Amg::Vector3D& pos,
                                    const Amg::Vector3D& mom,
                                    double charge,
                                    const S& surface,
                                    AmgSymMatrix(DIM) * cov)
  : ParametersBase<DIM, T>({}, cov, pos, mom, charge)
  , m_surface(surface.isFree() ? surface.clone() : &surface)
{
  // get the local parameters via the surface
  Amg::Vector2D lPosition;
  const bool ok =
    m_surface->globalToLocal(this->position(), this->momentum(), lPosition);
  if (not ok) {
    lPosition = Amg::Vector2D(InvalidParam::INVALID, InvalidParam::INVALID);
  }

  // For a neutral particle, last parm should be 1/p rather than q/p.
  double qopnum = this->charge();
  if (qopnum == 0) {
    qopnum = 1;
  }

  // fill the vector now
  m_parameters << lPosition[Trk::loc1], lPosition[Trk::loc2],
    this->momentum().phi(), this->momentum().theta(),
    qopnum / this->momentum().norm();
}

// Constructor with mixed arguments 1 - uses global <-> local for parameters
template<int DIM, class T, class S>
Trk::ParametersT<DIM, T, S>::ParametersT(const Amg::Vector3D& pos,
                                         double phi,
                                         double theta,
                                         double qop,
                                         const S& surface,
                                         AmgSymMatrix(DIM) * cov)
  : ParametersBase<DIM, T>({}, cov, pos, {}, 1.)
  , m_surface(surface.isFree() ? surface.clone() : &surface)
{
  // decide the sign of the charge
  if (qop < 0.) {
    m_chargeDef.setCharge(-1);
  }

  // fill momentum & then position using the surface
  double p = 0.0;
  if (qop != 0.) {
    p = fabs(1. / qop);
  } else {
    // qop is unphysical. No momentum measurement.
    p = InvalidParam::INVALID_P;
    qop = InvalidParam::INVALID_QOP;
  }
  m_momentum = Amg::Vector3D(
    p * cos(phi) * sin(theta), p * sin(phi) * sin(theta), p * cos(theta));

  // get the local parameters via the surface
  Amg::Vector2D lPosition;
  const bool ok =
    m_surface->globalToLocal(this->position(), this->momentum(), lPosition);
  if (not ok) {
    lPosition = Amg::Vector2D(InvalidParam::INVALID, InvalidParam::INVALID);
  }
  // fill the vector now
  // cppcheck-suppress constStatement
  m_parameters << lPosition[Trk::loc1], lPosition[Trk::loc2], phi, theta, qop;
}

// Copy constructor
template<int DIM, class T, class S>
ParametersT<DIM, T, S>::ParametersT(const ParametersT<DIM, T, S>& rhs)
  : ParametersBase<DIM, T>(rhs.parameters(),
                           nullptr,
                           rhs.position(),
                           rhs.momentum(),
                           rhs.charge())
  , m_surface(nullptr)
{
  m_surface.reset((rhs.m_surface && rhs.m_surface->isFree()
                     ? rhs.m_surface->clone()
                     : rhs.m_surface.get()));
  if (rhs.covariance()) {
    m_covariance = std::make_unique<AmgSymMatrix(DIM)>(*rhs.covariance());
  }
}

// Move constructor
template<int DIM, class T, class S>
ParametersT<DIM, T, S>::ParametersT(ParametersT<DIM, T, S>&& rhs)
  : ParametersBase<DIM, T>(std::move(rhs))
  , m_surface(std::move(rhs.m_surface))
{
  // False positive:
  // cppcheck-suppress useInitializationList
}

// assignment operator
template<int DIM, class T, class S>
ParametersT<DIM, T, S>&
ParametersT<DIM, T, S>::operator=(const ParametersT<DIM, T, S>& rhs)
{
  if (this != &rhs) {
    m_parameters = rhs.m_parameters;
    m_covariance = rhs.covariance()
                     ? std::make_unique<AmgSymMatrix(DIM)>(*rhs.covariance())
                     : nullptr;
    m_position = rhs.position();
    m_momentum = rhs.momentum();
    m_surface.reset((rhs.m_surface && rhs.m_surface->isFree())
                      ? rhs.m_surface->clone()
                      : rhs.m_surface.get());
    m_chargeDef = rhs.m_chargeDef;
  }
  return *this;
}

// Move assignment
template<int DIM, class T, class S>
ParametersT<DIM, T, S>&
ParametersT<DIM, T, S>::operator=(ParametersT<DIM, T, S>&& rhs)
{
  if (this != &rhs) {
    ParametersBase<DIM, T>::operator=(std::move(rhs));
    m_surface = std::move(rhs.m_surface);
  }
  return *this;
}

/** equality operator */
template<int DIM, class T, class S>
bool
ParametersT<DIM, T, S>::operator==(const ParametersBase<DIM, T>& rhs) const
{
  // make sure we compare objects of same type
  decltype(this) pCasted = dynamic_cast<decltype(this)>(&rhs);
  if (!pCasted) {
    return false;
  }

  // comparison to myself?
  if (pCasted == this) {
    return true;
  }

  // compare surfaces
  if (associatedSurface() != pCasted->associatedSurface()) {
    return false;
  }

  // return compatibility of base class parts
  return ParametersBase<DIM, T>::operator==(rhs);
}

// return the measurementFrame
template<int DIM, class T, class S>
Amg::RotationMatrix3D
ParametersT<DIM, T, S>::measurementFrame() const
{
  return associatedSurface().measurementFrame(this->position(),
                                              this->momentum());
}

// private updateParametersHelper
template<int DIM, class T, class S>
void
ParametersT<DIM, T, S>::updateParametersHelper(const AmgVector(DIM) &
                                               updatedParameters)
{
  // valid to use != here, because value is either copied or modified,
  bool updatePosition =
    (updatedParameters[Trk::loc1] != m_parameters[Trk::loc1]) ||
    (updatedParameters[Trk::loc2] != m_parameters[Trk::loc2]);

  bool updateMomentum =
    (updatedParameters[Trk::phi] != m_parameters[Trk::phi]) ||
    (updatedParameters[Trk::theta] != m_parameters[Trk::theta]) ||
    (updatedParameters[qOverP] != m_parameters[qOverP]);

  // update the parameters vector
  m_parameters = updatedParameters;

  // position or momentum update needed
  if (updatePosition) {
    if (m_surface) {
      m_surface->localToGlobal(this->localPosition(), m_momentum, m_position);
    } else {
      m_momentum.setZero();
      m_position.setZero();
    }
  }
  // momentum update is needed
  if (updateMomentum) {
    double phi = m_parameters[Trk::phi];
    double theta = m_parameters[Trk::theta];
    double p = InvalidParam::INVALID_P;
    if (m_parameters[Trk::qOverP] != 0) {
      m_chargeDef = sgn(m_parameters[Trk::qOverP]);
      p = fabs(1. / m_parameters[Trk::qOverP]);
    }
    double sinTheta = sin(theta);
    m_momentum = Amg::Vector3D(
      p * cos(phi) * sinTheta, p * sin(phi) * sinTheta, p * cos(theta));
  }
}

// Protected Constructor with local arguments - persistency only
template<int DIM, class T, class S>
Trk::ParametersT<DIM, T, S>::ParametersT(const AmgVector(DIM) & pars,
                                         const S* surface,
                                         AmgSymMatrix(DIM) * cov)
  : ParametersBase<DIM, T>(pars, cov)
  , m_surface(surface)
{
  if (m_surface) {
    m_surface->localToGlobal(this->localPosition(), m_momentum, m_position);
  } else {
    m_momentum.setZero();
    m_position.setZero();
  }
}

} // end of namespace Trk
