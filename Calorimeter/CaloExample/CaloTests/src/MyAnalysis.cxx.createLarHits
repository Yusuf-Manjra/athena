#include "MyAnalysis/Analysis.h"
#include "GaudiKernel/MsgStream.h"
#include "GaudiKernel/IHistogramSvc.h"
#include "AIDA/IHistogram1D.h"
#include "LArSimEvent/LArHit.h"
#include "LArSimEvent/LArHitContainer.h"
#include "LArRawEvent/LArRawChannel.h"
#include "LArRawEvent/LArRawChannelContainer.h"




namespace MyAnalysis {

  //Constructor
  Analysis:: Analysis(const std::string& name, ISvcLocator* pSvcLocator):
    Algorithm(name,pSvcLocator){

  }
  
  //__________________________________________________________________________
  //Destructor
  Analysis::~Analysis()
  {
    MsgStream log( messageService(), name() ) ;
    log << MSG::DEBUG << "Analysis destructor called" << endmsg;
  }
  //__________________________________________________________________________
  StatusCode Analysis::initialize()
  {
    
    MsgStream log( messageService(), name() );
    log << MSG::DEBUG <<"Analysis initialize()" << endmsg;

    // Get the StoreGateSvc
    if (service("StoreGateSvc", m_sgSvc).isFailure()) {
      log << MSG::ALWAYS << "No StoreGate!!!!!!!" << endmsg;
    }

     m_nevt=0;

    return StatusCode::SUCCESS; 
  }
  //__________________________________________________________________________
  StatusCode Analysis::finalize()
  {
    MsgStream log( messageService(), name() );
    log << MSG::DEBUG <<"Analysis finalize()" << endmsg;
    return StatusCode::SUCCESS; 
  }
  
  //__________________________________________________________________________
  StatusCode Analysis::execute()
  {
    //.............................................
    
    MsgStream log( messageService(), name() );
    log << MSG::DEBUG << "Analysis execute()" << endmsg;


   m_nevt++;

   log << MSG::INFO << " ***** Event " << m_nevt << endmsg;

// Loop over LAr hits

  std::vector <std::string> m_HitContainer;

  log << MSG::INFO <<"size of LArHit " << sizeof(LArHit) << endmsg;
  log << MSG::INFO <<"size of LArRaw " << sizeof(LArRawChannel) << endmsg;
  log << MSG::INFO <<"size of int    " << sizeof(int) << endmsg;
  log << MSG::INFO <<"size of float  " << sizeof(float) << endmsg;
  log << MSG::INFO <<"size of double " << sizeof(double) << endmsg;
  log << MSG::INFO <<"size of Indentifier " << sizeof(Identifier) << endmsg;

  Identifier my_identifier;

  m_HitContainer.push_back("LArHitEMB");
  m_HitContainer.push_back("LArHitEMEC");
  m_HitContainer.push_back("LArHitHEC");
  m_HitContainer.push_back("LArHitFCAL");
  unsigned int iHitContainer;
  log << MSG::INFO << "m_HitContainer.size " << m_HitContainer.size() << endmsg;
  for (iHitContainer=0;iHitContainer<m_HitContainer.size();iHitContainer++)
  {
    const LArHitContainer* hit_container ;
    if(m_sgSvc->retrieve(hit_container,m_HitContainer[iHitContainer])
      .isFailure()) {
      log << MSG::INFO << " cannot retrieve hit container " << endmsg;
    }  else
    {
       int ihit = 0;
       LArHitContainer::const_iterator hititer;
       for(hititer=hit_container->begin();
           hititer != hit_container->end();hititer++)
       {
          ihit++;
          LArHit* hit = (*hititer);
          if (ihit==1) my_identifier = hit->cellID();
          if (hit->energy() > 1.0) {
    //         log << MSG::INFO << hit->energy() << " " 
    //                          << hit->time()   << " " 
    //                          << hit->cellID() << endmsg;
          }
       }
     log << MSG::INFO << " number of hits found " << ihit << endmsg;
    }
  }

  return StatusCode::SUCCESS;

  int i;
  double energy=1.0;
  double time=0.;
  LArHitContainer* mycontainer = new LArHitContainer();
  LArHit* newhit;
  if (m_sgSvc->record(mycontainer,"testLArHit").isFailure()) {
   log << MSG::INFO << "failed to record testLArHit" << endmsg;
   return StatusCode::FAILURE;
  }
  int Nbhits = 1000000;
  log << MSG::INFO << " *** before creating " << Nbhits << endmsg;
  int id = getpid();
  char str[256];
  sprintf(str,"cat /proc/%d/status | grep VmSize | awk '{print($2)}' \n",id);
  std::cout << "vmSize" << std::endl;
  system(str);
  for (i=0;i<Nbhits;i++) {
    energy+=0.011;
    time+=0.025;
    newhit = new LArHit(my_identifier,energy,time);
    mycontainer->push_back(newhit);
  }
  log << MSG::INFO << " *** after  creating " << Nbhits << endmsg;
  std::cout << "vmSize" << std::endl;
  system(str);


// LarRawChannel

  LArRawChannelCollection* rawcontainer = new LArRawChannelCollection();
  LArRawChannel* rawchannel;
  if (m_sgSvc->record(rawcontainer,"testLArRaw").isFailure()) {
     log << MSG::INFO << "failed to record testLArRaw" << endmsg;
     return StatusCode::FAILURE;
  }
  log << MSG::INFO << " *** before creating Raw" << Nbhits << endmsg; 
  std::cout << "vmSize" << std::endl;
  system(str);
  for (i=0;i<Nbhits;i++) {
      rawchannel = new LArRawChannel();
      rawcontainer->push_back(rawchannel);
  }
  log << MSG::INFO << " *** after  creating " << Nbhits << endmsg;
  std::cout << "vmSize" << std::endl;
  system(str);

  return StatusCode::SUCCESS;
 }
 
} // end of namespace bracket
