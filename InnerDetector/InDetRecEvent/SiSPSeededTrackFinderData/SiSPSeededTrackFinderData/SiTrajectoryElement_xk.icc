/*
  Copyright (C) 2002-2019 CERN for the benefit of the ATLAS collaboration
*/

#include <type_traits>

///////////////////////////////////////////////////////////////////
// Search clusters compatible with track
///////////////////////////////////////////////////////////////////

template<typename T>
int InDet::SiTrajectoryElement_xk::searchClustersSub
(Trk::PatternTrackParameters& Tp, SiClusterLink_xk* L) {
  if (not m_useassoTool) {
    if (not m_stereo) {
      if (m_ndf == 2) {
        return searchClustersWithoutStereoPIX<T>(Tp, L);
      } else {
        return searchClustersWithoutStereoSCT<T>(Tp, L);
      }
    } else {
      return searchClustersWithStereo<T>(Tp, L);
    }
  } else {
    if (not m_stereo) {
      if (m_ndf == 2) {
        return searchClustersWithoutStereoAssPIX<T>(Tp, L,*m_prdToTrackMap);
      } else {
        return searchClustersWithoutStereoAssSCT<T>(Tp, L,*m_prdToTrackMap);
      }
    } else {
      return searchClustersWithStereoAss<T>(Tp, L, *m_prdToTrackMap);
    }
  }
}

///////////////////////////////////////////////////////////////////
// Search closest cluster with stereo angle
///////////////////////////////////////////////////////////////////

template <typename T>
int InDet::SiTrajectoryElement_xk::searchClustersWithStereo
(Trk::PatternTrackParameters& Tp,InDet::SiClusterLink_xk* L) 
{
  if (m_detstatus<=0) return 0;

  int nl     = 0;
  double P0  = Tp.par()[0];
  double P1  = Tp.par()[1];
  double PV0 = Tp.cov()[0];
  double PV1 = Tp.cov()[1];
  double PV2 = Tp.cov()[2];
  double Xc  = m_xi2maxlink;
  double Xl  = m_xi2maxlink;
  double Xm  = m_xi2max    ;

  const InDet::SiCluster* cl = nullptr;

  T* sibegin = std::any_cast<T>(&m_sibegin);
  T* siend = std::any_cast<T>(&m_siend);
  if (sibegin==nullptr or siend==nullptr) return 0;

  for (T p=*sibegin; p!=*siend; ++p) {
    const InDet::SiCluster* c = static_cast<const InDet::SiCluster*>(*p);
    const Amg::Vector2D&    M = c->localPosition();
    const Amg::MatrixX&     V = c->localCovariance();

    double MV0 = V(0,0);
    double MV1 = V(1,0);
    double MV2 = V(1,1);
    double v0  = MV0+PV0;
    double v1  = MV1+PV1;
    double v2  = MV2+PV2;
    double r0  = M[0]-P0;
    double r1  = M[1]-P1;
    double d   = v0*v2-v1*v1; if(d<=0.) continue; d=1./d;
    double x   = (r0*(r0*v2-r1*v1)+r1*(r1*v0-r0*v1))*d;
    if(x > Xc) continue;

    r1  = fabs(r1+d*((PV1*v2-PV2*v1)*r0+(PV2*v0-PV1*v1)*r1));  
    x  -= (r1*r1)/MV2                                       ;
    r1 -= m_halflenght                                      ;
    
    if(r1 > 0. &&  (x+=((r1*r1)/PV2)) > Xc) continue;

    if(x < Xm) {
      InDet::SiClusterLink_xk l(c,x);
      for(int i=0; i!=nl; ++i) L[i].Comparison(l);
      if(nl<10) L[nl++]=l; else Xm=L[9].xi2();
      Xc = Xm+6.;
    }
    else if(!nl && x < Xl) {Xl = x; Xc = x+6.; cl = c;}
  }
  if(cl && !nl) {L[nl++].Set(cl,Xl);}
  return nl;
}

///////////////////////////////////////////////////////////////////
// Search closest cluster without stereo angle for pixels
///////////////////////////////////////////////////////////////////

template <typename T>
int InDet::SiTrajectoryElement_xk::searchClustersWithoutStereoPIX
(Trk::PatternTrackParameters& Tp,InDet::SiClusterLink_xk* L) 
{
  if (m_detstatus<=0) return 0;

  int nl     = 0;
  double P0  = Tp.par()[0];
  double P1  = Tp.par()[1];
  double PV0 = Tp.cov()[0];
  double PV1 = Tp.cov()[1];
  double PV2 = Tp.cov()[2];
  double Xc  = m_xi2maxlink;
  double Xm  = m_xi2max    ;

  const InDet::SiCluster* cl = nullptr;

  T* sibegin = std::any_cast<T>(&m_sibegin);
  T* siend = std::any_cast<T>(&m_siend);
  if (sibegin==nullptr or siend==nullptr) return 0;

  for (T p=*sibegin; p!=*siend; ++p) {
    const InDet::SiCluster* c = static_cast<const InDet::SiCluster*>(*p); 
    const Amg::Vector2D& M = c->localPosition();

    double MV0 = c->width().phiR();
    double MV2 = c->width().z   ();

    double r0  = M[0]-P0, r02 = r0*r0; 
    double r1  = M[1]-P1, r12 = r1*r1;

    double v0  = .08333*(MV0*MV0)+PV0; if(r02 >(Xc*v0)) continue;
    double v2  = .08333*(MV2*MV2)+PV2; if(r12 >(Xc*v2)) continue;
    double v1  =                  PV1;
    double d   = v0*v2-v1*v1;          if(   d<=0.    ) continue;
    double x   = (r02*v2+r12*v0-(r0*r1)*(2.*v1))/d;

    if(x>Xc) continue;

    if(x < Xm) {
      InDet::SiClusterLink_xk l(c,x);
      for(int i=0; i!=nl; ++i) L[i].Comparison(l);
      if(nl<10) L[nl++]=l; else Xm=L[9].xi2();
      Xc = Xm;
    }
    else if(!nl) {Xc = x; cl = c;}
  }
  if(cl && !nl) {L[nl++].Set(cl,Xc);}
  return nl;
} 

///////////////////////////////////////////////////////////////////
// Search closest cluster without stereo angle for SCT 
///////////////////////////////////////////////////////////////////

template <typename T>
int InDet::SiTrajectoryElement_xk::searchClustersWithoutStereoSCT
(Trk::PatternTrackParameters& Tp,InDet::SiClusterLink_xk* L) 
{
  if (m_detstatus<=0) return 0;

  int nl     = 0;
  double P0  = Tp.par()[0];
  double P1  = Tp.par()[1];
  double PV0 = Tp.cov()[0];
  double PV1 = Tp.cov()[1];
  double PV2 = Tp.cov()[2];
  double Xc  = m_xi2maxlink;
  double Xm  = m_xi2max    ;

  const InDet::SiCluster* cl = nullptr;

  T* sibegin = std::any_cast<T>(&m_sibegin);
  T* siend = std::any_cast<T>(&m_siend);
  if (sibegin==nullptr or siend==nullptr) return 0;

  for (T p=*sibegin; p!=*siend; ++p) {
    const InDet::SiCluster* c = static_cast<const InDet::SiCluster*>(*p); 
    const Amg::Vector2D& M = c->localPosition();

    double MV0 = c->width().phiR()   ;
    double v0  = .08333*(MV0*MV0)+PV0;   
    double r0  = M[0]-P0;
    double d   = 1./v0;
    double x   = (r0*r0)*d;
    
    if(x>Xc) continue;
    
    double dP1 = (P1-M[1])+PV1*d*r0;

    if(fabs(dP1) > m_halflenght) {

      double r1; 
      dP1 > m_halflenght ? r1 = m_halflenght-P1 : r1 = -(m_halflenght+P1);
      
      double v1 = PV1;
      double v2 = PV2;  
      d = v0*v2-v1*v1  ; if(d<=0.) continue; 
      x = (r0*(r0*v2-r1*v1)+r1*(r1*v0-r0*v1))/d;
      if(x>Xc) continue;
    }

    if(x < Xm) {
      InDet::SiClusterLink_xk l(c,x);
      for(int i=0; i!=nl; ++i) L[i].Comparison(l);
      if(nl<10) L[nl++]=l; else Xm=L[9].xi2();
      Xc = Xm;
    }
    else if(!nl) {Xc = x; cl = c;}
  }
  if(cl && !nl) {L[nl++].Set(cl,Xc);}
  return nl;
}

///////////////////////////////////////////////////////////////////
// Search closest cluster with stereo angle
///////////////////////////////////////////////////////////////////

template <typename T>
int InDet::SiTrajectoryElement_xk::searchClustersWithStereoAss
(Trk::PatternTrackParameters& Tp,InDet::SiClusterLink_xk* L, const Trk::PRDtoTrackMap &prd_to_track_map) 
{
  if (m_detstatus<=0) return 0;

  int nl     = 0;
  double P0  = Tp.par()[0];
  double P1  = Tp.par()[1];
  double PV0 = Tp.cov()[0];
  double PV1 = Tp.cov()[1];
  double PV2 = Tp.cov()[2];
  double Xc  = m_xi2maxlink;
  double Xl  = m_xi2maxlink;
  double Xm  = m_xi2max    ;

  const InDet::SiCluster* cl = nullptr;

  T* sibegin = std::any_cast<T>(&m_sibegin);
  T* siend = std::any_cast<T>(&m_siend);
  if (sibegin==nullptr or siend==nullptr) return 0;
  for (T p=*sibegin; p!=*siend; ++p) {
    const InDet::SiCluster* c = static_cast<const InDet::SiCluster*>(*p); 

    if (prd_to_track_map.isUsed(*c)) continue;
    const Amg::Vector2D& M = c->localPosition();
    const Amg::MatrixX& V = c->localCovariance();

    double MV0 = V(0,0);
    double MV1 = V(1,0);
    double MV2 = V(1,1);
    double v0  = MV0+PV0;
    double v1  = MV1+PV1;
    double v2  = MV2+PV2;
    double r0  = M[0]-P0;
    double r1  = M[1]-P1;
    double d   = v0*v2-v1*v1;
    if(d<=0.) continue;
    d=1./d;
    double x   = (r0*(r0*v2-r1*v1)+r1*(r1*v0-r0*v1))*d;
    if(x > Xc) continue;

    r1  = fabs(r1+d*((PV1*v2-PV2*v1)*r0+(PV2*v0-PV1*v1)*r1));  
    x  -= (r1*r1)/MV2                                       ;
    r1 -= m_halflenght                                      ;
    
    if(r1 > 0. &&  (x+=((r1*r1)/PV2)) > Xc) continue;

    if(x < Xm) {
      InDet::SiClusterLink_xk l(c,x);
      for(int i=0; i!=nl; ++i) L[i].Comparison(l);
      if(nl<10) L[nl++]=l;
      else Xm=L[9].xi2();
      Xc = Xm+6.;
    }
    else if(!nl && x < Xl) {Xl = x; Xc = x+6.; cl = c;}
  }
  if(cl && !nl) {L[nl++].Set(cl,Xl);}
  return nl;
}

///////////////////////////////////////////////////////////////////
// Search closest cluster without stereo angle for pixels
///////////////////////////////////////////////////////////////////

template <typename T>
int InDet::SiTrajectoryElement_xk::searchClustersWithoutStereoAssPIX
(Trk::PatternTrackParameters& Tp,InDet::SiClusterLink_xk* L, const Trk::PRDtoTrackMap &prd_to_track_map)
{
  if (m_detstatus<=0) return 0;

  int nl     = 0;
  double P0  = Tp.par()[0];
  double P1  = Tp.par()[1];
  double PV0 = Tp.cov()[0];
  double PV1 = Tp.cov()[1];
  double PV2 = Tp.cov()[2];
  double Xc  = m_xi2maxlink;
  double Xm  = m_xi2max    ;

  const InDet::SiCluster* cl = nullptr;

  T* sibegin = std::any_cast<T>(&m_sibegin);
  T* siend = std::any_cast<T>(&m_siend);
  if (sibegin==nullptr or siend==nullptr) return 0;

  for (T p=*sibegin; p!=*siend; ++p) {
    const InDet::SiCluster* c = static_cast<const InDet::SiCluster*>(*p);
    if (prd_to_track_map.isUsed(*c)) continue;
    const Amg::Vector2D& M = c->localPosition();

    double MV0 = c->width().phiR();
    double MV2 = c->width().z   ();

    double r0  = M[0]-P0, r02 = r0*r0; 
    double r1  = M[1]-P1, r12 = r1*r1;

    double v0  = .08333*(MV0*MV0)+PV0; if(r02 >(Xc*v0)) continue;
    double v2  = .08333*(MV2*MV2)+PV2; if(r12 >(Xc*v2)) continue;
    double v1  =                  PV1;
    double d   = v0*v2-v1*v1;          if(   d<=0.    ) continue;
    double x   = (r02*v2+r12*v0-(r0*r1)*(2.*v1))/d;

    if(x>Xc) continue;

    if(x < Xm) {
      InDet::SiClusterLink_xk l(c,x);
      for(int i=0; i!=nl; ++i) L[i].Comparison(l);
      if(nl<10) L[nl++]=l; else Xm=L[9].xi2();
      Xc = Xm;
    }
    else if(!nl) {Xc = x; cl = c;}
  }
  if(cl && !nl) {L[nl++].Set(cl,Xc);}
  return nl;
} 

///////////////////////////////////////////////////////////////////
// Search closest cluster without stereo angle for SCT 
///////////////////////////////////////////////////////////////////

template <typename T>
int InDet::SiTrajectoryElement_xk::searchClustersWithoutStereoAssSCT
(Trk::PatternTrackParameters& Tp,InDet::SiClusterLink_xk* L, const Trk::PRDtoTrackMap &prd_to_track_map) 
{
  if (m_detstatus<=0) return 0;

  int nl     = 0;
  double P0  = Tp.par()[0];
  double P1  = Tp.par()[1];
  double PV0 = Tp.cov()[0];
  double PV1 = Tp.cov()[1];
  double PV2 = Tp.cov()[2];
  double Xc  = m_xi2maxlink;
  double Xm  = m_xi2max    ;

  const InDet::SiCluster* cl = nullptr;

  T* sibegin = std::any_cast<T>(&m_sibegin);
  T* siend = std::any_cast<T>(&m_siend);
  if (sibegin==nullptr or siend==nullptr) return 0;

  for (T p=*sibegin; p!=*siend; ++p) {
    const InDet::SiCluster* c = static_cast<const InDet::SiCluster*>(*p); 
    if (prd_to_track_map.isUsed(*c)) continue;
    const Amg::Vector2D& M = c->localPosition();

    double MV0 = c->width().phiR()   ;
    double v0  = .08333*(MV0*MV0)+PV0;   
    double r0  = M[0]-P0;
    double d   = 1./v0;
    double x   = (r0*r0)*d;
    
    if(x>Xc) continue;
    
    double dP1 = (P1-M[1])+PV1*d*r0;

    if(fabs(dP1) > m_halflenght) {

      double r1; 
      dP1 > m_halflenght ? r1 = m_halflenght-P1 : r1 = -(m_halflenght+P1);
      
      double v1 = PV1;
      double v2 = PV2;  
      d = v0*v2-v1*v1  ; if(d<=0.) continue; 
      x = (r0*(r0*v2-r1*v1)+r1*(r1*v0-r0*v1))/d;
      if(x>Xc) continue;
    }

    if(x < Xm) {
      InDet::SiClusterLink_xk l(c,x);
      for(int i=0; i!=nl; ++i) L[i].Comparison(l);
      if(nl<10) L[nl++]=l; else Xm=L[9].xi2();
      Xc = Xm;
    }
    else if(!nl) {Xc = x; cl = c;}
  }
  if(cl && !nl) {L[nl++].Set(cl,Xc);}
  return nl;
}

///////////////////////////////////////////////////////////////////
// Set trajectory element
///////////////////////////////////////////////////////////////////

// T = InDet::SiClusterCollection::const_iterator or
//     InDet::PixelClusterCollection::const_iterator or
//     InDet::SCT_ClusterCollection::const_iterator
template <typename T>
void InDet::SiTrajectoryElement_xk::set
(int st,
 const InDet::SiDetElementBoundaryLink_xk*& dl,
 const T& sb, 
 const T& se,
 const InDet::SiCluster* si)
{
  if      (std::is_same<T, InDet::SiClusterCollection::const_iterator>::value)    m_itType = SiClusterColl;
  else if (std::is_same<T, InDet::PixelClusterCollection::const_iterator>::value) m_itType = PixelClusterColl;
  else if (std::is_same<T, InDet::SCT_ClusterCollection::const_iterator>::value)  m_itType = SCT_ClusterColl;

  m_fieldMode    = false; 
  if(m_tools->fieldTool().magneticFieldMode()!=0) m_fieldMode = true;
  m_status       = 0                       ;
  m_detstatus    = st                      ;
  m_ndist        = 0                       ;
  m_nlinksF      = 0                       ;
  m_nlinksB      = 0                       ;
  m_nholesF      = 0                       ;
  m_nholesB      = 0                       ;
  m_dholesF      = 0                       ;
  m_dholesB      = 0                       ;
  m_nclustersF   = 0                       ;
  m_nclustersB   = 0                       ;
  m_npixelsB     = 0                       ;
  m_ndfF         = 0                       ;
  m_ndfB         = 0                       ;
  m_ntsos        = 0                       ;
  m_detelement   = dl->detElement()        ;
  m_detlink      = dl                      ;
  m_surface      = &m_detelement->surface();
  m_sibegin      = sb                      ;
  m_siend        = se                      ; 
  m_cluster      = si                      ;
  m_clusterOld   = si                      ;
  m_clusterNoAdd = 0                       ;
  m_stereo       = false                   ; 
  m_xi2F         = 10000.                  ;
  m_xi2B         = 10000.                  ;
  m_xi2totalF    = 0.                      ;
  m_xi2totalB    = 0.                      ;
  m_tools->electron() ? m_xi2max = m_tools->xi2maxBrem() : m_xi2max = m_tools->xi2max();
  m_halflenght   = 0.                      ;
  m_detelement->isSCT() ? m_ndf=1 : m_ndf=2;

  if(m_tools->heavyion()) {
    if(m_ndf==2) {m_xi2max = 13.; m_xi2maxNoAdd = 13.;}
    else         {m_xi2max =  4.; m_xi2maxNoAdd =  8.;}
  }

  noiseInitiate()                          ;
  (m_detelement->isSCT() && (m_detelement->design().shape()==InDetDD::Trapezoid || m_detelement->design().shape()==InDetDD::Annulus)   ) ? 
    m_stereo = true : m_stereo = false;

  if(m_detstatus && m_ndf == 1) m_halflenght = (*sb)->width().z()*.5;

  if(!m_detstatus) {

    IdentifierHash idHash = m_detelement->identifyHash();
    if(m_ndf==2) {if(!m_tools->pixcond()->isGood(idHash)) m_detstatus = -1;}
    else         {if(!m_tools->sctcond()->isGood(idHash)) m_detstatus = -1;}
  }
  
  const Amg::Transform3D& tr = m_surface->transform();

  m_Tr[ 0] = tr(0,0); m_Tr[ 1]=tr(1,0); m_Tr[ 2]=tr(2,0);
  m_Tr[ 3] = tr(0,1); m_Tr[ 4]=tr(1,1); m_Tr[ 5]=tr(2,1);
  m_Tr[ 6] = tr(0,2); m_Tr[ 7]=tr(1,2); m_Tr[ 8]=tr(2,2);
  m_Tr[ 9] = tr(0,3); m_Tr[10]=tr(1,3); m_Tr[11]=tr(2,3);
  m_Tr[12] = m_Tr[ 9]*m_Tr[ 6]+m_Tr[10]*m_Tr[ 7]+m_Tr[11]*m_Tr[ 8];
  m_A[0] = 1.; m_A[1] = 0.; m_A[2] = 0.;
  return;
}

///////////////////////////////////////////////////////////////////
// Forward propagation for search closest cluster
///////////////////////////////////////////////////////////////////

// T = InDet::SiClusterCollection::const_iterator or
//     InDet::PixelClusterCollection::const_iterator or
//     InDet::SCT_ClusterCollection::const_iterator
template <typename T>
bool InDet::SiTrajectoryElement_xk::ForwardPropagationForClusterSeach
(int n,
 const Trk::TrackParameters& Tpa,
 const InDet::SiDetElementBoundaryLink_xk*& dl,
 const T& sb, 
 const T& se)
{
  if      (std::is_same<T, InDet::SiClusterCollection::const_iterator>::value)    m_itType = SiClusterColl;
  else if (std::is_same<T, InDet::PixelClusterCollection::const_iterator>::value) m_itType = PixelClusterColl;
  else if (std::is_same<T, InDet::SCT_ClusterCollection::const_iterator>::value)  m_itType = SCT_ClusterColl;

  m_detstatus    = 1                       ;
  m_sibegin      = sb                      ;
  m_siend        = se                      ; 
  m_detelement   = dl->detElement()        ;
  m_detlink      = dl                      ;
  m_surface      = &m_detelement->surface();
  m_detelement->isSCT() ? m_ndf=1 : m_ndf=2;
  m_halflenght   = 0.                      ;
  m_stereo       = false                   ;

  (m_detelement->isSCT() && m_detelement->design().shape()==InDetDD::Trapezoid) ? 
    m_stereo = true : m_stereo = false;

  if(m_detstatus && m_ndf == 1) m_halflenght = (*sb)->width().z()*.5;

  if(!n) {
    Trk::PatternTrackParameters Tp; if(!Tp.production(&Tpa)) return false;
    if(!propagateParameters(Tp,m_parametersPF,m_step)) return false;
 
    if(!m_parametersPF.iscovariance()) {

      double cv[15]={ .02 ,
                      0., .02,
                      0., 0.,.000001,
                      0., 0.,   0.,.000001,
                      0., 0.,   0.,   0.,.000000001};
      
      m_parametersPF.setCovariance(cv);
    }
  }
  else {
    if(!propagate(m_parametersPF,m_parametersPF,m_step)) return false;
  }
  m_nlinksF=searchClusters(m_parametersPF,m_linkF);
  return true;
}

///////////////////////////////////////////////////////////////////
// Forward propagation for search closest cluster
///////////////////////////////////////////////////////////////////

// T = InDet::SiClusterCollection::const_iterator or
//     InDet::PixelClusterCollection::const_iterator or
//     InDet::SCT_ClusterCollection::const_iterator
template <typename T>
void InDet::SiTrajectoryElement_xk::CloseClusterSeach
(Trk::PatternTrackParameters& Tpa,
 const InDet::SiDetElementBoundaryLink_xk*& dl,
 const T& sb, 
 const T& se)
{
  if      (std::is_same<T, InDet::SiClusterCollection::const_iterator>::value)    m_itType = SiClusterColl;
  else if (std::is_same<T, InDet::PixelClusterCollection::const_iterator>::value) m_itType = PixelClusterColl;
  else if (std::is_same<T, InDet::SCT_ClusterCollection::const_iterator>::value)  m_itType = SCT_ClusterColl;

  m_detstatus    = 1                       ;
  m_cluster      = 0                       ;
  m_sibegin      = sb                      ;
  m_siend        = se                      ; 
  m_detelement   = dl->detElement()        ;
  m_detlink      = dl                      ;
  m_surface      = &m_detelement->surface();
  m_detelement->isSCT() ? m_ndf=1 : m_ndf=2;
  m_halflenght   = 0.                      ;
  m_stereo       = false                   ;

  (m_detelement->isSCT() && m_detelement->design().shape()==InDetDD::Trapezoid) ? 
    m_stereo = true : m_stereo = false;
  if(m_detstatus && m_ndf == 1) m_halflenght = (*sb)->width().z()*.5;

  if(m_detlink->intersect(Tpa,m_dist) > 0 || !searchClusters(Tpa,m_linkF)) return;
  m_cluster = m_linkF[0].cluster();
  m_xi2F    = m_linkF[0].xi2    ();
}
