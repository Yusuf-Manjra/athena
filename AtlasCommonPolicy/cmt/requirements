package AtlasCommonPolicy

author David Quarrie

use LCG_Platforms *

use AtlasDoxygen AtlasDoxygen-* Tools

# This package is designed to be the base for policies and patterns that are
# common between the ATLAS offline and online environments

# Define action that implements a post-install action
action post_install "$(ATLASCOMMONPOLICYROOT)/cmt/post_install.sh $(post_install_script)"

action post_merge_rootmap "true"
# "$(ATLASCOMMONPOLICYROOT)/scripts/abuild-merge-rootmap.py"

action post_merge_genconfdb \
 "$(ATLASCOMMONPOLICYROOT)/scripts/abuild-merge-genconfdb.py"

#action post_build_tpcnvdb \
# "$(ATLASCOMMONPOLICYROOT)/scripts/abuild-gen-tpcnvdb.py $(CMTINSTALLAREA)"
action post_build_tpcnvdb \
 "true"

action all_post_constituents echo "running postaction"

#document installer install_merge_rootmap install_dir=$(CMTINSTALLAREA)/share/bin "../scripts/abuild-merge-rootmap.py"

document installer install_merge_genconfdb install_dir=$(CMTINSTALLAREA)/share/bin "../scripts/abuild-merge-genconfdb.py"

#document installer install_build_tpcnvdb install_dir=$(CMTINSTALLAREA)/share/bin "../scripts/abuild-gen-tpcnvdb.py"

# DRQ: This pattern and fragment create the runtime setup cache during "make". 
# They are retained for backwards compatibility but should be deleted at some point 
make_fragment setup_runtime_cache -header=setup_runtime_cache_header
pattern do_setup_runtime_cache \
    document setup_runtime_cache do_setup_runtime_cache

# library_no_static fragment from core CMT (renamed as library)
# to allow for shared library only to be built by default
# (instead of shared + static libraries)
# to disable this fragment/behaviour, activate tag WithStatic
tag static WithStatic
tag UnixStatic WithStatic
macro library_fragment "library" WithStatic ""
make_fragment $(library_fragment)
make_fragment application

tag_exclude no-separate-debug separate-debug

apply_tag separate-debug
macro SEPARATEDEBUG "" separate-debug&target-opt&target-linux "1"
macro_append cppflags  ""  separate-debug&target-opt&target-linux  " -g "
macro_append cflags    ""  separate-debug&target-opt&target-linux  " -g "
macro_append fflags    ""  separate-debug&target-opt&target-linux  " -g "
macro debuginfosuffix  ".debug"

make_fragment optdebug_library -header=optdebug_library_header

pattern cmake_add_command \
   private ; \
   macro dummy_for_cmake "<command>" ; \
   end_private

pattern cmake_add_definitions \
   private ; \
   macro dummy_for_cmake "<defines>" ; \
   end_private
	
pattern cmake_add_dependency \
   private ; \
   macro dummy_for_cmake "<package>" "<packages>"; \
   end_private
	
pattern cmake_add_generated_files \
   private ; \
   macro dummy_for_cmake "<library>" "<files>" ; \
   end_private
	
pattern cmake_add_libraries \
   private ; \
   macro dummy_for_cmake "<target>" "<libraries>" ; \
   end_private
	
pattern cmake_conditional_target \
   private ; \
   macro dummy_for_cmake "<target>" "<type>" ; \
   end_private
	
pattern cmake_ignore_import \
   private ; \
   macro dummy_for_cmake "<library>" "<import>" ; \
   end_private
	
pattern cmake_set_macro \
   private ; \
   macro dummy_for_cmake "<macro>" "<value>" ; \
   end_private
	
pattern cmake_override_library_type \
   private ; \
   macro dummy_for_cmake "<library>" "<type>" ; \
   end_private
	
pattern optdebug_library \
   private ; \
   macro apply_optdebug_library "without_optdebug_library" separate-debug&target-opt&target-linux "with_optdebug_library" ; \
   apply_pattern $(apply_optdebug_library) name=<name>  ; \
   end_private

pattern with_optdebug_library \
   private ; \
   document optdebug_library <name>_optdebug_library library=<name>  ; \
   macro_append <name>_optdebug_library_dependencies " <name>" ; \
   macro_append <name>_library_dependencies " <name>_optdebug_library " ; \ 
   action <name>_NICOS_Fix_debuginfo ' if test ! -z "$(NICOS_PROJECT_HOME)" -a ! -z "$(NICOS_PROJECT_RELNAME)" -a \ 
                                               ! -z "$(NICOS_COPY_HOME)"    -a ! -z "$(NICOS_PROJECT_RELNAME_COPY)" -a \ 
 					         -x /usr/lib/rpm/debugedit ; then \ 
                              echo fixing debug info in NICOS ; \
			      if env test -l "$(NICOS_PROJECT_RELNAME_COPY)" -gt -l "$(NICOS_PROJECT_RELNAME)" ; then \
			           echo Warning: new path ${NICOS_PROJECT_RELNAME_COPY} is longer than old path ${NICOS_PROJECT_RELNAME} - fixing will not work ;\
			      else \
			           readelf -wl $(bin)$(library_prefix)<name>.$(shlibsuffix) | grep '\/\/' && echo WARNING above lines might cause problems with debugedit - notice the double slash; \
 	                           /usr/lib/rpm/debugedit -b $(NICOS_COPY_HOME)/$(NICOS_PROJECT_RELNAME) -d \ 
 	                                                $(NICOS_COPY_HOME)/$(NICOS_PROJECT_RELNAME_COPY) \ 
 	                                             $(bin)$(library_prefix)<name>.$(shlibsuffix); fi; \
			      fi; ' ; \
   macro_append <name>_NICOS_Fix_debuginfo_dependencies "" \
         NICOSrel_nightly " <name> " ; \ 
   macro_append <name>_optdebug_library_dependencies "" \
         NICOSrel_nightly " <name>_NICOS_Fix_debuginfo " ; \ 
   end_private

pattern without_optdebug_library \
   private ; \
   macro dummy_for_library "<name>" ; \
   end_private

action checkreq "true"
macro_append all_dependencies " checkreq "

# translate source location in debug information to the AFS location where nightly will be installed 
# protect also against only partial variable definitions 

macro NICOS "NICOS${NICOS_PROJECT_RELNAME}" 
apply_tag $(NICOS) 

macro NICOS_TMP_A "NICOS$(NICOS_PROJECT_HOME)" 
macro NICOS_TMP_B "NICOS$(NICOS_COPY_HOME)" 
macro NICOS_TMP_C "NICOS$(NICOS_PROJECT_RELNAME_COPY)" 

apply_tag $(NICOS_TMP_A) 
apply_tag $(NICOS_TMP_B) 
apply_tag $(NICOS_TMP_C) 

tag_exclude NICOS NICOSrel_nightly 

# this is a two stage translation. First we replace the NICOS_PROJECT_HOME to NICOS_COPY_HOME here, keeping the longer "rel_nightly" in place 
# then in the second stage after building the library, we relace "rel_nightly" with the shorter rel_N, with N a single digit. The debugedit tools 
# requires that the new path is shorter than the old path. ccache requires that the replaced and original path do not depend on the nightly it runs.  
macro_append AtlasCommonPolicy_cppflags "" \ 
      NICOSrel_nightly ' -fdebug-prefix-map=$(NICOS_PROJECT_HOME)=$(NICOS_COPY_HOME) '
	 
#--------------------------------------------
## Filling the JOBOPTSEARCHPATH list with list of currently visible installation areas
#--------------------------------------------

#path_remove  JOBOPTSEARCHPATH "InstallArea"
#path_prepend JOBOPTSEARCHPATH `${ATLASPOLICYROOT}/cmt/jo.sh`

cmtpath_pattern \
  path JOBOPTSEARCHPATH "" ; \
  path_remove PYTHONPATH "$(cmt_installarea_prefix)" ; \
  path_remove DATAPATH "$(cmt_installarea_prefix)" ; \
  path_remove ROOTMAPSEARCHPATH "$(cmt_installarea_prefix)" ; \
  path_remove XMLPATH "$(cmt_installarea_prefix)"

cmtpath_pattern \
  path_prepend JOBOPTSEARCHPATH  "" \
               <project>_with_installarea&Unix "<path>/$(cmt_installarea_prefix)/jobOptions" ; \
  path_prepend PYTHONPATH        "" \
               <project>_with_installarea&Unix "<path>/$(cmt_installarea_prefix)/python" ; \
  path_prepend PYTHONPATH        "" \
               <project>_with_installarea&Unix "<path>/$(cmt_installarea_prefix)/${CMTCONFIG}/lib/python$(Python_version)" ; \
  path_prepend DATAPATH          "" \
               <project>_with_installarea&Unix "<path>/$(cmt_installarea_prefix)/share" ; \
  path_prepend DATAPATH          "" \
               <project>_with_installarea&Unix "<path>/$(cmt_installarea_prefix)/${CMTCONFIG}/share" ; \
  path_prepend ROOTMAPSEARCHPATH "" \
               <project>_with_installarea&Unix "<path>/$(cmt_installarea_prefix)/rootmap" ; \
  path_prepend XMLPATH           "" \
               <project>_with_installarea&Unix "<path>/$(cmt_installarea_prefix)/XML"

cmtpath_pattern \
  path_prepend JOBOPTSEARCHPATH "."

# temporary fix for https://its.cern.ch/jira/browse/ATEAM-151
#  import and fix merge_files.py from GaudiPolicy
macro merge_componentslist_cmd "python $(AtlasCommonPolicy_root)/scripts/merge_files.py"
macro merge_rootmap_cmd "python $(AtlasCommonPolicy_root)/scripts/merge_files.py"
macro merge_genconfDb_cmd "python $(AtlasCommonPolicy_root)/scripts/merge_files.py"
macro merge_componentslist_cmd "python $(AtlasCommonPolicy_root)/scripts/merge_files.py"
