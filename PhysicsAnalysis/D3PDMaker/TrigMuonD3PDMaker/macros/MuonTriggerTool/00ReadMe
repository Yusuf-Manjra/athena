*****************************************************************
*** standalone muon trigger matching code for ntuple analysis ***
*****************************************************************

The package will work on NTUP_SMWZ or any other ntuples which
includes MuonTriggerD3PDMaker blocks.

- currenty works for single muon trigger only
- di-muon triggers will be available in the near future
- e-mu trigger is under consideration

Installation
============
0) change directory to cmd

1) type "setup.sh <path to header file>"
     where <path to header file> is the path to the header file generated by
     MakeSelector() or MakeChain()
     [the generated header file by MakeSelector() or MakeChain()
      should contain the following variables
      - trig_DB_SMK
      - trig_Nav_n
      - trig_Nav_chain_ChainId
      - trig_Nav_chain_RoIType
      - trig_Nav_chain_RoIIndex
      - trig_L1_mu_thrName
      - trig_RoI_EF_mu_Muon_ROI
      - trig_RoI_EF_mu_TrigMuonEFInfoContainer
      - trig_EF_trigmuonef_track_SA_pt
      - trig_EF_trigmuonef_track_SA_eta
      - trig_EF_trigmuonef_track_SA_phi
      - trig_EF_trigmuonef_track_CB_pt
      - trig_EF_trigmuonef_track_CB_eta
      - trig_EF_trigmuonef_track_CB_phi
      - trig_EF_trigmugirl_track_CB_pt
      - trig_EF_trigmugirl_track_CB_eta
      - trig_EF_trigmugirl_track_CB_phi
     ]

2) type "make"


Usage
=====
0) in your root analysis macro, include the following line
   "gSystem->Load("<path to MuonTriggerTool>/lib/libMuonTriggerTool.so");"

1) in your analysis code, include the following line
   #include "MuonTriggerTool/MuonTriggerMatching.h"

2) in your analysis code, make a MuonTriggerMatching object by
    MuonTriggerMatching tool = MuonTriggerTool(<class object>);
   where <class object> is an instance of the class defined in header file
   produced by "MakeClass()" or "MakeSelector()"

   RECOMMENDED: if you have "physicsMeta/TrigConfTree" available in your
   analysis job try the following
    MuonTriggerMatching tool = MuonTriggerTool(<class object>, <TTree pointer for physicsMeta/TrigConfTree);

3) in event loop, call
    tool.match(<eta>, <phi>, <chain name>);
   where <eta>, <phi> are offline muon information and <chain name> is an EF muon trigger name, ex. "EF_mu18_MG"

   if you need to use an EF chain with different level1 threshold, try
    tool.match(<eta>, <phi>, <chain name>, <level1 threshold>);
   where <level1 threshol> is Level1 muon threshold name, ex. "L1_MU11"

   the method returns true if matching trigger object is found false otherwise


as a reference simple example files are available in "run" directory,
which uses header file generated by 'MakeClass("physics")'


List of triggers available for matching
with the following constructor
 tool = MuonTriggerTool(<class object>)
=======================================
EF_mu10
EF_mu10_loose
EF_mu13
EF_mu13_MG
EF_mu15
EF_mu15i
EF_mu15i_medium
EF_mu18
EF_mu18_medium
EF_mu18_MG
EF_mu18_MG_medium
EF_mu20
EF_mu20_medium
EF_mu20_MG
EF_mu20_MG_medium
EF_mu20i
EF_mu20i_medium
EF_mu22
EF_mu22_medium
EF_mu22_MG
EF_mu22_MG_medium
EF_mu24_MG_medium
EF_mu24_MG_tight
EF_mu24_medium
EF_mu24_tight
EF_mu30_MG_medium
EF_mu30_MG_tight
EF_mu30_medium
EF_mu30_tight
EF_mu4
EF_mu40_MSonly_barrel
EF_mu40_MSonly_barrel_medium
EF_mu40_MSonly_tight
EF_mu40_MSonly_tighter
EF_mu6
# eof
