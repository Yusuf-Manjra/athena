<project name="Standard Operations" 
         default="standard.noop"
         basedir=".">
         
  <description>
    Standard Operations
    </description>

  <!-- Noop =================================================================-->  

  <target name="standard.noop"
          description="Do nothing">
    </target>
    
  <!-- Visualise ============================================================-->  

  <target name="standard.viz"
          description="Create flow of build file">
    <taskdef name="vizant" classname="net.sourceforge.vizant.Vizant"/> 
    <vizant antfile="${ant}/build.xml" outfile="${doc}/build.dot"/>
    <exec executable="dot">
      <arg line="-Tpng ${doc}/build.dot -o ${doc}/build.png"/> 
      </exec>   
    </target>
    
  <!-- FindBugs =============================================================-->  

  <target name="standard.findbugs"
          description="Find Potential Bugs">
    <pathconvert targetos="unix" property="classpath.run" refid="classpath.run"/>
	  <exec executable="${FindBugs.exe}">
		  <arg value="-textui"/>
		  <arg value="-low"/>
		  <arg value="-auxclasspath"/>
		  <arg value="${classpath.run}"/>
		  <arg value="${lib}/${name}.jar"/>
      </exec>
    </target>

  <target name="standard.findbugs.jar"
          description="Find Potential Bugs (in non-default jar)">
    <pathconvert targetos="unix" property="classpath.run" refid="classpath.run"/>
	  <exec executable="${FindBugs.exe}">
		  <arg value="-textui"/>
		  <arg value="-low"/>
		  <arg value="-auxclasspath"/>
		  <arg value="${classpath.run}"/>
		  <arg value="${lib}/${name}${jar.name}.jar"/>
      </exec>
    </target>
    
  <!-- UmlGraph =============================================================-->  

  <target name="standard.uml"
          description="Create UML Graph">
    <pathconvert targetos="unix" property="classpath.run" refid="classpath.run"/>
	  <apply executable="javadoc" dest="${build}" parallel="false">
		  <arg value="-classpath"/>
		  <arg value="${classpath.run}"/>
		  <arg value="-source"/>
		  <arg value="1.5"/>
		  <arg value="-docletpath"/>
		  <arg value="${UmlGraph.core}"/>
		  <arg line="-doclet UmlGraph"/>
		  <arg value="-all"/>
		  <arg value="-output"/>
		  <targetfile/>
		  <srcfile/>
		  <fileset dir="${src}"/>
		  <mapper type="glob" from="*.java" to="*.dot"/>
	    </apply>
	  <apply executable="dot" dest="${build}" parallel="false">
		  <arg value="-Tgif"/>
		  <arg value="-o"/>
		  <targetfile/>
		  <srcfile/>
		  <fileset dir="${build}"/>
		  <mapper type="glob" from="*.dot" to="*.gif"/>
	    </apply>
    <copy todir="${doc}/UML" flatten="true">
      <fileset dir="${build}" includes="**/*.gif"/>
      <fileset dir="${build}" includes="**/*.ps"/>
      </copy>
    <echo file="${doc}/UML/imagedir.sh" append="false">
#/bin/sh
cd ${doc}/UML
rm -f index.html
echo "&lt;ul&gt;" &gt;&gt; index.html 
for I in `ls *.gif`; do
  N=`basename $I .gif`
  echo $N
  echo "&lt;li&gt;&lt;A HREF=$I&gt;$N&lt;/A&gt;&lt;/li&gt;" &gt;&gt; index.html
  done
echo "&lt;/ul&gt;" &gt;&gt; index.html 
      </echo>
    <chmod dir="${doc}/UML" perm="a+rx" includes="imagedir.sh"/>    
	  <exec executable="${doc}/UML/imagedir.sh"/>
    </target>
    
  <!-- AspectJ ==============================================================-->  

  <target name="standard.aspectj"
          description="Compile using AspectJ">
    <taskdef resource="org/aspectj/tools/ant/taskdefs/aspectjTaskdefs.properties"/> 
    <iajc srcdir="${src}"
          destDir="${build}">
      <classpath>
        <pathelement location="${AspectJ.rt}"/>
        </classpath>
      </iajc>
    </target>

  <!-- Info =================================================================-->  

  <target name="standard.info"
          description="Create Info class">
    <mkdir dir="${place}"/>
    <echo file="${place}/Info.java" append="false">
package ${package};

/** &lt;code&gt;Info&lt;/code&gt; class. 
  * Created by Ant. */
public class Info {

  /** Get builder version. 
    * @return The version and build time of the package. */
  final static String version() {
    return _version + " [" + _build + "]";
    }

  private static final String _version = "${version}";

  private static final String _build   = "${TSTAMP}";

  }
      </echo>
    </target>

  <!-- Init =================================================================-->  

  <target name="standard.init">
    <mkdir dir="${build}"/>
    <mkdir dir="${lib}"/>
    <mkdir dir="${run}"/>
    <mkdir dir="${doc}/JavaDoc"/>
    <mkdir dir="${doc}/Src"/>
    <mkdir dir="${doc}/Together"/>
    <mkdir dir="${bin}"/>
    <mkdir dir="${etc}"/>
    <mkdir dir="${misc}"/>
    <mkdir dir="${tog}"/>
    <mkdir dir="${jude}"/>
    </target>

  <!-- Post =================================================================-->  

  <target name="standard.post" 
          description="Put on WWW"
          if="local">
  <property name="www" value="/home/hrivnac/WWW/Activities/Packages"/>
    <copy todir="${www}">
      <fileset dir="${top}">
        <include name="${name}-dist.tar.gz"/>
        </fileset>
      </copy>
    <copy todir="${www}/${name}">
      <fileset dir="${top}/doc">
        <include name="**/*"/>
        </fileset>
      </copy>
    <delete file="${top}/${name}-dist.tar.gz">
      </delete>
    </target>
    
  <!-- Compile ==============================================================--> 
  
  <target name="standard.compile" 
          description="Compile sources">
    <antcall target="standard.compile.${java.version}"
             inheritAll="yes"
             inheritRefs="yes"/>
    </target>

  <target name="standard.compile.1.5.0-beta" 
          description="Compile 1.5 sources using 1.5 SDK">
    <javac destdir="${build}"
           debug="yes"
           optimize="yes"
           source="1.5">
      <compilerarg value="-Xlint:unchecked"/>
      <!--compilerarg value="-Xlint:deprecation"/-->
      <src path="${src}"/>
      <src path="${build}"/>
      <classpath>
        <path refid="classpath.build"/>
        </classpath>
      </javac>
    </target>

  <target name="standard.compile.1.5.0-beta2" 
          description="Compile 1.5 sources using 1.5 SDK">
    <javac destdir="${build}"
           debug="yes"
           optimize="yes"
           source="1.5">
      <compilerarg value="-Xlint:unchecked"/>
      <!--compilerarg value="-Xlint:deprecation"/-->
      <src path="${src}"/>
      <src path="${build}"/>
      <classpath>
        <path refid="classpath.build"/>
        </classpath>
      </javac>
    </target>

  <target name="standard.compile.1.5.0-rc" 
          description="Compile 1.5 sources using 1.5 SDK">
    <javac destdir="${build}"
           debug="yes"
           optimize="yes"
           source="1.5">
      <compilerarg value="-Xlint:unchecked"/>
      <!--compilerarg value="-Xlint:deprecation"/-->
      <src path="${src}"/>
      <src path="${build}"/>
      <classpath>
        <path refid="classpath.build"/>
        </classpath>
      </javac>
    </target>

  <target name="standard.compile.1.5.0" 
          description="Compile 1.5 sources using 1.5 SDK">
    <javac destdir="${build}"
           debug="yes"
           optimize="yes"
           source="1.5">
      <compilerarg value="-Xlint:unchecked"/>
      <!--compilerarg value="-Xlint:deprecation"/-->
      <src path="${src}"/>
      <src path="${build}"/>
      <classpath>
        <path refid="classpath.build"/>
        </classpath>
      </javac>
    </target>

  <target name="standard.compile.1.5.0_01" 
          description="Compile 1.5 sources using 1.5 SDK">
    <javac destdir="${build}"
           debug="yes"
           optimize="yes"
           source="1.5">
      <compilerarg value="-Xlint:unchecked"/>
      <!--compilerarg value="-Xlint:deprecation"/-->
      <src path="${src}"/>
      <src path="${build}"/>
      <classpath>
        <path refid="classpath.build"/>
        </classpath>
      </javac>
    </target>

  <target name="standard.compile.1.5.0_02" 
          description="Compile 1.5 sources using 1.5 SDK">
    <javac destdir="${build}"
           debug="yes"
           optimize="yes"
           source="1.5">
      <compilerarg value="-Xlint:unchecked"/>
      <!--compilerarg value="-Xlint:deprecation"/-->
      <src path="${src}"/>
      <src path="${build}"/>
      <classpath>
        <path refid="classpath.build"/>
        </classpath>
      </javac>
    </target>

  <target name="standard.compile.1.4.2" 
          description="Compile 1.5 sources using 1.4 SDK">
    <copy todir="${lib}" flatten="true" failonerror="no" file="${Generics.gjc-rt}"/>
    <copy todir="${lib}" flatten="true" failonerror="no" file="${Generics.collect}"/>
    <javac destdir="${build}"
           fork="yes"
           debug="yes"
           optimize="yes"
           source="1.5"
           target="jsr14"
           bootclasspath="${lib}/gjc-rt.jar:${lib}/collect.jar:${java.home}/lib/rt.jar">
      <compilerarg line="-J-Xbootclasspath/p:${lib}/gjc-rt.jar"/>
      <src path="${src}"/>
      <src path="${build}"/>
      <classpath>
        <path refid="classpath.build"/>
        </classpath>
      </javac>
    </target>

  <!-- JAR ==================================================================-->  

  <target name="standard.jar" 
          description="Create JAR">
    <jar jarfile="${lib}/${name}${jar.name}.jar" index="yes">
      <fileset dir="${build}" includes="${scope}**/*.class"/>
      <fileset dir="${src}"   includes="${scope}**/*.jdo"/>
      <fileset dir="${src}"   includes="${scope}**/images/*.gif"/>
      <fileset dir="${src}"   includes="log4j.properties"/>
      <manifest>
        <attribute name="Created-By" value="${user.name}"/>
        <attribute name="AppName"    value="${name}${jar.name}"/>
        <attribute name="AppVersion" value="${version} ${TSTAMP}"/>
        <attribute name="Main-Class" value="${main}"/>
        </manifest>
      </jar>
    </target>

  <target name="standard.mjar" 
          description="Create Manifest JAR">
    <path id="libs">
      <fileset dir="${lib}">
        <include name="*.jar"/>
        <exclude name="*.exe.jar"/>
        </fileset>
      </path>
    <pathconvert targetos="unix" pathsep=" " property="libs" refid="libs">
      <map from="${lib}/" to=""/>
      </pathconvert>
    <jar jarfile="${lib}/${name}${jar.name}.exe.jar">
      <manifest>
        <attribute name="Created-By" value="${user.name}"/>
        <attribute name="AppName"    value="${name}${jar.name}"/>
        <attribute name="AppVersion" value="${version} ${TSTAMP}"/>
        <attribute name="Class-Path" value="${libs}"/>
        <attribute name="Main-Class" value="${main}"/>
        </manifest>
      </jar>
    </target>

  <!-- Distribution =========================================================-->  

  <target name="standard.dist" 
          description="Create complete distribution">
    <tar tarfile="${top}/${name}-dist.tar.gz" 
         longfile="gnu" 
         compression="gzip">
      <tarfileset dir="${bin}"  prefix="${name}/bin" mode="555">
        <include name="**"/>
        </tarfileset>
      <tarfileset dir="${doc}"  prefix="${name}/doc">
        <include name="**"/>
        </tarfileset>
      <tarfileset dir="${lib}"  prefix="${name}/lib">
        <include name="**"/>
        </tarfileset>
      <tarfileset dir="${etc}"  prefix="${name}/etc">
        <include name="**"/>
        </tarfileset>
      <tarfileset dir="${misc}" prefix="${name}/misc">
        <include name="**"/>
        </tarfileset>
      <tarfileset dir="${src}"  prefix="${name}/src">
        <include name="**"/>
        </tarfileset>
      <tarfileset dir="${build}"  prefix="${name}/build">
        <include name="**/*.java"/>
        <include name="**/*.properties"/>
        <include name="**/*.ser"/>
        </tarfileset>
      <tarfileset dir="${config.db}"  prefix="${name}/ant">
        <include name="standard.*"/>
        <include name="config-dist.properties"/>
        </tarfileset>
      <tarfileset dir="${ant}"  prefix="${name}/ant">
        <include name="**"/>
        <exclude name="config-local.properties"/>
        </tarfileset>
      <tarfileset dir="${tog}"  prefix="${name}/tog">
        <include name="**"/>
        </tarfileset>
      <tarfileset dir="${jude}"  prefix="${name}/jude">
        <include name="**"/>
        </tarfileset>
      </tar>
    </target>

  <!-- Clean ================================================================-->  

  <target name="standard.clean"
          description="Perform standard cleaning">
    <delete dir="${build}"/>
    <delete dir="${run}"/>
    <delete dir="${bin}"/>
    <delete dir="${etc}"/>
    <delete dir="${misc}"/>
    <delete>
      <fileset dir="${top}" includes="*.tar.*"/>
      </delete>
    <delete includeEmptyDirs="true">
      <fileset dir="${lib}" includes="*"/>
      </delete>
    <delete includeEmptyDirs="true">
      <fileset dir="${doc}" excludes="Together/**/*,**/CVS,Gallery/**/*,*.txt,*.gif"/>
      </delete>
    </target>

  <!-- J2H ==================================================================-->  

  <target name="standard.j2h"
          description="Construct source documentation"
          if="local">
    <taskdef name="java2html" classname="com.java2html.Java2HTMLTask"/>
	  <java2html title="${name}" 
               simple="no"
             	 tabsize="4"
		           marginsize="2"
		           header="true"
		           footer="true"
		           destination="${doc}/Src">
		  <fileset dir="${src}"   includes="**/*.java"/>
		  <fileset dir="${build}" includes="**/*.java"/>
		  <javadoc localRef="/opt/jdk-doc/api" httpRef="http://java.sun.com/j2se/1.5.0/docs/api"/>
	    </java2html>
  </target>

  <!--=======================================================================-->  

  </project>
