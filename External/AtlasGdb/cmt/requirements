package AtlasGdb
author  Rolf Seuster (re-write w/o pkgbuild)

## For Athena policies: it has to be the first use statement
use AtlasPolicy 	AtlasPolicy-*
use AtlasPython		AtlasPython-*       External

apply_pattern declare_python_modules files="gdbhacks *.py"
apply_pattern declare_scripts files="atlasAddress2Line"

application resolveAtlasAddr2Line ../app/resolveAtlasAddr2Line.cpp
macro_append resolveAtlasAddr2Line_dependencies " external_make_all "

macro AtlasGdb_native_version "7.8.1"
macro AtlasGdb_lib "$(AtlasGdb_root)/$(CMTCONFIG)/lib"

private

# remove some compiler flags which gdb doesn't like.
macro_remove cflags "-std=c11"
macro_remove cflags "-std=c11"

# make sure, 32 bit executable is created for i686 (fixing another compilation failure)
macro supp_conf_flags "" target-i686 " --build=i686-linux"

# the usual, tar; configure; make; make install cycle implemented as actions
#  here, one additional step is involved to get the include files installed
#  into the location <package>_root

action external_untar "(cd ../$(CMTCONFIG); tar xvfJ ../src/gdb-$(AtlasGdb_native_version).tar.xz )"

# gdb is a standalone executable, independent of compiler flags used for the rest of the atlas software
#  only exception is that we need to link against libiberty and bfd, so build and expose them
action external_configure "(cd ../$(CMTCONFIG)/gdb-$(AtlasGdb_native_version); ./configure --prefix=$(AtlasGdb_root)/$(CMTCONFIG) --with-system-gdbinit=$(AtlasGdb_root)/$(CMTCONFIG)/etc/gdbinit --with-python=$(Python_home) --enable-install-libiberty CXXFLAGS='$(cppflags) -fPIC' CFLAGS='$(cflags)' LDFLAGS='-L$(Python_home)/lib' $(supp_conf_flags))"

action external_make_compile "(cd ../$(CMTCONFIG)/gdb-$(AtlasGdb_native_version); make)"

action external_make_preinstall "(cd ..; ln -sf $(CMTCONFIG)/include )"

action external_make_install "(cd ../$(CMTCONFIG)/gdb-$(AtlasGdb_native_version); make install )"

# dummy target to allow other actions needed by this package to depend on just a single target
action external_make_all "echo done ; mkdir -p ../$(CMTCONFIG)/etc; echo 'add-auto-load-safe-path /'> ../$(CMTCONFIG)/etc/gdbinit"

# get dependencies of all actions correct, so all is done sequentially
macro_append external_configure_dependencies " external_untar "
macro_append external_make_compile_dependencies " external_configure "
macro_append external_make_preinstall_dependencies " external_make_compile "
macro_append external_make_install_dependencies " external_make_preinstall "

# installation of non-standard directory structure for header files, it must be executed after the 'make install' step
apply_pattern install_non_standard_includes name=include package=AtlasGdb
macro_append install_include_includes_dependencies " external_make_install "

macro_append external_make_all_dependencies " install_include_includes "

# trigger the chain of actions
macro_append constituents " external_make_all "

macro_prepend includes ' $(ppcmd)"$(AtlasGdb_root)/$(CMTCONFIG)/include" '

# install binary files ...
apply_pattern generic_declare_for_link kind=exe files='-s=../$(CMTCONFIG)/bin *' prefix='$(CMTCONFIG)/bin'
# ... and create proper dependency, installation in InstallArea right after external_make_install target
macro_append install_exe_dependencies " external_make_install "

end_private

macro_append AtlasGdb_linkopts "" \
  slc6&64&clang32 \ 
 " $(AtlasGdb_root)/$(tag)/lib/libbfd.a \ 
   $(AtlasGdb_root)/$(tag)/lib/x86_64/libiberty.a -lz " \
  slc6&64&icc13 \ 
 " $(AtlasGdb_root)/$(tag)/lib/libbfd.a \ 
   $(AtlasGdb_root)/$(tag)/lib/libiberty.a -lz " \
  slc6&target-i686 \
 " $(AtlasGdb_root)/$(tag)/lib/libbfd.a \
   $(AtlasGdb_root)/$(tag)/lib/libiberty.a -lz " \
  slc6 \
 " $(AtlasGdb_root)/$(tag)/lib/libbfd.a \
   $(AtlasGdb_root)/$(tag)/lib64/libiberty.a -lz "

