package ExternalPolicy

# The dependency on ExternalComponents is not needed for project builds.
# The CMTPROJECTPATH environment variable is specified for these.
macro isProject "${CMTPROJECTPATH}notProject"
apply_tag $(isProject)
macro useExternalComponents "" \
      notProject "ExternalComponents ExternalComponents-00-* External"

use $(useExternalComponents)

# Setup dependencies for platform policies and tags
use PlatformPolicy PlatformPolicy-* External

# Setup dependencies for SLC4/SLC5/Mac105 compatibility modes
use Mac105_Compat Mac105_Compat-* External

# Suppress all XXXCONFIG useless environment variable
# (only available since CMT v1r14)

setup_strategy no_config

# Suppress all XXXROOT useless environment variable
# (only available since CMT v1r14)

setup_strategy no_root

apply_tag LCGCMT_INSTALLED

# Force an override of the tdaq-common policies
apply_tag block-tdaqc 

# Establish the default include path for External (interface) packages
pattern -global empty_include_path \
  include_path none

# Platform-specific shared library suffix - note that Darwin is now the same as the other platforms
macro shlibsuffix "so"

# Revert to the default definition of the ar macro on MacOSX since this appears to be working (although
# I don't understand what's changed). The problem with libtool is that there's no way to append or replace
# object files in an archive library, so in incremental mode the library gets rebuilt with only a subset 
# of the object files, rather than them replacing existing versions. If this again causes problems on
# AFS we'll have to use a script to extract the existing object files from the library if it exists
# and rebuild the library.
macro ar     "$(ar)" \
      Darwin "ar -cr"

# Revert to the default definition of ranlib for MacOSX. This no longer appears to be causing problems
# on AFS, which is why I'm restoring it. I don't really understand what's changed. If the problem is in
# fact still present, the replacement is to just "touch" the library.
macro ranlib        "$(ranlib)" \
      Darwin&mac106 "touch" \
      Darwin        "ranlib"

#--------------------------------------------
#
#  Special treatment of symlinking to deal with a limitation on Solaris
#  of the ln -f option...
#
#--------------------------------------------

apply_pattern declare_scripts files="-s=$(EXTERNALPOLICYROOT)/src symlink.sh inverse_symlink.sh"

macro symlink         "symlink.sh"
macro symlink_command "symlink.sh"
macro symlinknew      "$(symlink_command)"

macro copy_command "cp -R -H"
#macro copy_command "cp -R"

#private
macro symlink         "$(ExternalPolicy_root)/src/symlink.sh"
macro symlink_command "$(ExternalPolicy_root)/src/symlink.sh"
public

##macro install_command "$(symlink_command)"
#
# Some data files are specified using a directory.
#
macro atlas_install_command "cp -R -H"
#macro install_command "cp -R "

#--------------------------------------------
# Patterns for specifically declaring and installing files in the
# current installation area
#
# The most generic pattern is "generic_declare". Its arguments are
#
#   <kind>   : the kind of installation. This name conditions the macros, actions and make target names
#              This also is used to fill in the macro <package>_<kind> that holds the list of things to install
#
#   <files>  : the list of things to install. This may include -s=dir options 
#
#   <name>   : a supplementary name to distinguish several applications of this pattern
#
#   <prefix> : a prefix to $(CMTINSTALLAREA)
#
#   <install_command> : the installation command (to either copy or symlink)
#
# Then two patterns are derived from generic_declare:
#
#  generic_declare_for_link:
#  generic_declare_for_copy:
#
#   They both transmmit unchanged all arguments to generic_install and they select either to symlink or to copy using 
#
#    $(symlink_command)
#    $(copy_command)
#
#--------------------------------------------
make_fragment atlas_data_installer -header=atlas_data_installer_header

pattern generic_declare \
    macro_append <package>_<name><kind> " <files> " ; \
    document atlas_data_installer install_<name><kind> prefix=<prefix> $(<package>_<name><kind>) cmt_install_area_command="'<install_command>'" ; \
    private ; \
    action check_install_<name><kind> "$(EXTERNALPOLICYROOT)/cmt/atlas_check_installations.sh -files='$(<package>_<name><kind>)' -installdir=${CMTINSTALLAREA}/<prefix> -level=$(<package>_pedantic_level)" ; \
    macro install_<name><kind>_dependencies "check_install_<name><kind>" ; \
    end_private

pattern generic_declare_for_link \
    apply_pattern generic_declare kind=<kind> files='<files>' prefix=<prefix> name=<name> install_command="'$(symlink_command)'"

pattern generic_declare_for_copy \
    apply_pattern generic_declare kind=<kind> files='<files>' prefix=<prefix> name=<name> install_command="'$(copy_command)'"

# Note that the additional <files> argument is to resolve a conflict between this definition of
# the install_docs pattern and that defined within the tdaq-common project
pattern install_docs \
    apply_pattern generic_declare_for_link files='-s=../doc *.* <extras> <files>' prefix=doc/<package>
 
# Pattern to install a symlink to the $(<package>_home) location of an external package in the InstallArea/external/<package> location.
# Subsequent use of the $(<package>_installed_home) macro to locate items within the package are then relocatable.   
pattern install_external_home \
    apply_pattern generic_declare_for_link kind=<package>_home files=$(<package>_home) prefix=external/<package> ; \
    macro <package>_installed_home "$(<package>_cmtpath)/$(cmt_installarea_prefix)/external/<package>/`basename $(<package>_home)`"

# Pattern to install a symlink to the $(<name>_home) location of an external package, which doesn't itself correspond
# directly to the glue package, in the InstallArea/external/<package>-<name> location.
# Subsequent use of the $(<package>-<name>_installed_home) macro to locate items within the package are then relocatable.   
pattern install_external_named_home \
    apply_pattern generic_declare_for_link kind=<name>_home files=$(<name>_home) prefix=external/<package>-<name> ; \
    macro <package>-<name>_installed_home "$(<package>_cmtpath)/$(cmt_installarea_prefix)/external/<package>-<name>/`basename $(<name>_home)`

# Pattern to install a symlink to the <location> location within an external package called <name>, which doesn't itself
# correspond directly to the glue package, in the InstallArea/external/<package>-<name> location.
# Subsequent use of the $(<package>_<name>_installed_home) macro to locate items within the package are then relocatable.   
pattern install_external_named_location \
    apply_pattern generic_declare_for_link kind=<name>_loc files=<location> prefix=external/<package>-<name> ; \
    macro <package>-<name>_installed_location "$(<package>_cmtpath)/$(cmt_installarea_prefix)/external/<package>-<name>/`basename <location>` 

pattern declare_external_applications \
    macro_append use_applications " <applications>"

pattern declare_external_java \
    macro_append use_java " <java>"

make_fragment readme_installer_header
make_fragment readme_installer -header=readme_installer_header

# Make the dependency on cmtgrapher be conditional on the Linux, CERN
# and target_cmtgrapher tags.

macro cmtgrapher_use    "" \
      CERN&Linux        "cmtgrapher v1 CMT -no_auto_imports"

macro use_cmtgrapher    "" \
      target_cmtgrapher "$(cmtgrapher_use)"

use $(use_cmtgrapher)

macro base_URL "http://atlas.web.cern.ch/Atlas/GROUPS/SOFTWARE/OO/dist/"

pattern readme_installer \
   document readme_installer install_readme -group=install DOCPATH=$(<package>_doc_path)

make_fragment readme_trailer

# Setup ATLAS/GAUDI matching tags
apply_tag ATLAS

# setup SRT-backwards compatibility (for External packages using SRT conventions)
macro SRT_TARGET "" \
      egcs-1.1.2        "i586-pc-linux-gnu/egcs-1.1" \
      gcc-2.95.2        "i586-pc-linux-gnu/gcc-2.95.2" \
      gcc32x            "i586-pc-linux-gnu/gcc-3.2" \
      slc4&64&gcc34x    "x86_64-pc-linux-gnu/gcc-3.4" \
      gcc34x            "i586-pc-linux-gnu/gcc-3.4" \
      Solaris           "sparc-sun-solaris2.7/CC-5.2"
############
#macro Graphviz_home "" \
#      LAL           "/lal/Grafviz/Linux" \
#      CERN          "/afs/cern.ch/sw/contrib/CMT/Grafviz/Linux"

#path_remove PATH "$(Graphviz_home)"
#path_remove PATH "/cmtgrapher/"

#macro cern_apps "" \
#    CERN        "$(Graphviz_home)/bin/dot $(Graphviz_home)/bin/lefty $(Graphviz_home)/bin/neato ${CMTGRAPHERROOT}/${CMTBIN}/cmtshowuses.exe" \
#    Solaris     ""

#apply_pattern declare_external_applications applications="$(cern_apps)"

#path_remove DOTFONTPATH "" Linux "Grafviz"
#path_append DOTFONTPATH "" Linux "$(Graphviz_home)/lib/fonts/ttf"

#
#  Support for tarball production (experimental)
#
#   Rely on the macro $(kits_dir)
#     define it either in requirements or on the gmake command-line
#
make_fragment zipper_header
make_fragment zipper -header=zipper_header

macro kits_dir cmt/kits

pattern kits \
document zipper RE   -group=kits $(<package>_RE_files) ; \
document zipper DEV  -group=kits $(<package>_DEV_files) ; \
document zipper SRC  -group=kits $(<package>_SRC_files) ; \
document zipper FULL -group=kits $(<package>_FULL_files)

macro zip_command "tar"

pattern RE_files macro <package>_RE_files "-s=$(bin) lib<package>.$(shlibsuffix)"
#ignore_pattern RE_files
#ignore_pattern kits

#--------------------------------------------
#
#  Special treatment of symlinking to deal with a limitation on Solaris
#  of the ln -f option...
#
#--------------------------------------------

macro symlink "$(ExternalPolicy_root)/scripts/symlink.sh"

# Ensure that installed scripts are in PATH

cmtpath_pattern \
  path_remove_regexp PATH "" <project>_with_installarea "$(<project>_installarea_prefix_remove)$(CMT_PATH_remove_share_regexp)bin$"

cmtpath_pattern \
  path_prepend PATH "" <project>_with_installarea <path>/$(<project>_installarea_prefix)/share/bin

# Ensure that prepended above share/bin directories do not get removed

macro CMT_PATH_remove_regexp "/[^s/][^/]*/" WIN32 "\\[^s/][^\\]*\\"

#--------------------------------------------
# Setup DYLD_LIBRARY_PATH for MacOSX
#--------------------------------------------

cmtpath_pattern \
  path_prepend DYLD_LIBRARY_PATH "" <project>_with_installarea&Darwin "<path>/$(<project>_installarea_prefix)/${CMTCONFIG}/lib"

cmtpath_pattern \
  path_remove_regexp DYLD_LIBRARY_PATH "" \
                     target-darwin     "^/usr/lib$" ; \
  path_prepend       DYLD_LIBRARY_PATH "" \
                     target-darwin     "$(Mac105_Compat_lib)" ; \
  path_prepend       DYLD_LIBRARY_PATH "" \
                     mac107            "/usr/lib" ; \
  path_append        DYLD_LIBRARY_PATH "" \
                     mac107            "" \
                     target-darwin     "/usr/lib"

#--------------------------------------------
# Setup PATH and LD_LIBRARY_PATH (moving /usr/lib to the end of LD_LIBRARY_PATH)
#--------------------------------------------

tag gcc&32 force32

cmtpath_pattern \
 path_prepend PATH "$(Mac105_Compat_bin)"

cmtpath_pattern \
 path_prepend LD_LIBRARY_PATH "$(Mac105_Compat_lib)" 
 
cmtpath_pattern \
  path_remove_regexp LD_LIBRARY_PATH     "" \
                     host-x86_64  "^/usr/lib$"  ;\
  path_remove_regexp LD_LIBRARY_PATH     "" \					 
                     host-x86_64 "^/usr/lib64$" ; \
  path_append        LD_LIBRARY_PATH     "" \
                     host-x86_64&force32 "/usr/lib" ; \
  path_append        LD_LIBRARY_PATH     "" \
                     host-x86_64         "/usr/lib64"

#--------------------------------------------
## Filling the JOBOPTSEARCHPATH list with list of currently visible installation areas
#--------------------------------------------

#path_remove  JOBOPTSEARCHPATH "InstallArea"
#path_prepend JOBOPTSEARCHPATH `${ATLASPOLICYROOT}/cmt/jo.sh`

cmtpath_pattern \
  path JOBOPTSEARCHPATH "" ; \
  path_remove PYTHONPATH "$(cmt_installarea_prefix)" ; \
  path_remove DATAPATH "$(cmt_installarea_prefix)" ; \
  path_remove ROOTMAPSEARCHPATH "$(cmt_installarea_prefix)" ; \
  path_remove XMLPATH "$(cmt_installarea_prefix)"

cmtpath_pattern \
  path_prepend JOBOPTSEARCHPATH  "" \
               <project>_with_installarea&Unix "<path>/$(cmt_installarea_prefix)/jobOptions" ; \
  path_prepend PYTHONPATH        "" \
               <project>_with_installarea&Unix "<path>/$(cmt_installarea_prefix)/python" ; \
  path_prepend PYTHONPATH        "" \
               <project>_with_installarea&Unix "<path>/$(cmt_installarea_prefix)/${CMTCONFIG}/lib/python$(Python_version)" ; \
  path_prepend DATAPATH          "" \
               <project>_with_installarea&Unix "<path>/$(cmt_installarea_prefix)/share" ; \
  path_prepend DATAPATH          "" \
               <project>_with_installarea&Unix "<path>/$(cmt_installarea_prefix)/${CMTCONFIG}/share" ; \
  path_prepend ROOTMAPSEARCHPATH "" \
               <project>_with_installarea&Unix "<path>/$(cmt_installarea_prefix)/rootmap" ; \
  path_prepend XMLPATH           "" \
               <project>_with_installarea&Unix "<path>/$(cmt_installarea_prefix)/XML"

cmtpath_pattern \
  path_prepend JOBOPTSEARCHPATH "."
