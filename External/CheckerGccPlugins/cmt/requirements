package CheckerGccPlugins

author scott snyder

use ExternalPolicy ExternalPolicy-* External
use AtlasCompilers      AtlasCompilers-*  External

# The version of the plugin that we run from externals.
# This is not necessarily the same as the package version.
macro CheckerGccPlugins_native_version "CheckerGccPlugins-00-01-12"

macro CheckerGccPlugins_home "${ATLAS_EXTERNAL}/CheckerGccPlugins/$(CheckerGccPlugins_native_version)"


##### Construct the compiler command-line arguments for enabling checking.

# Find the directory containing the plugin.
# If this package is being built locally, then we use the library
# directory for the local project.   Otherwise, we use the external
# version.
apply_tag CheckerGccPlugins_project_$(CheckerGccPlugins_project)

macro CheckerGccPlugins_plugin_dir "$(CheckerGccPlugins_cmtpath)/$(cmt_installarea_prefix)/$(CMTCONFIG)/lib" \
  CheckerGccPlugins_project_AtlasCore "$(CheckerGccPlugins_home)/$(CMTCONFIG)" \
  CheckerGccPlugins_project_AtlasProduction "$(CheckerGccPlugins_home)/$(CMTCONFIG)" \
  CheckerGccPlugins_project_AtlasPhysics "$(CheckerGccPlugins_home)/$(CMTCONFIG)"

macro CheckerGccPlugins_args "" target-gcc " -fplugin=$(CheckerGccPlugins_plugin_dir)/libchecker_gccplugins.so "

private


##### building checker_gccplugin


use gmp v* LCG_Interfaces
# gmp isn't available in experimental LCG
macro gmp_home $(LCG_EXTERNAL)/gmp/5.1.1/$(LCG_system)
#macro gmp_native_version 5.1.1
build_strategy no_prototypes

#HACK, should be fixed in GaudiPolicy. Get rid of icc command line options
macro_remove cppflags "" target-icc "-wd383 -wd981 -wd1418 -wd1419 -we1011 -we117 -wd82 -wd522 -wd444 -wd304 -Wno-deprecated"

# The gcc_home macro is unreliable.  Just look at what we're actually using.
macro checker_gcc_home "`which gcc |sed "s=/bin/gcc==g"`"

macro_prepend cppflags " -I$(checker_gcc_home)/lib/gcc/x86_64-unknown-linux-gnu/$(gcc_native_version)/plugin/include -I$(checker_gcc_home)/lib/gcc/x86_64-unknown-linux-gnu/$(gcc_native_version) -I$(gmp_home)/include -Wno-literal-suffix "
macro_prepend cflags " -I$(checker_gcc_home)/lib/gcc/x86_64-unknown-linux-gnu/$(gcc_native_version)/plugin/include  -I$(checker_gcc_home)/lib/gcc/x86_64-unknown-linux-gnu/$(gcc_native_version)   -I$(gmp_home)/include "


# Remove -m32 from compilation lines.  Need to build to match the compiler used.
macro_remove cflags " -m32 "
macro_remove cppflags " -m32 "
macro_remove cpplinkflags " -m32 "
macro_remove_regexp cppflags " -march=[^ ]+ "
macro_remove shlibflags "-m32"
macro_remove shlibbuilder "-m32


# Use gcc to compile the plugin, but don't override the names if we're
# already configured for gcc.
macro cc_name "gcc" gcc "$(cc_name)"
macro cpp_name "g++" gcc "$(cpp_name)"

macro CheckerGccPlugins_export_paths "$(CheckerGccPlugins_home)/$(CMTCONFIG)"

library checker_gccplugins ../src/*.cxx 


apply_pattern declare_scripts files="../scripts/checker_gccplugins_args"
