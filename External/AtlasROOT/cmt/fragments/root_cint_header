# Header fragment for root_cint:
#
# Overall action: 
#
#   These fragments (root_cint + _header + _trailer) process files to
# be added to the Root Cint dictionary. This is done by copying the
# names of files to be processed into a directory $(dict) and then
# running cint to generate a C++ file to be built.
#
# Work is separated into:
#
#   root_cint_header  -  create dir $(dict), has overall dependency
# 			 which makes things run
#   root_cint         -  copies the name of each file to be processed
#			 into a file in $(dict)
#   root_cint_trailer -  runs cint and has cleanup
#
# The following macros must be externally set in a requirements file,
# e.g. with a pattern:
#
# dict       -   scratch directory for generated files, e.g. $(bin)dict/
#  		 (must have trailing '/')
#
# root_cint_includes - required include path, e.g. ${includes}
#
# CONSTITUENT -  This is specified in "document root_cint <constituent>"
#                Note that <constituent>.cxx should be added to the
#		 "library" statement.

${CONSTITUENT}_output = $(dict)

# Basic dependency that forces cint to be run in root_cint_trailer
# PCM_make_target is defined for ROOT6 as ${CONSTITUENT}.pcm in root_cint_trailer and should trigger PCM installation
${CONSTITUENT} :: $(dict)${CONSTITUENT}.cxx ${PCM_make_target}
	@echo "------> ${CONSTITUENT} ok"

# Target to run "mkdir" before copying the files in root_cint
${OBJS} :: build_dir
	@test 1=1

# Make the generation directory 
build_dir :: 
	test -d $(dict) || mkdir -p ${dict}; 


# MN:  prepare place for ROOT PCM installation
installDir := "${CMTINSTALLAREA}/$(tag)/lib/"

${installDir} :: 
	mkdir -p ${installDir}

