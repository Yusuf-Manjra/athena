///////////////////////// -*- C++ -*- /////////////////////////////

/*
  Copyright (C) 2002-2020 CERN for the benefit of the ATLAS collaboration
*/

#include "AthenaKernel/IRegisterTransient.h"
#include "AthenaKernel/ClassID_traits.h"
#include "AthenaKernel/BaseInfo.h"
#include "AthenaKernel/ILockable.h"
#include "CxxUtils/AthUnlikelyMacros.h"
#include "CxxUtils/checker_macros.h"

#include <type_traits>


// Some helper functions.
namespace SG {


// If T is a DataObject, increment its reference count.
// The second parameter tells whether or not T is a DataObject.
template <class T>
void db_maybe_ref (T*, std::false_type)
{
}
template <class T>
void db_maybe_ref (T* ptr, std::true_type)
{
  ptr->addRef();
}


// Release the pointer PTR.
// If T is a DataObject, then decrement the reference count;
// otherwise, just delete it.
// The second parameter tells whether or not T is a DataObject.
template <class T>
void db_free_ptr (T* ptr, std::false_type)
{
  //  std::cout << "db_free_ptr: deleting ptr @" << ptr << " of type " << ClassID_traits<T>::typeName() << std::endl;
  delete ptr;
}
template <class T>
void db_free_ptr (T* ptr, std::true_type)
{
  typedef typename std::remove_const<T>::type T_nc;
  //  std::cout << "db_free_ptr: releasing ptr @" << ptr << " of type " << ClassID_traits<T>::typeName() << std::endl;
  const_cast<T_nc*>(ptr)->release();
}

} // namespace SG


///////////////////////////////////////////////////////////////////////////////
// CONSTRUCTORS
///////////////////////////////////////////////////////////////////////////////
template <typename T> 
SG::DataBucket<T>::DataBucket(T* data)
  : m_ptr(data)
{
  // If T is a DataObject, increase the refcount.
  typedef typename ClassID_traits<T>::is_DataObject_tag tag;
  if (m_ptr)
    SG::db_maybe_ref (m_ptr, tag());
}

template <typename T>
template <typename U>
// cppcheck-suppress uninitMemberVar ; false positive
SG::DataBucket<T>::DataBucket(std::unique_ptr<U> data)
    // Rely on our caller to retain constness.
  : DataBucket ([] (U* ptr) { typedef typename std::remove_const<U>::type UNC;
                              UNC* tmp ATLAS_THREAD_SAFE = const_cast<UNC*> (ptr);
                              return tmp; }
    (data.release()))
{
}

template <typename T> 
SG::DataBucket<T>::DataBucket(SG::DataObjectSharedPtr<T> data)
  : m_ptr(data.detach())
{
}

///////////////////////////////////////////////////////////////////////////////
// DATAOBJECT
///////////////////////////////////////////////////////////////////////////////
template <typename T> 
const CLID& SG::DataBucket<T>::clID() const {return classID();}  

template <typename T> 
const CLID& SG::DataBucket<T>::classID() { 
  typedef typename std::remove_pointer<T>::type BareTp;
  typedef typename std::remove_const<BareTp>::type BareT;
  return ClassID_traits<BareT>::ID();
}


/**
 * @brief Return the contents of the @c DataBucket,
 *        converted to type given by @a clid.  Note that only
 *        derived->base conversions are allowed here.
 * @param clid The class ID to which to convert.
 * @param irt To be called if we make a new instance.
 * @param isConst True if the object being converted is regarded as const.
 */
template <typename T> 
void*
SG::DataBucket<T>::cast (CLID clid,
                         IRegisterTransient* irt /*= 0*/,
                         bool isConst /*=true*/)
{
  if (ATH_LIKELY (clid == classID())) {
    return m_ptr;
  }
  void* ret = SG::BaseInfo<T>::cast (m_ptr, clid);
  if (ret || !isConst)
    return ret;

  // Is there a copy conversion available?
  const CopyConversionBase* cc = SG::BaseInfo<T>::baseinfo().copy_conversion (clid);
  if (cc) {
    vec_t::iterator end = m_cnvcopies.end();
    for (vec_t::iterator it = m_cnvcopies.begin(); it != end; ++it) {
      if (cc == it->first) {
        cc->convertUntyped (m_ptr, it->second);
        return it->second;
      }
    }

    void* newcont = cc->create();
    if (newcont) {
      cc->convertUntyped (m_ptr, newcont);
      m_cnvcopies.push_back (std::make_pair (cc, newcont));
      irt->registerTransient (newcont);
    }
    return newcont;
  }

  return 0;
}


/**
 * @brief Return the contents of the @c DataBucket,
 *        converted to type given by @a std::type_info.  Note that only
 *        derived->base conversions are allowed here.
 * @param clid The @a std::type_info of the type to which to convert.
 * @param irt To be called if we make a new instance.
 * @param isConst True if the object being converted is regarded as const.
 */
template <typename T> 
void* SG::DataBucket<T>::cast (const std::type_info& tinfo,
                               IRegisterTransient* irt /*= 0*/,
                               bool isConst /*= true*/)
{
  void* ret = SG::BaseInfo<T>::cast (m_ptr, tinfo);
  if (ret || !isConst)
    return ret;

  // Is there a copy conversion available?
  const CopyConversionBase* cc = SG::BaseInfo<T>::baseinfo().copy_conversion (tinfo);
  if (cc) {
    vec_t::iterator end = m_cnvcopies.end();
    for (vec_t::iterator it = m_cnvcopies.begin(); it != end; ++it) {
      if (cc == it->first) {
        cc->convertUntyped (m_ptr, it->second);
        return it->second;
      }
    }

    void* newcont = cc->create();
    if (newcont) {
      cc->convertUntyped (m_ptr, newcont);
      m_cnvcopies.push_back (std::make_pair (cc, newcont));
      irt->registerTransient (newcont);
    }
    return newcont;
  }

  return 0;
}

template <typename T> 
SG::DataBucket<T>::~DataBucket()
{
  // Delete any copies.
  vec_t::iterator end = m_cnvcopies.end();
  for (vec_t::iterator it = m_cnvcopies.begin(); it != end; ++it) {
    it->first->destroy (it->second);
  }

  // Either delete m_ptr or decrement the refcount,
  // depending on whether or not T is a DataObject.
  typedef typename ClassID_traits<T>::is_DataObject_tag tag;
  if (m_ptr)
    SG::db_free_ptr(m_ptr, tag());
}


namespace {


template <class T>
void call_lock (T* p, std::true_type)
{
  typedef typename std::remove_const<T>::type T_nc;
  ILockable* l = dynamic_cast<ILockable*> (const_cast<T_nc*>(p));
  if (l) l->lock();
}


template <class T>
void call_lock (T*, std::false_type)
{
}


} // anonymous namespace


/**
 * If the held object derives from @c ILockable, call @lock() on it.
 */
template <class T>
void SG::DataBucket<T>::lock()
{
  call_lock (m_ptr, typename std::is_polymorphic<T>::type());
}

