package AthenaServices

#################################################

author P. Calafiura   <Paolo.Calafiura@cern.ch>
author D. Quarrie     <DRQuarrie@lbl.gov>
author S. Rajagopalan <srinir@bnl.gov>
author Wim Lavrijsen  <WLavrijsen@lbl.gov>
author S. Binet       <binet@cern.ch>

use AtlasPolicy      AtlasPolicy-*

private
use GaudiInterface                 GaudiInterface-*  	            External
use StoreGate                      StoreGate-*       	            Control
use Navigation                     Navigation-*                     Control
use AthContainersInterfaces        AthContainersInterfaces-*        Control
# use for the tests...
use RngComps			   RngComps-*			    Control -no_auto_imports

# Add cmake compatibility (doesn't do anything on CMT side of things)
apply_pattern cmake_add_libraries target=AthenaServices libraries=z

library AthenaServices *.cxx -s=components *.cxx
apply_pattern component_library

apply_pattern declare_joboptions files="\
SimplePOSIXTimeKeeperOptions.py \
SimplePOSIXTimeKeeperSvc_test.py \
MixingEventSelector_test.py \
MultiplePassBootstrap.py \
MultiplePass_test.py \
MultiplePassWithAlgFilter_test.py \
OverrideEventNumber.py \
TestStopRun.py \
TestSeedRunEvent.py \
AthDictLoaderSvc_test.py \
ReadAthenaPoolSeek_jobOptions.py \
AthenaJobOptionsSvc_jobOptions.py \
test_tpcnvdb.py \
"
apply_pattern declare_python_modules files="*.py"

use AthenaKernel     AthenaKernel-*       Control
use AthenaBaseComps  AthenaBaseComps-*	  Control
use AtlasBoost       AtlasBoost-*      	  External
use AtlasPython      AtlasPython-*        External
use AtlasCLHEP       AtlasCLHEP-*      	  External
use yampl            yampl-*              External

use EventInfo        EventInfo-*       	  Event
use CxxUtils	     CxxUtils-*		  Control
use SGTools          SGTools-*         	  Control
use DataModel        DataModel-*          Control
use PersistentDataModel   PersistentDataModel-*      Database

use PerfMonKernel    PerfMonKernel-*      Control/PerformanceMonitoring
use PerfMonEvent     PerfMonEvent-*       Control/PerformanceMonitoring

apply_pattern install_runtime
use TestTools       TestTools-*          AtlasTest

apply_pattern UnitTest_run unit_test=AthenaOutputStream \
extrapatterns="^SGAudSvc +(INFO|DEBUG)|of type DataHistory|DEBUG Recorded object|object modifiable when retrieved|^ToolSvc +DEBUG Service base class initialized|^IncidentSvc *DEBUG Adding .* listener|^Py:Athena *INFO using release|DecisionSvc +DEBUG|DEBUG loadDictFiller - Ntypes|: duplicate entry|^IoComponentMgr +(INFO|DEBUG)|DBReplicaSvc|^HistogramPersis.*DEBUG|^JobOptionsSvc +INFO|^//GP:=|^ItemListSvc +(INFO|DEBUG)|Info File PoolFileCatalog.xml does not exist|DataModelCompatSvc::initialize|^ProxyProviderSvc +DEBUG|^DataModelCompatSvc +DEBUG"
use ToyConversion   ToyConversion-*   Control/AthenaExamples
macro_append AthenaOutputStream_testlinkopts " -L../$(CMTCONFIG) -lAthenaServices -L$(CMTINSTALLAREA)/lib/$(tag) $(ToyConversion_linkopts)"

apply_pattern UnitTest_run unit_test=FPEControlSvc \
  extrapatterns="^JobOptionsSvc +INFO|^//GP:="
macro_append FPEControlSvc_testlinkopts " -L../$(CMTCONFIG) -lAthenaServices"

apply_pattern athenarun_test name="TestStopRun" \
pre_script="../cmt/setup.sh"	\
options="AthenaServices/TestStopRun.py" \
post_script="post.sh TestStopRun $(q)SGAudSvc +INFO Finalizing|SGAudSvc +INFO Initializing|No duplicates have been found|duplicate entry.*ignored|^Py:ConfigurableDb WARNING|Read module info for|^ToolSvc.* INFO( finalize:)? Removing all tools|^CoreDumpSvc *INFO Handling signals|types added|including file|^(Mon|Tue|Wed|Thu|Fri|Sat|Sun) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)|local .* libGaudiKernelDict.so|^Number of My|^Py:Athena +INFO using release|^StoreGateSvc +INFO Start|^Py:AthenaDsoDb +INFO could not install alias|Bindings.py:660newobj = object.__new__|Updating ROOT::Reflex::PluginService::SetDebug|^ApplicationMgr +INFO|^StoreGateSvc +INFO$(q)"

#
# dictionary creation for python event loop mgr
#
# private
# use AtlasReflex  AtlasReflex-*  External -no_auto_imports

# apply_pattern lcgdict dict=AthenaServices \
# selectionfile="selection.xml" \
# options=" -I$(ATHENASERVICESROOT)/src" \
# headerfiles="../AthenaServices/AthenaServicesDict.h"

# macro_prepend AthenaServicesDict_shlibflags " -lAthenaServices "
# macro_append lib_AthenaServicesDict_cppflags " -I$(ATHENASERVICESROOT)/src"
# end_private

macro_append DOXYGEN_INPUT " ../test "

# macro_append AthenaServices_linkopts " /afs/cern.ch/atlas/software/builds/nightlies/devval/AtlasCore/rel_2/External/AtlasGdb/x86_64-slc5-gcc43-opt/pkg-build-install-gdb/lib/libbfd.a /afs/cern.ch/atlas/software/builds/nightlies/devval/AtlasCore/rel_2/External/AtlasGdb/x86_64-slc5-gcc43-opt/pkg-build-install-gdb/lib64/libiberty.a -lz "

# macro_append AthenaServices_linkopts " /cvmfs/atlas.cern.ch/repo/sw/software/i686-slc5-gcc43-opt/17.2.3/AtlasCore/17.2.3/External/AtlasGdb/i686-slc5-gcc43-opt/pkg-build-install-gdb/lib/libbfd.a /cvmfs/atlas.cern.ch/repo/sw/software/i686-slc5-gcc43-opt/17.2.3/AtlasCore/17.2.3/External/AtlasGdb/i686-slc5-gcc43-opt/pkg-build-install-gdb/lib/libiberty.a -lz "

private
use DataModelRoot                  DataModelRoot-*                  Control






