<?xml version="1.0"?>
<!DOCTYPE unifiedTestConfiguration SYSTEM "http://www.hep.ucl.ac.uk/atlas/AtlasTesting/DTD/unifiedTestConfiguration.dtd">

<unifiedTestConfiguration>
  <atn>
  </atn>
  <kv>
  </kv>

  <rtt xmlns="http://www.hep.ucl.ac.uk/atlas/AtlasTesting/rtt">

    <rttContactPerson>Antonio Limosani (antonio.limosani@sydney.edu.au)</rttContactPerson>
    <refRelease>15.5.0</refRelease>

    <jobList>
      
      <classification>
        <displayClass>OfflineValidation</displayClass>
        <displayProcess>Reco</displayProcess>
        <displayComponent>Det-Combined</displayComponent>
      </classification>

      <jobTransform userJobId="QuickTest">
	<doc>quick_test</doc>
	<jobTransformJobName>quick_test</jobTransformJobName>
	<jobTransformCmd>
	  export TRF_ECHO=1; Reco_tf.py --inputRDOFile root://eosatlas//eos/atlas/user/a/atlaspmb/mc/valid1.110401.PowhegPythia_P2012_ttbar_nonallhad.recon.RDO.e3099_s2578_r6220_tid05191878_00/RDO.05191878._000121.pool.root.1 --maxEvents 3 --outputESDFile myESD.pool.root --outputAODFile myAOD.pool.root --preExec='from PerfMonComps.PerfMonFlags import jobproperties as pmjp;pmjp.PerfMonFlags.doPostProcessing=True;pmjp.PerfMonFlags.doSemiDetailedMonitoringFullPrint=True;rec.doTrigger=False;rec.doForwardDet=False;rec.doInDet=True;rec.doMuon=True;rec.doCalo=True;rec.doEgamma=False;rec.doMuonCombined=False;rec.doJetMissingETTag=False;rec.doTau=False;from RecExConfig.RecAlgsFlags import recAlgs;recAlgs.doMuonSpShower=False;rec.doBTagging=False;recAlgs.doEFlow=False;recAlgs.doEFlowJet=False;recAlgs.doMissingET=False;recAlgs.doMissingETSig=False; from JetRec.JetRecFlags import jetFlags;jetFlags.Enabled=False;' | tee  __log.txt; 
	  echo $? &gt;  __exitcode ;
	  touch __done ;
	  grep  -i "Reco_tf" jobReport.txt | head -n1 | awk -F\" '{print $2}' &gt; __command.sh;
	  for f in ntuple*.pmon.gz; do if [ -f "$f" ]; then tar xf $f "*.pmonsd.*" ; fi; done ; 
	  checkxAOD.py myESD.pool.root &gt; myESD.pool.root.checkfile.txt ; 
	  checkxAOD.py myAOD.pool.root &gt; myAOD.pool.root.checkfile.txt ;  
	  export userJobId=QuickTest ; 
	  export headDir="/afs/cern.ch/atlas/project/pmb/new_pmb/archive/custom";
	  export OutputDestination=${headDir}/`date +'%d/%m/%Y'`/`basename ${ATLAS_RELEASE_BASE}`/`basename $ROOTSYS`/${userJobId}; 
	  gzip *txt; 
	  mkdir -p                       ${OutputDestination} ; 
	  rsync -avz ntuple*             ${OutputDestination}/. ; 
	  rsync -avz __*                 ${OutputDestination}/. ; 
	  rsync -avz *.checkfile.txt.gz  ${OutputDestination}/. ; 
	</jobTransformCmd>
	<group>TrfRecPerf</group>
	<queue>atlasrttperf</queue>
      </jobTransform>

  


  <jobTransform userJobId="system_reco_mc15_ttbar_valid_13tev_25ns_mu00_to_mu40">
	<doc>Reco_tf runs on 13TeV collision mc ttbar 25 ns</doc>
	<jobTransformJobName>system_reco_mc15_ttbar_valid_13tev_25ns_mu00_to_mu40</jobTransformJobName>
	<jobTransformCmd>
	  export TRF_ECHO=1; Reco_tf.py --inputRDOFile root://eosatlas//eos/atlas/user/a/atlaspmb/mc/valid1.110401.PowhegPythia_P2012_ttbar_nonallhad.recon.RDO.e3099_s2578_r6220_tid05191878_00/RDO.05191878._000121.pool.root.1 --maxEvents 100 --outputESDFile myESD.pool.root --outputAODFile myAOD.pool.root --preExec='from PerfMonComps.PerfMonFlags import jobproperties as pmjp;pmjp.PerfMonFlags.doPostProcessing=True;pmjp.PerfMonFlags.doSemiDetailedMonitoringFullPrint=True;rec.doTrigger=False;rec.doForwardDet=False;rec.doInDet=True;rec.doMuon=True;rec.doCalo=True;rec.doEgamma=False;rec.doMuonCombined=False;rec.doJetMissingETTag=False;rec.doTau=False;from RecExConfig.RecAlgsFlags import recAlgs;recAlgs.doMuonSpShower=False;rec.doBTagging=False;recAlgs.doEFlow=False;recAlgs.doEFlowJet=False;recAlgs.doMissingET=False;recAlgs.doMissingETSig=False; from JetRec.JetRecFlags import jetFlags;jetFlags.Enabled=False;' | tee  __log.txt; 
	  echo $? &gt;  __exitcode ; 
	  touch __done ;
	  grep  -i "Reco_tf" jobReport.txt  | head -n1 | awk -F\" '{print $2}' &gt; __command.sh;
	  for f in ntuple*.pmon.gz; do if [ -f "$f" ]; then tar xf $f "*.pmonsd.*" ; fi; done ; 
	  checkxAOD.py myESD.pool.root &gt; myESD.pool.root.checkfile.txt ; 
	  checkxAOD.py myAOD.pool.root &gt; myAOD.pool.root.checkfile.txt ;  
	  export userJobId="system_reco_mc15_ttbar_valid_13tev_25ns_mu00_to_mu40"; 
	  export headDir="/afs/cern.ch/atlas/project/pmb/new_pmb/archive/custom";
	  export OutputDestination=${headDir}/`date +'%d/%m/%Y'`/`basename ${ATLAS_RELEASE_BASE}`/`basename $ROOTSYS`/${userJobId}; 
	  gzip *txt; 
	  mkdir -p                       ${OutputDestination} ; 
	  rsync -avz ntuple*             ${OutputDestination}/. ; 
	  rsync -avz __*                 ${OutputDestination}/. ; 
	  rsync -avz *.checkfile.txt.gz  ${OutputDestination}/. ; 
	</jobTransformCmd>
	<group>TrfRecPerf</group>
	<queue>atlasrttperf</queue>
      </jobTransform>

      <jobTransform userJobId="combined_reco_mc15_ttbar_valid_13tev_25ns_mu00_to_mu40">
	<doc>Reco_tf runs on 13TeV collision mc ttbar 25 ns</doc>
	<jobTransformJobName>combined_reco_mc15_ttbar_valid_13tev_25ns_mu00_to_mu40</jobTransformJobName>
	<jobTransformCmd>
	  export TRF_ECHO=1; Reco_tf.py --inputRDOFile root://eosatlas//eos/atlas/user/a/atlaspmb/mc/valid1.110401.PowhegPythia_P2012_ttbar_nonallhad.recon.RDO.e3099_s2578_r6220_tid05191878_00/RDO.05191878._000121.pool.root.1 --maxEvents 100 --outputESDFile myESD.pool.root --outputAODFile myAOD.pool.root --preExec='from PerfMonComps.PerfMonFlags import jobproperties as pmjp;pmjp.PerfMonFlags.doPostProcessing=True;pmjp.PerfMonFlags.doSemiDetailedMonitoringFullPrint=True;rec.doTrigger=False;'  | tee  __log.txt; 
	  echo $? &gt;  __exitcode ; 
	  touch __done ;
	  grep  -i "Reco_tf" jobReport.txt  | head -n1 | awk -F\" '{print $2}' &gt; __command.sh;
	  for f in ntuple*.pmon.gz; do if [ -f "$f" ]; then tar xf $f "*.pmonsd.*" ; fi; done ; 
	  checkxAOD.py myESD.pool.root &gt; myESD.pool.root.checkfile.txt ; 
	  checkxAOD.py myAOD.pool.root &gt; myAOD.pool.root.checkfile.txt ;  
	  export userJobId="combined_reco_mc15_ttbar_valid_13tev_25ns_mu00_to_mu40"; 
	  export headDir="/afs/cern.ch/atlas/project/pmb/new_pmb/archive/custom";
	  export OutputDestination=${headDir}/`date +'%d/%m/%Y'`/`basename ${ATLAS_RELEASE_BASE}`/`basename $ROOTSYS`/${userJobId}; 
	  gzip *txt; 
	  mkdir -p                       ${OutputDestination} ; 
	  rsync -avz ntuple*             ${OutputDestination}/. ; 
	  rsync -avz __*                 ${OutputDestination}/. ; 
	  rsync -avz *.checkfile.txt.gz  ${OutputDestination}/. ; 
	</jobTransformCmd>
	<group>TrfRecPerf</group>
	<queue>atlasrttperf</queue>
      </jobTransform>


      <jobTransform userJobId="monitoring_reco_mc15_ttbar_valid_13tev_25ns_mu00_to_mu40">
	<doc>Reco_tf runs on 13TeV collision mc ttbar 25 ns</doc>
	<jobTransformJobName>monitoring_reco_mc15_ttbar_valid_13tev_25ns_mu00_to_mu40</jobTransformJobName>
	<jobTransformCmd>
	  export TRF_ECHO=1; Reco_tf.py --inputRDOFile root://eosatlas//eos/atlas/user/a/atlaspmb/mc/valid1.110401.PowhegPythia_P2012_ttbar_nonallhad.recon.RDO.e3099_s2578_r6220_tid05191878_00/RDO.05191878._000121.pool.root.1 --maxEvents 100 --outputESDFile myESD.pool.root  --outputAODFile myAOD.pool.root --preExec='rec.doTrigger=False;rec.doMonitoring=True;from PerfMonComps.PerfMonFlags import jobproperties as pmjp;pmjp.PerfMonFlags.doPostProcessing=True;pmjp.PerfMonFlags.doSemiDetailedMonitoringFullPrint=True;' | tee  __log.txt; 
	  echo $? &gt;  __exitcode ; 
	  touch __done ;
	  grep  -i "Reco_tf" jobReport.txt  | head -n1 | awk -F\" '{print $2}' &gt; __command.sh;
	  for f in ntuple*.pmon.gz; do if [ -f "$f" ]; then tar xf $f "*.pmonsd.*" ; fi; done ; 
	  checkxAOD.py myESD.pool.root &gt; myESD.pool.root.checkfile.txt ; 
	  checkxAOD.py myAOD.pool.root &gt; myAOD.pool.root.checkfile.txt ;  
	  export userJobId="monitoring_reco_mc15_ttbar_valid_13tev_25ns_mu00_to_mu40"; 
	  export headDir="/afs/cern.ch/atlas/project/pmb/new_pmb/archive/custom";
	  export OutputDestination=${headDir}/`date +'%d/%m/%Y'`/`basename ${ATLAS_RELEASE_BASE}`/`basename $ROOTSYS`/${userJobId}; 
	  gzip *txt; 
	  mkdir -p                       ${OutputDestination} ; 
	  rsync -avz ntuple*             ${OutputDestination}/. ; 
	  rsync -avz __*                 ${OutputDestination}/. ; 
	  rsync -avz *.checkfile.txt.gz  ${OutputDestination}/. ; 
	</jobTransformCmd>
	<group>TrfRecPerf</group>
	<queue>atlasrttperf</queue>
      </jobTransform>

      <jobTransform userJobId="monitoring_reco_data15_minbias">
	<doc>Reco_tf runs on 13TeV collision data from the minbias stream</doc>
	<jobTransformJobName>monitoring_reco_data12_jettauetmiss</jobTransformJobName>
	<jobTransformCmd>
	  export TRF_ECHO=1; Reco_tf.py --conditionsTag "CONDBR2-BLKPA-2015-05" --inputBSFile 'root://eosatlas//eos/atlas/user/a/atlaspmb/data15_13TeV/data15_13TeV.00267167.physics_Main.merge.RAW._lb0176._SFO-1._0001.1' --outputESDFile "myESD.pool.root" --outputAODFile "myAOD.pool.root"  --ignorePatterns "ToolSvc.InDetSCTRodDecoder.+ERROR.+Unknown.+offlineId.+for.+OnlineId" --AMITag "f594" --ignoreErrors true --maxEvents 200 --skipEvents 0 --autoConfiguration "everything" --preExec 'DQMonFlags.enableLumiAccess=False;DQMonFlags.doCTPMon=False;from MuonRecExample.MuonRecFlags import muonRecFlags;muonRecFlags.useLooseErrorTuning.set_Value_and_Lock(True);' --beamType "collisions" --geometryVersion "ATLAS-R2-2015-03-01-00" --postExec "r2e:topSequence.LArNoisyROAlg.Tool.BadChanPerFEB=30" --outputHISTFile "myHIST.pool.root" --athenaopts=' --pmon=sdmonfp' | tee  __log.txt; 
	  echo $? &gt;  __exitcode ; 
	  touch __done ;
	  grep  -i "Reco_tf" jobReport.txt  | head -n1 | awk -F\" '{print $2}' &gt; __command.sh;
	  for f in ntuple*.pmon.gz; do if [ -f "$f" ]; then tar xf $f "*.pmonsd.*" ; fi; done ; 
	  checkxAOD.py myESD.pool.root &gt; myESD.pool.root.checkfile.txt ; 
	  checkxAOD.py myAOD.pool.root &gt; myAOD.pool.root.checkfile.txt ;  
	  export userJobId="monitoring_reco_data15_minbias";
	  export headDir="/afs/cern.ch/atlas/project/pmb/new_pmb/archive/custom";
	  export OutputDestination=${headDir}/`date +'%d/%m/%Y'`/`basename ${ATLAS_RELEASE_BASE}`/`basename $ROOTSYS`/${userJobId}; 
	  gzip *txt; 
	  mkdir -p                       ${OutputDestination} ; 
	  rsync -avz ntuple*             ${OutputDestination}/. ; 
	  rsync -avz __*                 ${OutputDestination}/. ; 
	  rsync -avz *.checkfile.txt.gz  ${OutputDestination}/. ; 
	</jobTransformCmd>
	<group>TrfRecPerf</group>
	<queue>atlasrttperf</queue>
      </jobTransform>

      <jobTransform userJobId="monitoring_reco_data12_jettauetmiss">
	<doc>Reco_tf runs on 8TeV collision 8 data from the jettauetmiss stream</doc>
	<jobTransformJobName>monitoring_reco_data12_jettauetmiss</jobTransformJobName>
	<jobTransformCmd>
	  export TRF_ECHO=1; Reco_tf.py --inputBSFile root://eosatlas//eos/atlas/user/a/atlaspmb/data12_8TeV/data12_8TeV.00209109.physics_JetTauEtmiss.merge.RAW._lb0186._SFO-1._0001.1 --maxEvents 150 --outputESDFile myESD.pool.root  --outputAODFile myAOD.pool.root --preExec='rec.doTrigger=False;rec.doMonitoring=True;from PerfMonComps.PerfMonFlags import jobproperties as pmjp;pmjp.PerfMonFlags.doPostProcessing=True;pmjp.PerfMonFlags.doSemiDetailedMonitoringFullPrint=True;' | tee  __log.txt; 
	  echo $? &gt;  __exitcode ; 
	  touch __done ;
	  grep  -i "Reco_tf" jobReport.txt  | head -n1 | awk -F\" '{print $2}' &gt; __command.sh;
	  for f in ntuple*.pmon.gz; do if [ -f "$f" ]; then tar xf $f "*.pmonsd.*" ; fi; done ; 
	  checkxAOD.py myESD.pool.root &gt; myESD.pool.root.checkfile.txt ; 
	  checkxAOD.py myAOD.pool.root &gt; myAOD.pool.root.checkfile.txt ;  
	  export userJobId="monitoring_reco_data12_jettauetmiss";
	  export headDir="/afs/cern.ch/atlas/project/pmb/new_pmb/archive/custom";
	  export OutputDestination=${headDir}/`date +'%d/%m/%Y'`/`basename ${ATLAS_RELEASE_BASE}`/`basename $ROOTSYS`/${userJobId}; 
	  gzip *txt; 
	  mkdir -p                       ${OutputDestination} ; 
	  rsync -avz ntuple*             ${OutputDestination}/. ; 
	  rsync -avz __*                 ${OutputDestination}/. ; 
	  rsync -avz *.checkfile.txt.gz  ${OutputDestination}/. ; 
	</jobTransformCmd>
	<group>TrfRecPerf</group>
	<queue>atlasrttperf</queue>
      </jobTransform>

      <jobTransform userJobId="monitoring_reco_data12_egamma">
	<doc>Reco_tf runs on 8TeV collision data from the egamma stream</doc>
	<jobTransformJobName>monitoring_reco_data12_egamma</jobTransformJobName>
	<jobTransformCmd>
	  export TRF_ECHO=1; Reco_tf.py --inputBSFile root://eosatlas//eos/atlas/user/a/atlaspmb/data12_8TeV/data12_8TeV.00209109.physics_Egamma.merge.RAW._lb0186._SFO-1._0001.1 --maxEvents 150 --outputESDFile myESD.pool.root  --outputAODFile myAOD.pool.root --preExec='rec.doTrigger=False;rec.doMonitoring=True;from PerfMonComps.PerfMonFlags import jobproperties as pmjp;pmjp.PerfMonFlags.doPostProcessing=True;pmjp.PerfMonFlags.doSemiDetailedMonitoringFullPrint=True;' | tee  __log.txt; 
	  echo $? &gt;  __exitcode ; 
	  touch __done ;
	  grep  -i "Reco_tf" jobReport.txt  | head -n1 | awk -F\" '{print $2}' &gt; __command.sh;
	  for f in ntuple*.pmon.gz; do if [ -f "$f" ]; then tar xf $f "*.pmonsd.*" ; fi; done ; 
	  checkxAOD.py myESD.pool.root &gt; myESD.pool.root.checkfile.txt ; 
	  checkxAOD.py myAOD.pool.root &gt; myAOD.pool.root.checkfile.txt ;  
	  export userJobId="monitoring_reco_data12_egamma";
	  export headDir="/afs/cern.ch/atlas/project/pmb/new_pmb/archive/custom";
	  export OutputDestination=${headDir}/`date +'%d/%m/%Y'`/`basename ${ATLAS_RELEASE_BASE}`/`basename $ROOTSYS`/${userJobId}; 
	  gzip *txt; 
	  mkdir -p                       ${OutputDestination} ; 
	  rsync -avz ntuple*             ${OutputDestination}/. ; 
	  rsync -avz __*                 ${OutputDestination}/. ; 
	  rsync -avz *.checkfile.txt.gz  ${OutputDestination}/. ; 
	</jobTransformCmd>
	<group>TrfRecPerf</group>
	<queue>atlasrttperf</queue>
      </jobTransform>

      <jobTransform userJobId="monitoring_reco_data12_muons">
	<doc>Reco_tf runs on 8TeV collision 8 data from the muons stream</doc>
	<jobTransformJobName>monitoring_reco_data12_muons</jobTransformJobName>
	<jobTransformCmd>
	  export TRF_ECHO=1; Reco_tf.py --inputBSFile root://eosatlas//eos/atlas/user/a/atlaspmb/data12_8TeV/data12_8TeV.00209109.physics_Muons.merge.RAW._lb0186._SFO-1._0001.1 --maxEvents 150 --outputESDFile myESD.pool.root  --outputAODFile myAOD.pool.root --preExec='rec.doTrigger=False;rec.doMonitoring=True;from PerfMonComps.PerfMonFlags import jobproperties as pmjp;pmjp.PerfMonFlags.doPostProcessing=True;pmjp.PerfMonFlags.doSemiDetailedMonitoringFullPrint=True;' | tee  __log.txt; 
	  echo $? &gt;  __exitcode ; 
	  touch __done ;
	  grep  -i "Reco_tf" jobReport.txt  | head -n1 | awk -F\" '{print $2}' &gt; __command.sh;
	  for f in ntuple*.pmon.gz; do if [ -f "$f" ]; then tar xf $f "*.pmonsd.*" ; fi; done ; 
	  checkxAOD.py myESD.pool.root &gt; myESD.pool.root.checkfile.txt ; 
	  checkxAOD.py myAOD.pool.root &gt; myAOD.pool.root.checkfile.txt ;  
	  export userJobId="monitoring_reco_data12_muons"; 
	  export headDir="/afs/cern.ch/atlas/project/pmb/new_pmb/archive/custom";
	  export OutputDestination=${headDir}/`date +'%d/%m/%Y'`/`basename ${ATLAS_RELEASE_BASE}`/`basename $ROOTSYS`/${userJobId}; 
	  gzip *txt; 
	  mkdir -p                       ${OutputDestination} ; 
	  rsync -avz ntuple*             ${OutputDestination}/. ; 
	  rsync -avz __*                 ${OutputDestination}/. ; 
	  rsync -avz *.checkfile.txt.gz  ${OutputDestination}/. ; 
	</jobTransformCmd>
	<group>TrfRecPerf</group>
	<queue>atlasrttperf</queue>
      </jobTransform>


      <jobTransform userJobId="systemtrigger_reco_mc15_ttbar_valid_13tev_25ns_mu00_to_mu40">
	<doc>Reco_tf runs on 13TeV collision mc ttbar 25 ns</doc>
	<jobTransformJobName>systemtrigger_reco_mc15_ttbar_valid_13tev_25ns_mu00_to_mu40</jobTransformJobName>
	<jobTransformCmd>
	  export TRF_ECHO=1; Reco_tf.py --inputRDOFile root://eosatlas//eos/atlas/user/a/atlaspmb/mc/valid1.110401.PowhegPythia_P2012_ttbar_nonallhad.recon.RDO.e3099_s2578_r6220_tid05191878_00/RDO.05191878._000121.pool.root.1 --maxEvents 100 --outputESDFile myESD.pool.root --outputAODFile myAOD.pool.root --preExec='from PerfMonComps.PerfMonFlags import jobproperties as pmjp;pmjp.PerfMonFlags.doPostProcessing=True;pmjp.PerfMonFlags.doSemiDetailedMonitoringFullPrint=True;rec.doTrigger=True;rec.doForwardDet=False;rec.doInDet=True;rec.doMuon=True;rec.doCalo=True;rec.doEgamma=False;rec.doMuonCombined=False;rec.doJetMissingETTag=False;rec.doTau=False;from RecExConfig.RecAlgsFlags import recAlgs;recAlgs.doMuonSpShower=False;rec.doBTagging=False;recAlgs.doEFlow=False;recAlgs.doEFlowJet=False;recAlgs.doMissingET=False;recAlgs.doMissingETSig=False; from JetRec.JetRecFlags import jetFlags;jetFlags.Enabled=False;' | tee  __log.txt; 
	  echo $? &gt;  __exitcode ; 
	  touch __done ;
	  grep  -i "Reco_tf" jobReport.txt  | head -n1 | awk -F\" '{print $2}' &gt; __command.sh;
	  for f in ntuple*.pmon.gz; do if [ -f "$f" ]; then tar xf $f "*.pmonsd.*" ; fi; done ; 
	  checkxAOD.py myESD.pool.root &gt; myESD.pool.root.checkfile.txt ; 
	  checkxAOD.py myAOD.pool.root &gt; myAOD.pool.root.checkfile.txt ;  
	  export userJobId="systemtrigger_reco_mc15_ttbar_valid_13tev_25ns_mu00_to_mu40"; 
	  export headDir="/afs/cern.ch/atlas/project/pmb/new_pmb/archive/custom";
	  export OutputDestination=${headDir}/`date +'%d/%m/%Y'`/`basename ${ATLAS_RELEASE_BASE}`/`basename $ROOTSYS`/${userJobId}; 
	  gzip *txt; 
	  mkdir -p                       ${OutputDestination} ; 
	  rsync -avz ntuple*             ${OutputDestination}/. ; 
	  rsync -avz __*                 ${OutputDestination}/. ; 
	  rsync -avz *.checkfile.txt.gz  ${OutputDestination}/. ; 
	</jobTransformCmd>
	<group>TrfRecPerf</group>
	<queue>atlasrttperf</queue>
      </jobTransform>

      <jobTransform userJobId="trigger_reco_mc15_ttbar_valid_13tev_25ns_mu00_to_mu40">
	<doc>Reco_tf runs on 13TeV collision mc ttbar 25 ns</doc>
	<jobTransformJobName>trigger_reco_mc15_ttbar_valid_13tev_25ns_mu00_to_mu40</jobTransformJobName>
	<jobTransformCmd>
	  export TRF_ECHO=1; Reco_tf.py --inputRDOFile root://eosatlas//eos/atlas/user/a/atlaspmb/mc/valid1.110401.PowhegPythia_P2012_ttbar_nonallhad.recon.RDO.e3099_s2578_r6220_tid05191878_00/RDO.05191878._000121.pool.root.1 --maxEvents 100 --outputESDFile myESD.pool.root  --outputAODFile myAOD.pool.root --preExec='rec.doTrigger=True;rec.doMonitoring=True;from PerfMonComps.PerfMonFlags import jobproperties as pmjp;pmjp.PerfMonFlags.doPostProcessing=True;pmjp.PerfMonFlags.doSemiDetailedMonitoringFullPrint=True;' | tee  __log.txt; 
	  echo $? &gt;  __exitcode ;
	  touch __done ;
	  grep  -i "Reco_tf" jobReport.txt  | head -n1 | awk -F\" '{print $2}' &gt; __command.sh;
	  for f in ntuple*.pmon.gz; do if [ -f "$f" ]; then tar xf $f "*.pmonsd.*" ; fi; done ; 
	  checkxAOD.py myESD.pool.root &gt; myESD.pool.root.checkfile.txt ; 
	  checkxAOD.py myAOD.pool.root &gt; myAOD.pool.root.checkfile.txt ;  
	  export userJobId="trigger_reco_mc15_ttbar_valid_13tev_25ns_mu00_to_mu40"; 
	  export headDir="/afs/cern.ch/atlas/project/pmb/new_pmb/archive/custom";
	  export OutputDestination=${headDir}/`date +'%d/%m/%Y'`/`basename ${ATLAS_RELEASE_BASE}`/`basename $ROOTSYS`/${userJobId}; 
	  gzip *txt; 
	  mkdir -p                       ${OutputDestination} ; 
	  rsync -avz ntuple*             ${OutputDestination}/. ; 
	  rsync -avz __*                 ${OutputDestination}/. ; 
	  rsync -avz *.checkfile.txt.gz  ${OutputDestination}/. ; 
	</jobTransformCmd>
	<group>TrfRecPerf</group>
	<queue>atlasrttperf</queue>
      </jobTransform>






    
    </jobList>

    <jobGroups>
      <jobGroup name="TrfRecPerf" parent="Transform">
	<!-- keep everything which is not huge -->
	<keepFilePattern>*.checkfile.txt</keepFilePattern>
	<keepFilePattern>*.pmon.gz</keepFilePattern>
	<keepFilePattern>*log*</keepFilePattern>
	<keepFilePattern>*exitcode*</keepFilePattern>
	<keepFilePattern>*.xml</keepFilePattern>
	<keepFilePattern>*.py</keepFilePattern>
	<keepFilePattern>*.pdf</keepFilePattern>
	<keepFilePattern>*.txt</keepFilePattern>
	<keepFilePattern>*.png</keepFilePattern>
	<keepFilePattern>*.out</keepFilePattern>
	<keepFilePattern>*.ascii</keepFilePattern>
	<keepFilePattern>last*</keepFilePattern>
	<keepFilePattern>*pickle</keepFilePattern>
	<keepFilePattern>jobReport*</keepFilePattern>
	<keepFilePattern>runargs*</keepFilePattern>
	<keepFilePattern>ntuple*perfmon*</keepFilePattern>
	<keepFilePattern>pmb-callgrind*log</keepFilePattern>
	<keepFilePattern>callgrind*bz2</keepFilePattern>
	<keepFilePattern>log.RAWtoESD</keepFilePattern>
	<keepFilePattern>log.ESDtoAOD</keepFilePattern>
	<keepFilePattern>log.AODtoDAOD</keepFilePattern>

      </jobGroup>
      
    </jobGroups>
    
  </rtt>
</unifiedTestConfiguration>
