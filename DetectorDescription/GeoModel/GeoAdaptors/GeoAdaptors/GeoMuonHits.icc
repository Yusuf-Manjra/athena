/*
  Copyright (C) 2002-2020 CERN for the benefit of the ATLAS collaboration
*/

#include "StoreGate/StoreGateSvc.h"
#include "StoreGate/StoreGate.h"

#include "MuonReadoutGeometry/MuonDetectorManager.h"
#include "MuonIdHelpers/MdtIdHelper.h"
#include "MuonIdHelpers/RpcIdHelper.h"
#include "MuonIdHelpers/CscIdHelper.h"
#include "MuonIdHelpers/TgcIdHelper.h"
#include "MuonIdHelpers/sTgcIdHelper.h"
#include "MuonIdHelpers/MmIdHelper.h"

#include "MuonSimEvent/MDTSimHitCollection.h"
#include "MuonSimEvent/MDTSimHit.h"
#include "MuonSimEvent/MdtHitIdHelper.h"
#include "MuonReadoutGeometry/MdtReadoutElement.h"

#include "MuonPrepRawData/MdtPrepDataContainer.h"
#include "MuonPrepRawData/RpcPrepDataContainer.h"
#include "MuonPrepRawData/TgcPrepDataContainer.h"
#include "MuonPrepRawData/CscPrepDataContainer.h"

#include "MuonSimEvent/RPCSimHitCollection.h"
#include "MuonSimEvent/RPCSimHit.h"
#include "MuonSimEvent/RpcHitIdHelper.h"
#include "MuonReadoutGeometry/RpcReadoutElement.h"

#include "MuonSimEvent/TGCSimHitCollection.h"
#include "MuonSimEvent/TGCSimHit.h"
#include "MuonSimEvent/TgcHitIdHelper.h"
#include "MuonReadoutGeometry/TgcReadoutElement.h"

#include "MuonSimEvent/CSCSimHitCollection.h"
#include "MuonSimEvent/CSCSimHit.h"
#include "MuonSimEvent/CscHitIdHelper.h"
#include "MuonReadoutGeometry/CscReadoutElement.h"

#include "MuonSimEvent/MMSimHitCollection.h"
#include "MuonSimEvent/MMSimHit.h"
#include "MuonSimEvent/sTGCSimHitCollection.h"
#include "MuonSimEvent/sTGCSimHit.h"
#include "MuonSimEvent/MicromegasHitIdHelper.h"
#include "MuonSimEvent/sTgcHitIdHelper.h"
#include "MuonSimEvent/sTgcSimIdToOfflineId.h"
#include "MuonSimEvent/MM_SimIdToOfflineId.h"
#include "MuonReadoutGeometry/sTgcReadoutElement.h"
#include "MuonReadoutGeometry/MMReadoutElement.h"


inline void GeoMDTHit::init()
{
    StoreGateSvc *detStore = StoreGate::pointer("DetectorStore");
    if(detStore->retrieve(s_man,"Muon").isSuccess())
      s_mdtID = s_man->mdtIdHelper();
}


inline GeoMDTHit::GeoMDTHit (const MDTSimHit & h) {
    m_hit = &h;
    if(!s_mdtID) init();
}


inline Amg::Vector3D GeoMDTHit::getGlobalPosition() const {



    HitID hitid = m_hit->MDTid();
    MdtHitIdHelper* mdthhelper = MdtHitIdHelper::GetHelper();

    std::string stname = mdthhelper->GetStationName(hitid);
    int         steta  = mdthhelper->GetZSector(hitid);
    int         stphi  = mdthhelper->GetPhiSector(hitid);
    int         ml     = mdthhelper->GetMultiLayer(hitid);
    int         tl     = mdthhelper->GetLayer(hitid);
    int         tube   = mdthhelper->GetTube(hitid);

    Identifier offid = s_mdtID->channelID(stname,
                                         steta,
                                         stphi,ml,tl,tube);
  
    if (offid == 0)
        std::cerr<<" Cannot build a valid Identifier; skip "<<std::endl;
  
  
    const MuonGM::MdtReadoutElement* mdtdet = s_man->getMdtReadoutElement(offid);
    if (mdtdet == NULL)
    {
        std::cerr<<"MDT readout element not found for Id = "
                 <<s_mdtID->show_to_string(offid)<<std::endl;
        return Amg::Vector3D(0,0,0);
    }

    // -------- Testing Sim to Offline ID conversion ---------
  

    Amg::Vector3D simHitPosLoc(m_hit->localPosition().x(), m_hit->localPosition().y(), m_hit->localPosition().z());
    Amg::Vector3D simHitPos = mdtdet->localToGlobalCoords(simHitPosLoc , offid );
    
    return simHitPos;
}

inline void GeoRPCHit::init()
{
    StoreGateSvc *detStore = StoreGate::pointer("DetectorStore");
    if(detStore->retrieve(s_man,"Muon").isSuccess())
      s_rpcID = s_man->rpcIdHelper();
}

inline GeoRPCHit::GeoRPCHit (const RPCSimHit & h) {
    m_hit = &h;
    if(!s_rpcID) init();
}

inline Amg::Vector3D GeoRPCHit::getGlobalPosition() const {

    HitID hitid = m_hit->RPCid();
    RpcHitIdHelper* rpchhelper = RpcHitIdHelper::GetHelper(s_rpcID->gasGapMax());
    std::string stname = rpchhelper->GetStationName(hitid);
    int         steta  = rpchhelper->GetZSector(hitid);
    int         stphi  = rpchhelper->GetPhiSector(hitid);
    int         dbr    = rpchhelper->GetDoubletR(hitid);
    int         dbz    = rpchhelper->GetDoubletZ(hitid);
    int         dbp    = rpchhelper->GetDoubletPhi(hitid);
    int         gg     = rpchhelper->GetGasGapLayer(hitid);
    int         mfi    = rpchhelper->GetMeasuresPhi(hitid);
    int         strip  = 1;
    Identifier offid = s_rpcID->channelID(stname,
                                         steta,
                                         stphi,
                                         dbr, dbz, dbp, gg, mfi, strip);
    if ( offid == 0)
        std::cerr<<" Cannot build a valid Identifier; skip "<<std::endl;

    const MuonGM::RpcReadoutElement* rpcdet = s_man->getRpcReadoutElement(offid);
    if (rpcdet != NULL)
    {
      Amg::Vector3D xU;
      Amg::Vector3D localHit(m_hit->localPosition().x(),m_hit->localPosition().y(),m_hit->localPosition().z());
        xU = rpcdet->localToGlobalCoords(localHit,offid);

        return xU;
    }
    else
    {
        std::cerr<<"RPC readout element not found for Id = "
                 <<s_rpcID->show_to_string(offid)<<std::endl;
        return Amg::Vector3D(0,0,0);
    }

}

inline void GeoTGCHit::init()
{
    StoreGateSvc *detStore = StoreGate::pointer("DetectorStore");
    if(detStore->retrieve(s_man,"Muon").isSuccess())
      s_tgcID = s_man->tgcIdHelper();
}

inline GeoTGCHit::GeoTGCHit (const TGCSimHit & h) {
    m_hit = &h;
    if(!s_tgcID) init();
}

inline Amg::Vector3D GeoTGCHit::getGlobalPosition() const {

    HitID hitid = m_hit->TGCid();
    TgcHitIdHelper* tgchhelper = TgcHitIdHelper::GetHelper();
    std::string stname = tgchhelper->GetStationName(hitid);
    int         steta  = tgchhelper->GetStationEta(hitid);
    int         stphi  = tgchhelper->GetStationPhi(hitid);
    int         gg     = tgchhelper->GetGasGap(hitid);
    int         isstrip= 0;
    int         channel= 1;
    Identifier offid = s_tgcID->channelID(stname,
                                         steta,
                                         stphi,
                                         gg, isstrip, channel);
    if ( offid == 0)
        std::cerr<<" Cannot build a valid Identifier; skip "<<std::endl;

    const MuonGM::TgcReadoutElement* tgcdet = s_man->getTgcReadoutElement(offid);
    if (tgcdet != NULL)
    {
        Amg::Vector3D xU;
        Amg::Vector3D localHit(m_hit->localPosition().x(),m_hit->localPosition().y(),m_hit->localPosition().z());
        xU = tgcdet->localToGlobalCoords(localHit,offid);

        return xU;
    }
    else
    {
        std::cerr<<"TGC readout element not found for Id = "
                 <<s_tgcID->show_to_string(offid)<<std::endl;
        return Amg::Vector3D(0,0,0);
    }
}

inline void GeoCSCHit::init()
{
    StoreGateSvc *detStore = StoreGate::pointer("DetectorStore");
    if(detStore->retrieve(s_man,"Muon").isSuccess())
      s_cscID = s_man->cscIdHelper();
}
inline GeoCSCHit::GeoCSCHit (const CSCSimHit & h) {
    m_hit = &h;
    if (!s_cscID) init();
}

inline Amg::Vector3D GeoCSCHit::getGlobalPosition() const {

    HitID hitid = m_hit->CSCid();
    CscHitIdHelper* cschhelper = CscHitIdHelper::GetHelper();

    std::string stname = cschhelper->GetStationName(hitid);
    int         steta  = cschhelper->GetZSector(hitid);
    int         stphi  = cschhelper->GetPhiSector(hitid);
    int         ml     = cschhelper->GetChamberLayer(hitid);
    int         wl     = cschhelper->GetWireLayer(hitid);
    int        measphi = 0;
    int        channel = 1;
    
    Identifier offid = s_cscID->channelID(stname,
                                         steta,
                                         stphi,ml,wl,measphi,channel);
  
    if (offid == 0)
        std::cerr<<" Cannot build a valid Identifier; skip "<<std::endl;
  
  
    const MuonGM::CscReadoutElement* cscdet = s_man->getCscReadoutElement(offid);
    if (cscdet == NULL)
    {
        std::cerr<<"CSC readout element not found for Id = "
                 <<s_cscID->show_to_string(offid)<<std::endl;
        return Amg::Vector3D(0,0,0);
    }

    Amg::Vector3D xU;
    Amg::Vector3D localHit(m_hit->getHitStart().x(),m_hit->getHitStart().y(),m_hit->getHitStart().z());
    xU = cscdet->localToGlobalCoords(localHit,offid);

    return xU;
  
}

inline void GeoMMHit::init()
{
    StoreGateSvc *detStore = StoreGate::pointer("DetectorStore");
    if(detStore->retrieve(s_man,"Muon").isSuccess())
      s_mmID = s_man->mmIdHelper();
}

inline GeoMMHit::GeoMMHit (const MMSimHit & h) {
    m_hit = &h;
    if (!s_mmID) init();
}

inline Amg::Vector3D GeoMMHit::getGlobalPosition() const {

    HitID hitid = m_hit->MMId();
    MM_SimIdToOfflineId simToOffline(*s_mmID);
    Identifier offid = simToOffline.convert(hitid);
  
    if (offid == 0)
        std::cerr<<" Cannot build a valid Identifier; skip "<<std::endl;
  
  
    const MuonGM::MMReadoutElement* mmdet = s_man->getMMReadoutElement(offid);
    if (mmdet == NULL)
    {
        std::cerr<<"MM readout element not found for Id = "
                 <<s_mmID->show_to_string(offid)<<std::endl;
        return Amg::Vector3D(0,0,0);
    }

    Amg::Vector3D xU(m_hit->globalPosition().x(),m_hit->globalPosition().y(),m_hit->globalPosition().z());

    return xU;
  
}
inline Amg::Vector3D GeoMMHit::getTrkGlobalPosition() const {

    HitID hitid = m_hit->MMId();
    MM_SimIdToOfflineId simToOffline(*s_mmID);
    Identifier offid = simToOffline.convert(hitid);
  
    if (offid == 0)
        std::cerr<<" Cannot build a valid Identifier; skip "<<std::endl;
  
  
    const MuonGM::MMReadoutElement* mmdet = s_man->getMMReadoutElement(offid);
    if (mmdet == NULL)
    {
        std::cerr<<"MM readout element not found for Id = "
                 <<s_mmID->show_to_string(offid)<<std::endl;
        return Amg::Vector3D(0,0,0);
    }
    Amg::Vector3D trkLocP = getTrkLocalPosition();
    const Amg::Vector3D *pp= (mmdet->surface(offid)).Trk::Surface::localToGlobal(Amg::Vector2D(trkLocP.x(),trkLocP.y()));
    Amg::Vector3D trkGloP = Amg::Vector3D(pp->x(),pp->y(),pp->z());
    return trkGloP;

}
inline Amg::Vector3D GeoMMHit::getTrkLocalPosition() const {


    HitID hitid = m_hit->MMId();
    MM_SimIdToOfflineId simToOffline(*s_mmID);
    Identifier offid = simToOffline.convert(hitid);
  
    if (offid == 0)
        std::cerr<<" Cannot build a valid Identifier; skip "<<std::endl;
  
  
    const MuonGM::MMReadoutElement* mmdet = s_man->getMMReadoutElement(offid);
    if (mmdet == NULL)
    {
        std::cerr<<"MM readout element not found for Id = "
                 <<s_mmID->show_to_string(offid)<<std::endl;
    }

    Amg::Transform3D gToL = mmdet->absTransform().inverse();
    Amg::Vector3D hpos(m_hit->globalPosition().x(),m_hit->globalPosition().y(),m_hit->globalPosition().z());
    Amg::Vector3D locp = gToL*hpos;
    Amg::Vector3D localHit(0.,locp.y(),locp.z());
    Amg::Vector3D trkLocHit=Amg::AngleAxis3D(90.*CLHEP::deg,Amg::Vector3D(0.,1.,0.))*localHit;

    return trkLocHit;
}

inline void GeosTGCHit::init()
{
    StoreGateSvc *detStore = StoreGate::pointer("DetectorStore");
    if(detStore->retrieve(s_man,"Muon").isSuccess())
      s_stgcID = s_man->stgcIdHelper();
}
inline GeosTGCHit::GeosTGCHit (const sTGCSimHit & h) {
    m_hit = &h;
    if (!s_stgcID) init();
}

inline Amg::Vector3D GeosTGCHit::getGlobalPosition() const {

    HitID hitid = m_hit->sTGCId();
    sTgcSimIdToOfflineId simToOffline(*s_stgcID);
    Identifier offid = simToOffline.convert(hitid);
  
    if (offid == 0)
        std::cerr<<" Cannot build a valid Identifier; skip "<<std::endl;
  
  
    const MuonGM::sTgcReadoutElement* stgcdet = s_man->getsTgcReadoutElement(offid);
    if (stgcdet == NULL)
    {
        std::cerr<<"sTGC readout element not found for Id = "
                 <<s_stgcID->show_to_string(offid)<<std::endl;
        return Amg::Vector3D(0,0,0);
    }

    Amg::Vector3D xU(m_hit->globalPosition().x(),m_hit->globalPosition().y(),m_hit->globalPosition().z());

    return xU;
  
}

