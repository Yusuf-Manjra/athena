/*
  Copyright (C) 2002-2017 CERN for the benefit of the ATLAS collaboration
*/

#include "InDetSimEvent/SiHit.h"
#include "InDetReadoutGeometry/SiDetectorElement.h"
#include "InDetReadoutGeometry/SCT_DetectorManager.h"
#include "PixelReadoutGeometry/PixelDetectorManager.h"
#include "StoreGate/StoreGateSvc.h"
#include "StoreGate/StoreGate.h"
#include "InDetIdentifier/PixelID.h"
#include "InDetIdentifier/SCT_ID.h"
#include "GeoPrimitives/CLHEPtoEigenConverter.h"

inline void GeoSiHit::init() {

  StoreGateSvc *detStore = StoreGate::pointer("DetectorStore");
  if(detStore->retrieve(s_sct,"SCT").isFailure())
    	s_sct = 0;
  if(detStore->retrieve(s_pix,"Pixel").isFailure())
	s_pix = 0;	
  if(detStore->retrieve(s_sID,"SCT_ID").isFailure())
	s_sID = 0;
  if(detStore->retrieve(s_pID,"PixelID").isFailure())
	s_pID = 0;
}

inline GeoSiHit::GeoSiHit (const SiHit & h) {
  m_hit = &h;
  if (!s_sct || ! s_pix) init();
}

inline HepGeom::Point3D<double> GeoSiHit::getGlobalPosition() const {

  int Barrel = m_hit->getBarrelEndcap();
  if (Barrel== 1) Barrel = -2;
  Identifier id;
  const InDetDD::SiDetectorElement *geoelement=NULL;
  if (m_hit->isPixel()) {
    
    id = s_pID->wafer_id(Barrel,
			m_hit->getLayerDisk(), 
			m_hit->getPhiModule(), 
			m_hit->getEtaModule());
    geoelement = s_pix->getDetectorElement(id);      
  }
  else {
    id = s_sID->wafer_id(Barrel,
			m_hit->getLayerDisk(), 
			m_hit->getPhiModule(), 
			m_hit->getEtaModule(), 
			m_hit->getSide() );
    geoelement = s_sct->getDetectorElement(id);      
  }
  
  
  if (geoelement) {

    const HepGeom::Point3D<double> globalStartPos = Amg::EigenTransformToCLHEP(geoelement->transformHit()) * HepGeom::Point3D<double>(m_hit->localStartPosition());
    
    double x=globalStartPos.x();
    double y=globalStartPos.y();
    double z=globalStartPos.z();
    return HepGeom::Point3D<double>(x,y,z);
  }

  return HepGeom::Point3D<double>(0.0,0.0,0.0);
}

