/*
  Copyright (C) 2002-2023 CERN for the benefit of the ATLAS collaboration
*/

#include "GeoPrimitives/CLHEPtoEigenConverter.h"
#include "HGTD_Identifier/HGTD_ID.h"
#include "HGTD_ReadoutGeometry/HGTD_DetectorManager.h"
#include "InDetIdentifier/PixelID.h"
#include "InDetIdentifier/SCT_ID.h"
#include "InDetIdentifier/PLR_ID.h"
#include "InDetReadoutGeometry/SiDetectorElement.h"
#include "InDetSimEvent/SiHit.h"
#include "PixelReadoutGeometry/PixelDetectorManager.h"
#include "SCT_ReadoutGeometry/SCT_DetectorManager.h"


inline GeoSiHit::GeoSiHit (const SiHit & h) {
  m_hit = &h;
}


inline HepGeom::Point3D<double> GeoSiHit::getGlobalPosition() const {

  int Barrel = m_hit->getBarrelEndcap();
  if (Barrel== 1) Barrel = -2;
  Identifier id;
  const InDetDD::SolidStateDetectorElementBase *geoelement{};
  if (m_hit->isPixel()) {
    id = pixID()->wafer_id(Barrel,
			m_hit->getLayerDisk(),
			m_hit->getPhiModule(),
			m_hit->getEtaModule());
    geoelement = pixMgr()->getDetectorElement(id);
  } else if (m_hit->isSCT()) {
    id = sctID()->wafer_id(Barrel,
			m_hit->getLayerDisk(),
			m_hit->getPhiModule(),
			m_hit->getEtaModule(),
			m_hit->getSide() );
    geoelement = sctMgr()->getDetectorElement(id);
  } else if (m_hit->isPLR()) {
    id = plrID()->wafer_id(Barrel,
            m_hit->getLayerDisk(),
            m_hit->getPhiModule(),
            m_hit->getEtaModule());
    geoelement = plrMgr()->getDetectorElement(id);
  } else if (m_hit->isHGTD()) {
    id = hgtdID()->wafer_id(Barrel,
			m_hit->getLayerDisk(),
			m_hit->getPhiModule(),
			m_hit->getEtaModule());
    geoelement = hgtdMgr()->getDetectorElement(id);
  }

  if (geoelement) {
    if(m_hit->isHGTD()){
      // This special treatment is necessary because the localStartPosition and localEndPosition 
      // of the SiHit in the HGTD SD class https://gitlab.cern.ch/atlas/athena/-/blob/master/HighGranularityTimingDetector/HGTD_G4/HGTD_G4_SD/src/HGTDSensorGmxSD.cxx#L83-L89
      // are set with coordinates in the (y, z, x) order.
      const HepGeom::Point3D<double> localHit = m_hit->localStartPosition(); 
      HepGeom::Point3D<double> flippedHit;
      flippedHit[0]=localHit.y();
      flippedHit[1]=localHit.z();
      flippedHit[2]=localHit.x();
      const HepGeom::Point3D<double> globalStartPos = Amg::EigenTransformToCLHEP(geoelement->transformHit()) * (flippedHit);
      double x=globalStartPos.x();
      double y=globalStartPos.y();
      double z=globalStartPos.z();
      return HepGeom::Point3D<double>(x,y,z);
    }else{
    const HepGeom::Point3D<double> globalStartPos = Amg::EigenTransformToCLHEP(geoelement->transformHit()) * HepGeom::Point3D<double>(m_hit->localStartPosition());

    double x=globalStartPos.x();
    double y=globalStartPos.y();
    double z=globalStartPos.z();
    return HepGeom::Point3D<double>(x,y,z);
    }
  }

  return HepGeom::Point3D<double>(0.0,0.0,0.0);
}
