/**    @file HLTBphysMonTool.h
 *   Class declaration for HLTBphysMonTool
 *
 *
 *
 *    @author name (uid@cern.ch)
 *
 *
 */

#ifndef HLTBPHYSMONTOOL_H
#define HLTBPHYSMONTOOL_H

// C++
#include <string>
#include <vector>
#include <map>

// TrigHLTMonitoring interface
#include "TrigHLTMonitoring/IHLTMonTool.h"

namespace Trig { class chainGroup; }
namespace BPhys { class BCompositeParticleBuilder; }
namespace Analysis { class PrimaryVertexRefitter;}

///Concrete monitoring tool derived from MonitorToolBase
class HLTBphysMonTool : public IHLTMonTool
{
    
public:
    HLTBphysMonTool(   const std::string & type,
                    const std::string & name,
                    const IInterface* parent);
    virtual ~HLTBphysMonTool();
    
    StatusCode init() ;
    StatusCode book() ;
    StatusCode fill() ;
    StatusCode JpsiFinder() ;
    StatusCode Triggers() ;
    StatusCode L2Tracks() ;
    StatusCode EFTracks() ;
    StatusCode L2DsPhiPiMon() ;
    StatusCode L2TopoDiMuMon() ;
    StatusCode L2TopoDiMuXMon() ;
    StatusCode L2DiMuMon() ;
    StatusCode L2DiMuXMon() ;
    StatusCode L2BJpsieeMon() ;
    StatusCode L2BJpsimumu();
    StatusCode EFDsPhiPiMon() ;
    StatusCode EFTopoDiMuMon() ;
    StatusCode EFDiMuMon() ;
    StatusCode EFBJpsimumu();
    StatusCode CompareDiMuL2EF();
    StatusCode CompareTopoDiMuL2EF();
    StatusCode proc(); // called by procHistograms
    
private:
    //   std::vector<TH1F *> m_HistoVectorBphys;
    
    std::vector<std::string> m_TrigNames;
    std::vector<bool> m_TrigNames1D;
    
    int L1passed;
    int L2passed;
    int EFpassed;
    
    int L1DiMu;
    int L2DiMu;
    int EFDiMu;
	
    //std::vector<std::string> TrigName;
    //std::vector<bool> TrigName1D;
    
    std::vector<std::string> EffNum;
    std::vector<std::string> EffDenom;
    std::map<std::string, TH1*> EffHistMap;
    
    const Trig::ChainGroup *m_all;
    const Trig::ChainGroup *m_allL1;
    const Trig::ChainGroup *m_allL2;
    const Trig::ChainGroup *m_allEF;
    
    // For converting to BPhys objects
    BPhys::BCompositeParticleBuilder* m_bcpBuilder;
    // Primary vertex refitting
    Analysis::PrimaryVertexRefitter* m_pvRefitter;
    
    // Method for managing the histogram divisions
    void divide(TH1 *num, TH1 *den, TH1 *quo);
};

#endif
