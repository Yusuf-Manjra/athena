/*
  Copyright (C) 2002-2020 CERN for the benefit of the ATLAS collaboration
*/

template<typename CONTAINER>
size_t InputMakerBase::matchDecision(const TrigCompositeUtils::DecisionContainer* outDecisions, 
  const TrigCompositeUtils::Decision* toMatch, 
  const std::string& linkNameToMatch) const
{
  const std::vector<TrigCompositeUtils::LinkInfo<CONTAINER>> myObject = TrigCompositeUtils::findLinks<CONTAINER>(toMatch, linkNameToMatch, TrigDefs::lastFeatureOfType);
  
  if (myObject.size() != 1) {
    ATH_MSG_ERROR("InputMakerBase::matchDecision Did not locate exactly one object of type '" << ClassID_traits<CONTAINER>::typeName() << "' having searched for a link named '" << linkNameToMatch 
      << "', found " << myObject.size() << ". Unable to match this Decision object.");
    for (const auto& li : myObject) {
      ATH_MSG_ERROR("  -- " << li.link.dataID() << ":" << li.link.index() << ". Dump:" << *(li.source)); 
    }
    return std::numeric_limits<std::size_t>::max();
  }

  // Look for match
  for (size_t index = 0; index < outDecisions->size(); ++index) {
    const TrigCompositeUtils::Decision* checkDecision = outDecisions->at(index);
    if (checkDecision == nullptr) {
      ATH_MSG_ERROR("Failed to get Decision object " << index << " of " << outDecisions->size());
      return std::numeric_limits<std::size_t>::max();
    }
    const std::vector<TrigCompositeUtils::LinkInfo<CONTAINER>> checkObject = TrigCompositeUtils::findLinks<CONTAINER>(checkDecision, linkNameToMatch, TrigDefs::lastFeatureOfType);
    if (checkObject.size() != 1) {
      ATH_MSG_ERROR("Logic error. Expect myObject().size() == 1 and checkObject.size() == 1."
        << " But have checkObject.size() = " << checkObject.size() << ". Unable to match this Decision object.");
      return std::numeric_limits<std::size_t>::max();
    }
    if (myObject.at(0).link == checkObject.at(0).link) {
      return index;
    }
  }

  return std::numeric_limits<std::size_t>::max();
}
