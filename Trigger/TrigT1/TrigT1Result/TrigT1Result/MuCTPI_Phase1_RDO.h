// Dear emacs, this is -*- c++ -*-

/*
  Copyright (C) 2002-2022 CERN for the benefit of the ATLAS collaboration
*/

#ifndef TRIGT1RESULT_MUCTPI_PHASE1_RDO_H
#define TRIGT1RESULT_MUCTPI_PHASE1_RDO_H

// STL include(s):
#include <vector>
#include <string>
#include <cstdint>

// Gaudi/Athena include(s):
#include "AthenaKernel/CLASS_DEF.h"

//for slice etc structs
#include "TrigT1MuctpiBits/HelpersPhase1.h"

/**
 *   @short Class representing the readout data of the MuCTPI hardware and simulation
 *
 *          The MuCTPI hardware and the simulation can send all the muon candidates
 *          recevied in a maximal window spanning +-3 BCs around the triggered BC
 *          (giving a window of maximally 5 BCs) together with the muon multiplicities
 *          in the same window to the readout system. This class represents the ROD
 *          fragment generated by the MuCTPI to Athena.
 *
 *          For a detailed description of the data format of the MuCTPI, see
 *          the MUCTPI documentation (https://edms.cern.ch/file/2712287/1/Readout-Data-Format.xlsx).
 *
 *     @see LVL1MUCTPI::L1Muctpi
 *     @see MuCTPIByteStreamCnv
 */
class MuCTPI_Phase1_RDO {

public:
  /**
   * This constructor can be used to fill the object with a vector of Slice structs and a vector of errorBits
   *
   * @param slices                   A vector of Slice objects, each including the decoded information
   * @param errorBits                A vector of bool values, corresponding to the last payload word in the MUCTPI DAQ format
   */
  MuCTPI_Phase1_RDO(  std::vector< LVL1::MuCTPIBits::Slice >&& slices,
               std::vector< size_t >&& errorBits )
      : m_slices( std::move(slices) ),
        m_errorBits( std::move(errorBits) ) {
    }

  /// Default constructor
  /**
   * A parameter-less constructor to be able to use the class with POOL.
   */
  MuCTPI_Phase1_RDO () = default;

  /// Destructor
  /**
   * The destructor doesn't really have to do anything.
   */
  ~MuCTPI_Phase1_RDO () = default;

  /// Function returning the timeslice data words
  /**
   * The MUCTPI data words are grouped in timeslices. Each timeslice has a header, a set of multiplicity words, N candidate words and M TOB words
   *
   * @return A vector of all the slices
   */
  const std::vector< LVL1::MuCTPIBits::Slice >& slices() const { return m_slices; }

  /// Function returning the fragment error bits vector
  /**
   * The last MUCTPI payload data word contains errorBits related to the event.
   *
   * @return A vector of all the error bits noted in the last payload word of the fragment. They are defined in the MUCTPI data format.
   */
  const std::vector< size_t >& errorBits() const { return m_errorBits; }

private:
  /// Variable storing the timeslices read out
  std::vector< LVL1::MuCTPIBits::Slice > m_slices;
  /// Variable storing the erorrBits read out
  std::vector< size_t > m_errorBits;

}; // class MuCTPI_Phase1_RDO

CLASS_DEF( MuCTPI_Phase1_RDO , 95939798 , 0 )

#endif // TRIGT1RESULT_MUCTPI_PHASE1_RDO_H
