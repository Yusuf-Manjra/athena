/*
  Copyright (C) 2002-2021 CERN for the benefit of the ATLAS collaboration
*/
/*********************************
 * Trigo.cxx
 * author : Ignacio Aracena <ignacio.aracena@cern.ch>
 * Created June 2015
 *
 * @brief Lookup table for trigonometric functions.
 *        Resolution is in PI/32. Values is in Qm.n format 
 *        with the MSB reserved for sign, and m=1, n = 7
 *
 **********************************/

#include "L1TopoSimulationUtils/Trigo.h"
#include <cmath>

const std::unordered_map<unsigned,std::string> TSU::Trigo::Cosleg=
  {
   //legacy
   {0,"010000000"},  // 1.0
   {1,"001111111"},  // 0.9951847266721969
   {2,"001111110"},  // 0.9807852804032304
   {3,"001111010"},  // 0.9569403357322088
   {4,"001110110"},  // 0.9238795325112867
   {5,"001110001"},  // 0.881921264348355  // 5
   {6,"001101010"},  // 0.8314696123025452
   {7,"001100011"},  // 0.773010453362737
   {8,"001011011"},  // 0.7071067811865476
   {9,"001010001"},  // 0.6343932841636455
   {10,"001000111"},  // 0.5555702330196023 // 10
   {11,"000111100"},  // 0.4713967368259978
   {12,"000110001"},  // 0.38268343236508984
   {13,"000100101"},  // 0.29028467725446233
   {14,"000011001"},  // 0.19509032201612833
   {15,"000001101"},  // 0.09801714032956077 // 15 
   {16,"000000000"},  // 6.123233995736766e-17
   {17,"111110011"},  // -0.09801714032956065
   {18,"111100111"},  // -0.1950903220161282
   {19,"111011011"},  // -0.29028467725446216
   {20,"111001111"},  // -0.3826834323650897 // 20
   {21,"111000100"},  // -0.4713967368259977
   {22,"110111001"},  // -0.555570233019602
   {23,"110101111"},  // -0.6343932841636454
   {24,"110100101"},  // -0.7071067811865475
   {25,"110011101"},  // -0.773010453362737  // 25
   {26,"110010110"},  // -0.8314696123025453
   {27,"110001111"},  // -0.8819212643483549
   {28,"110001010"},  // -0.9238795325112867
   {29,"110000110"},  // -0.9569403357322088
   {30,"110000010"},  // -0.9807852804032304 // 30 
   {31,"110000001"},  // -0.9951847266721968
   {32,"110000000"},  // -1.0
   {33,"110000001"},  // -0.9951847266721969
   {34,"110000010"},  // -0.9807852804032304
   {35,"110000110"},  // -0.9569403357322089 // 35
   {36,"110001010"},  // -0.9238795325112868
   {37,"110001111"},  // -0.881921264348355
   {38,"110010110"},  // -0.8314696123025455
   {39,"110011101"},  // -0.7730104533627371
   {40,"110100101"},  // -0.7071067811865477 // 40
   {41,"110101111"},  // -0.6343932841636459
   {42,"110111001"},  // -0.5555702330196022
   {43,"111000100"},  // -0.47139673682599786
   {44,"111001111"},  // -0.38268343236509034
   {45,"111011011"},  // -0.29028467725446244 // 45
   {46,"111100111"},  // -0.19509032201612866
   {47,"111110011"},  // -0.09801714032956045
   {48,"000000000"},  // -1.8369701987210297e-16
   {49,"000001101"},  // 0.09801714032956009
   {50,"000011001"},  // 0.1950903220161283
   {51,"000100101"},  // 0.29028467725446205
   {52,"000110001"},  // 0.38268343236509
   {53,"000111100"},  // 0.4713967368259976
   {54,"001000111"},  // 0.5555702330196018
   {55,"001010001"},  // 0.6343932841636456
   {56,"001011011"},  // 0.7071067811865474
   {57,"001100011"},  // 0.7730104533627367
   {58,"001101010"},  // 0.8314696123025452
   {59,"001110001"},  // 0.8819212643483548
   {60,"001110110"},  // 0.9238795325112865
   {61,"001111010"},  // 0.9569403357322088
   {62,"001111110"},  // 0.9807852804032303
   {63,"001111111"}  // 0.9951847266721969
  };

//phase1
const std::unordered_map<unsigned,std::string> TSU::Trigo::Cos=
  {
   {0,"010000000000"}, // value = 1.0(1.0),	 argument value = 0.0
   {50,"001111111111"}, // value = 0.9987954562051724(0.9990234375),	 argument value = 0.04908738521234052
   {100,"001111111011"}, // value = 0.9951847266721969(0.9951171875),	 argument value = 0.09817477042468103
   {150,"001111110101"}, // value = 0.989176509964781(0.9892578125),	 argument value = 0.14726215563702155
   {200,"001111101100"}, // value = 0.9807852804032304(0.98046875),	 argument value = 0.19634954084936207
   {250,"001111100001"}, // value = 0.970031253194544(0.9697265625),	 argument value = 0.2454369260617026
   {300,"001111010100"}, // value = 0.9569403357322088(0.95703125),	 argument value = 0.2945243112740431
   {350,"001111000100"}, // value = 0.9415440651830208(0.94140625),	 argument value = 0.3436116964863836
   {400,"001110110010"}, // value = 0.9238795325112867(0.923828125),	 argument value = 0.39269908169872414
   {450,"001110011110"}, // value = 0.9039892931234433(0.904296875),	 argument value = 0.44178646691106466
   {500,"001110000111"}, // value = 0.881921264348355(0.8818359375),	 argument value = 0.4908738521234052
   {550,"001101101110"}, // value = 0.8577286100002721(0.857421875),	 argument value = 0.5399612373357456
   {600,"001101010011"}, // value = 0.8314696123025452(0.8310546875),	 argument value = 0.5890486225480862
   {650,"001100110110"}, // value = 0.8032075314806449(0.802734375),	 argument value = 0.6381360077604268
   {700,"001100011000"}, // value = 0.773010453362737(0.7734375),	 argument value = 0.6872233929727672
   {750,"001011110111"}, // value = 0.7409511253549591(0.7412109375),	 argument value = 0.7363107781851077
   {800,"001011010100"}, // value = 0.7071067811865476(0.70703125),	 argument value = 0.7853981633974483
   {850,"001010110000"}, // value = 0.6715589548470183(0.671875),	 argument value = 0.8344855486097889
   {900,"001010001010"}, // value = 0.6343932841636455(0.634765625),	 argument value = 0.8835729338221293
   {950,"001001100010"}, // value = 0.5956993044924335(0.595703125),	 argument value = 0.9326603190344698
   {1000,"001000111001"}, // value = 0.5555702330196023(0.5556640625),	 argument value = 0.9817477042468103
   {1050,"001000001110"}, // value = 0.5141027441932217(0.513671875),	 argument value = 1.030835089459151
   {1100,"000111100011"}, // value = 0.4713967368259978(0.4716796875),	 argument value = 1.0799224746714913
   {1150,"000110110110"}, // value = 0.4275550934302822(0.427734375),	 argument value = 1.1290098598838318
   {1200,"000110001000"}, // value = 0.38268343236508984(0.3828125),	 argument value = 1.1780972450961724
   {1250,"000101011001"}, // value = 0.33688985339222005(0.3369140625),	 argument value = 1.227184630308513
   {1300,"000100101001"}, // value = 0.29028467725446233(0.2900390625),	 argument value = 1.2762720155208536
   {1350,"000011111001"}, // value = 0.24298017990326398(0.2431640625),	 argument value = 1.325359400733194
   {1400,"000011001000"}, // value = 0.19509032201612833(0.1953125),	 argument value = 1.3744467859455345
   {1450,"000010010110"}, // value = 0.14673047445536175(0.146484375),	 argument value = 1.423534171157875
   {1500,"000001100100"}, // value = 0.09801714032956077(0.09765625),	 argument value = 1.4726215563702154
   {1550,"000000110010"}, // value = 0.049067674327418126(0.048828125),	 argument value = 1.521708941582556
   {1600,"000000000000"}, // value = 6.123233995736766e-17(0.0),	 argument value = 1.5707963267948966
   {1650,"111111001110"}, // value = -0.04906767432741801(-0.048828125),	 argument value = 1.6198837120072371
   {1700,"111110011100"}, // value = -0.09801714032956065(-0.09765625),	 argument value = 1.6689710972195777
   {1750,"111101101010"}, // value = -0.14673047445536164(-0.146484375),	 argument value = 1.718058482431918
   {1800,"111100111000"}, // value = -0.1950903220161282(-0.1953125),	 argument value = 1.7671458676442586
   {1850,"111100000111"}, // value = -0.24298017990326387(-0.2431640625),	 argument value = 1.8162332528565992
   {1900,"111011010111"}, // value = -0.29028467725446216(-0.2900390625),	 argument value = 1.8653206380689396
   {1950,"111010100111"}, // value = -0.33688985339221994(-0.3369140625),	 argument value = 1.9144080232812801
   {2000,"111001111000"}, // value = -0.3826834323650897(-0.3828125),	 argument value = 1.9634954084936207
   {2050,"111001001010"}, // value = -0.42755509343028186(-0.427734375),	 argument value = 2.012582793705961
   {2100,"111000011101"}, // value = -0.4713967368259977(-0.4716796875),	 argument value = 2.061670178918302
   {2150,"110111110010"}, // value = -0.5141027441932217(-0.513671875),	 argument value = 2.110757564130642
   {2200,"110111000111"}, // value = -0.555570233019602(-0.5556640625),	 argument value = 2.1598449493429825
   {2250,"110110011110"}, // value = -0.5956993044924334(-0.595703125),	 argument value = 2.2089323345553233
   {2300,"110101110110"}, // value = -0.6343932841636454(-0.634765625),	 argument value = 2.2580197197676637
   {2350,"110101010000"}, // value = -0.6715589548470184(-0.671875),	 argument value = 2.3071071049800045
   {2400,"110100101100"}, // value = -0.7071067811865475(-0.70703125),	 argument value = 2.356194490192345
   {2450,"110100001001"}, // value = -0.7409511253549589(-0.7412109375),	 argument value = 2.405281875404685
   {2500,"110011101000"}, // value = -0.773010453362737(-0.7734375),	 argument value = 2.454369260617026
   {2550,"110011001010"}, // value = -0.8032075314806448(-0.802734375),	 argument value = 2.5034566458293663
   {2600,"110010101101"}, // value = -0.8314696123025453(-0.8310546875),	 argument value = 2.552544031041707
   {2650,"110010010010"}, // value = -0.857728610000272(-0.857421875),	 argument value = 2.6016314162540475
   {2700,"110001111001"}, // value = -0.8819212643483549(-0.8818359375),	 argument value = 2.650718801466388
   {2750,"110001100010"}, // value = -0.9039892931234433(-0.904296875),	 argument value = 2.6998061866787286
   {2800,"110001001110"}, // value = -0.9238795325112867(-0.923828125),	 argument value = 2.748893571891069
   {2850,"110000111100"}, // value = -0.9415440651830207(-0.94140625),	 argument value = 2.7979809571034093
   {2900,"110000101100"}, // value = -0.9569403357322088(-0.95703125),	 argument value = 2.84706834231575
   {2950,"110000011111"}, // value = -0.970031253194544(-0.9697265625),	 argument value = 2.8961557275280905
   {3000,"110000010100"}, // value = -0.9807852804032304(-0.98046875),	 argument value = 2.945243112740431
   {3050,"110000001011"}, // value = -0.989176509964781(-0.9892578125),	 argument value = 2.9943304979527716
   {3100,"110000000101"}, // value = -0.9951847266721968(-0.9951171875),	 argument value = 3.043417883165112
   {3150,"110000000001"}, // value = -0.9987954562051724(-0.9990234375),	 argument value = 3.0925052683774528
   {3200,"110000000000"}, // value = -1.0(-1.0),	 argument value = 3.141592653589793
   {3250,"110000000001"}, // value = -0.9987954562051724(-0.9990234375),	 argument value = 3.1906800388021335
   {3300,"110000000101"}, // value = -0.9951847266721969(-0.9951171875),	 argument value = 3.2397674240144743
   {3350,"110000001011"}, // value = -0.989176509964781(-0.9892578125),	 argument value = 3.2888548092268146
   {3400,"110000010100"}, // value = -0.9807852804032304(-0.98046875),	 argument value = 3.3379421944391554
   {3450,"110000011111"}, // value = -0.970031253194544(-0.9697265625),	 argument value = 3.3870295796514958
   {3500,"110000101100"}, // value = -0.9569403357322089(-0.95703125),	 argument value = 3.436116964863836
   {3550,"110000111100"}, // value = -0.9415440651830208(-0.94140625),	 argument value = 3.485204350076177
   {3600,"110001001110"}, // value = -0.9238795325112868(-0.923828125),	 argument value = 3.5342917352885173
   {3650,"110001100010"}, // value = -0.9039892931234434(-0.904296875),	 argument value = 3.5833791205008576
   {3700,"110001111001"}, // value = -0.881921264348355(-0.8818359375),	 argument value = 3.6324665057131984
   {3750,"110010010010"}, // value = -0.8577286100002721(-0.857421875),	 argument value = 3.6815538909255388
   {3800,"110010101101"}, // value = -0.8314696123025455(-0.8310546875),	 argument value = 3.730641276137879
   {3850,"110011001010"}, // value = -0.8032075314806449(-0.802734375),	 argument value = 3.77972866135022
   {3900,"110011101000"}, // value = -0.7730104533627371(-0.7734375),	 argument value = 3.8288160465625602
   {3950,"110100001001"}, // value = -0.7409511253549591(-0.7412109375),	 argument value = 3.877903431774901
   {4000,"110100101100"}, // value = -0.7071067811865477(-0.70703125),	 argument value = 3.9269908169872414
   {4050,"110101010000"}, // value = -0.6715589548470187(-0.671875),	 argument value = 3.9760782021995817
   {4100,"110101110110"}, // value = -0.6343932841636459(-0.634765625),	 argument value = 4.025165587411922
   {4150,"110110011110"}, // value = -0.5956993044924331(-0.595703125),	 argument value = 4.074252972624263
   {4200,"110111000111"}, // value = -0.5555702330196022(-0.5556640625),	 argument value = 4.123340357836604
   {4250,"110111110010"}, // value = -0.5141027441932218(-0.513671875),	 argument value = 4.172427743048944
   {4300,"111000011101"}, // value = -0.47139673682599786(-0.4716796875),	 argument value = 4.221515128261284
   {4350,"111001001010"}, // value = -0.4275550934302825(-0.427734375),	 argument value = 4.270602513473625
   {4400,"111001111000"}, // value = -0.38268343236509034(-0.3828125),	 argument value = 4.319689898685965
   {4450,"111010100111"}, // value = -0.33688985339221994(-0.3369140625),	 argument value = 4.368777283898306
   {4500,"111011010111"}, // value = -0.29028467725446244(-0.2900390625),	 argument value = 4.417864669110647
   {4550,"111100000111"}, // value = -0.24298017990326412(-0.2431640625),	 argument value = 4.466952054322987
   {4600,"111100111000"}, // value = -0.19509032201612866(-0.1953125),	 argument value = 4.516039439535327
   {4650,"111101101010"}, // value = -0.1467304744553623(-0.146484375),	 argument value = 4.565126824747668
   {4700,"111110011100"}, // value = -0.09801714032956045(-0.09765625),	 argument value = 4.614214209960009
   {4750,"111111001110"}, // value = -0.04906767432741803(-0.048828125),	 argument value = 4.663301595172349
   {4800,"000000000000"}, // value = -1.8369701987210297e-16(0.0),	 argument value = 4.71238898038469
   {4850,"000000110010"}, // value = 0.04906767432741766(0.048828125),	 argument value = 4.76147636559703
   {4900,"000001100100"}, // value = 0.09801714032956009(0.09765625),	 argument value = 4.81056375080937
   {4950,"000010010110"}, // value = 0.14673047445536194(0.146484375),	 argument value = 4.859651136021712
   {5000,"000011001000"}, // value = 0.1950903220161283(0.1953125),	 argument value = 4.908738521234052
   {5050,"000011111001"}, // value = 0.24298017990326376(0.2431640625),	 argument value = 4.957825906446392
   {5100,"000100101001"}, // value = 0.29028467725446205(0.2900390625),	 argument value = 5.006913291658733
   {5150,"000101011001"}, // value = 0.3368898533922196(0.3369140625),	 argument value = 5.056000676871073
   {5200,"000110001000"}, // value = 0.38268343236509(0.3828125),	 argument value = 5.105088062083414
   {5250,"000110110110"}, // value = 0.42755509343028214(0.427734375),	 argument value = 5.154175447295755
   {5300,"000111100011"}, // value = 0.4713967368259976(0.4716796875),	 argument value = 5.203262832508095
   {5350,"001000001110"}, // value = 0.5141027441932216(0.513671875),	 argument value = 5.252350217720435
   {5400,"001000111001"}, // value = 0.5555702330196018(0.5556640625),	 argument value = 5.301437602932776
   {5450,"001001100010"}, // value = 0.5956993044924329(0.595703125),	 argument value = 5.350524988145116
   {5500,"001010001010"}, // value = 0.6343932841636456(0.634765625),	 argument value = 5.399612373357457
   {5550,"001010110000"}, // value = 0.6715589548470183(0.671875),	 argument value = 5.448699758569798
   {5600,"001011010100"}, // value = 0.7071067811865474(0.70703125),	 argument value = 5.497787143782138
   {5650,"001011110111"}, // value = 0.7409511253549589(0.7412109375),	 argument value = 5.546874528994478
   {5700,"001100011000"}, // value = 0.7730104533627367(0.7734375),	 argument value = 5.595961914206819
   {5750,"001100110110"}, // value = 0.803207531480645(0.802734375),	 argument value = 5.64504929941916
   {5800,"001101010011"}, // value = 0.8314696123025452(0.8310546875),	 argument value = 5.6941366846315
   {5850,"001101101110"}, // value = 0.857728610000272(0.857421875),	 argument value = 5.743224069843841
   {5900,"001110000111"}, // value = 0.8819212643483548(0.8818359375),	 argument value = 5.792311455056181
   {5950,"001110011110"}, // value = 0.9039892931234431(0.904296875),	 argument value = 5.841398840268521
   {6000,"001110110010"}, // value = 0.9238795325112865(0.923828125),	 argument value = 5.890486225480862
   {6050,"001111000100"}, // value = 0.9415440651830208(0.94140625),	 argument value = 5.939573610693203
   {6100,"001111010100"}, // value = 0.9569403357322088(0.95703125),	 argument value = 5.988660995905543
   {6150,"001111100001"}, // value = 0.970031253194544(0.9697265625),	 argument value = 6.037748381117884
   {6200,"001111101100"}, // value = 0.9807852804032303(0.98046875),	 argument value = 6.086835766330224
   {6250,"001111110101"}, // value = 0.9891765099647809(0.9892578125),	 argument value = 6.135923151542564
   {6300,"001111111011"}, // value = 0.9951847266721969(0.9951171875),	 argument value = 6.1850105367549055
   {6350,"001111111111"} // value = 0.9987954562051724(0.9990234375),	 argument value = 6.234097921967246
  };


const std::unordered_map<unsigned,std::string> TSU::Trigo::Sinleg =
  {
   {0,"000000000"}, // 0.0                 // 0
   {1,"000001101"}, // 0.0980171403295606
   {2,"000011001"}, // 0.19509032201612825
   {3,"000100101"}, // 0.29028467725446233
   {4,"000110001"}, // 0.3826834323650898
   {5,"000111100"}, // 0.47139673682599764 // 5
   {6,"001000111"}, // 0.5555702330196022
   {7,"001010001"}, // 0.6343932841636455
   {8,"001011011"}, // 0.7071067811865475
   {9,"001100011"}, // 0.773010453362737
   {10,"001101010"}, // 0.8314696123025452 // 10
   {11,"001110001"}, // 0.8819212643483549
   {12,"001110110"}, // 0.9238795325112867
   {13,"001111010"}, // 0.9569403357322089
   {14,"001111110"}, // 0.9807852804032304
   {15,"001111111"}, // 0.9951847266721968 // 15
   {16,"010000000"}, // 1.0
   {17,"001111111"}, // 0.9951847266721969
   {18,"001111110"}, // 0.9807852804032304
   {19,"001111010"}, // 0.9569403357322089
   {20,"001110110"}, // 0.9238795325112867 // 20
   {21,"001110001"}, // 0.881921264348355
   {22,"001101010"}, // 0.8314696123025455
   {23,"001100011"}, // 0.7730104533627371
   {24,"001011011"}, // 0.7071067811865476
   {25,"001010001"}, // 0.6343932841636455 // 25
   {26,"001000111"}, // 0.5555702330196022
   {27,"000111100"}, // 0.47139673682599786
   {28,"000110001"}, // 0.3826834323650899
   {29,"000100101"}, // 0.2902846772544624
   {30,"000011001"}, // 0.1950903220161286 // 30
   {31,"000001101"}, // 0.09801714032956083
   {32,"000000000"}, // 1.2246467991473532e-16
   {33,"111110011"}, // -0.09801714032956059
   {34,"111100111"}, // -0.19509032201612836
   {35,"111011011"}, // -0.2902846772544621 // 35 
   {36,"111001111"}, // -0.38268343236508967
   {37,"111000100"}, // -0.47139673682599764
   {38,"110111001"}, // -0.555570233019602
   {39,"110101111"}, // -0.6343932841636453
   {40,"110100101"}, // -0.7071067811865475 // 40
   {41,"110011101"}, // -0.7730104533627367
   {42,"110010110"}, // -0.8314696123025452
   {43,"110001111"}, // -0.8819212643483549
   {44,"110001010"}, // -0.9238795325112865
   {45,"110000110"}, // -0.9569403357322088 // 45
   {46,"110000010"}, // -0.9807852804032303
   {47,"110000001"}, // -0.9951847266721969
   {48,"110000000"}, // -1.0
   {49,"110000001"}, // -0.9951847266721969
   {50,"110000010"}, // -0.9807852804032304 // 50
   {51,"110000110"}, // -0.9569403357322089
   {52,"110001010"}, // -0.9238795325112866
   {53,"110001111"}, // -0.881921264348355
   {54,"110010110"}, // -0.8314696123025455
   {55,"110011101"}, // -0.7730104533627369 // 55
   {56,"110100101"}, // -0.7071067811865477
   {57,"110101111"}, // -0.6343932841636459
   {58,"110111001"}, // -0.5555702330196022
   {59,"111000100"}, // -0.4713967368259979
   {60,"111001111"}, // -0.3826834323650904 // 60
   {61,"111011011"}, // -0.2902846772544625
   {62,"111100111"}, // -0.19509032201612872
   {63,"111110011"} // -0.0980171403295605  // 63
  };

//phase1
const std::unordered_map<unsigned,std::string> TSU::Trigo::Sin=
  {
   {0,"000000000000"}, // 0.0
   {50,"000000110010"}, // 0.049067674327418015
   {100,"000001100100"}, // 0.0980171403295606
   {150,"000010010110"}, // 0.14673047445536175
   {200,"000011001000"}, // 0.19509032201612825
   {250,"000011111001"}, // 0.24298017990326387
   {300,"000100101001"}, // 0.29028467725446233
   {350,"000101011001"}, // 0.33688985339222005
   {400,"000110001000"}, // 0.3826834323650898
   {450,"000110110110"}, // 0.4275550934302821
   {500,"000111100011"}, // 0.47139673682599764
   {550,"001000001110"}, // 0.5141027441932217
   {600,"001000111001"}, // 0.5555702330196022
   {650,"001001100010"}, // 0.5956993044924334
   {700,"001010001010"}, // 0.6343932841636455
   {750,"001010110000"}, // 0.6715589548470183
   {800,"001011010100"}, // 0.7071067811865475
   {850,"001011110111"}, // 0.7409511253549591
   {900,"001100011000"}, // 0.773010453362737
   {950,"001100110110"}, // 0.8032075314806448
   {1000,"001101010011"}, // 0.8314696123025452
   {1050,"001101101110"}, // 0.8577286100002721
   {1100,"001110000111"}, // 0.8819212643483549
   {1150,"001110011110"}, // 0.9039892931234433
   {1200,"001110110010"}, // 0.9238795325112867
   {1250,"001111000100"}, // 0.9415440651830208
   {1300,"001111010100"}, // 0.9569403357322089
   {1350,"001111100001"}, // 0.970031253194544
   {1400,"001111101100"}, // 0.9807852804032304
   {1450,"001111110101"}, // 0.989176509964781
   {1500,"001111111011"}, // 0.9951847266721968
   {1550,"001111111111"}, // 0.9987954562051724
   {1600,"010000000000"}, // 1.0
   {1650,"001111111111"}, // 0.9987954562051724
   {1700,"001111111011"}, // 0.9951847266721969
   {1750,"001111110101"}, // 0.989176509964781
   {1800,"001111101100"}, // 0.9807852804032304
   {1850,"001111100001"}, // 0.970031253194544
   {1900,"001111010100"}, // 0.9569403357322089
   {1950,"001111000100"}, // 0.9415440651830208
   {2000,"001110110010"}, // 0.9238795325112867
   {2050,"001110011110"}, // 0.9039892931234434
   {2100,"001110000111"}, // 0.881921264348355
   {2150,"001101101110"}, // 0.8577286100002721
   {2200,"001101010011"}, // 0.8314696123025455
   {2250,"001100110110"}, // 0.8032075314806449
   {2300,"001100011000"}, // 0.7730104533627371
   {2350,"001011110111"}, // 0.740951125354959
   {2400,"001011010100"}, // 0.7071067811865476
   {2450,"001010110000"}, // 0.6715589548470186
   {2500,"001010001010"}, // 0.6343932841636455
   {2550,"001001100010"}, // 0.5956993044924335
   {2600,"001000111001"}, // 0.5555702330196022
   {2650,"001000001110"}, // 0.5141027441932218
   {2700,"000111100011"}, // 0.47139673682599786
   {2750,"000110110110"}, // 0.42755509343028203
   {2800,"000110001000"}, // 0.3826834323650899
   {2850,"000101011001"}, // 0.33688985339222033
   {2900,"000100101001"}, // 0.2902846772544624
   {2950,"000011111001"}, // 0.24298017990326407
   {3000,"000011001000"}, // 0.1950903220161286
   {3050,"000010010110"}, // 0.1467304744553618
   {3100,"000001100100"}, // 0.09801714032956083
   {3150,"000000110010"}, // 0.049067674327417966
   {3200,"000000000000"}, // 1.2246467991473532e-16
   {3250,"111111001110"}, // -0.049067674327417724
   {3300,"111110011100"}, // -0.09801714032956059
   {3350,"111101101010"}, // -0.14673047445536158
   {3400,"111100111000"}, // -0.19509032201612836
   {3450,"111100000111"}, // -0.24298017990326382
   {3500,"111011010111"}, // -0.2902846772544621
   {3550,"111010100111"}, // -0.3368898533922201
   {3600,"111001111000"}, // -0.38268343236508967
   {3650,"111001001010"}, // -0.4275550934302818
   {3700,"111000011101"}, // -0.47139673682599764
   {3750,"110111110010"}, // -0.5141027441932216
   {3800,"110111000111"}, // -0.555570233019602
   {3850,"110110011110"}, // -0.5956993044924332
   {3900,"110101110110"}, // -0.6343932841636453
   {3950,"110101010000"}, // -0.6715589548470184
   {4000,"110100101100"}, // -0.7071067811865475
   {4050,"110100001001"}, // -0.7409511253549589
   {4100,"110011101000"}, // -0.7730104533627367
   {4150,"110011001010"}, // -0.803207531480645
   {4200,"110010101101"}, // -0.8314696123025452
   {4250,"110010010010"}, // -0.857728610000272
   {4300,"110001111001"}, // -0.8819212643483549
   {4350,"110001100010"}, // -0.9039892931234431
   {4400,"110001001110"}, // -0.9238795325112865
   {4450,"110000111100"}, // -0.9415440651830208
   {4500,"110000101100"}, // -0.9569403357322088
   {4550,"110000011111"}, // -0.970031253194544
   {4600,"110000010100"}, // -0.9807852804032303
   {4650,"110000001011"}, // -0.9891765099647809
   {4700,"110000000101"}, // -0.9951847266721969
   {4750,"110000000001"}, // -0.9987954562051724
   {4800,"110000000000"}, // -1.0
   {4850,"110000000001"}, // -0.9987954562051724
   {4900,"110000000101"}, // -0.9951847266721969
   {4950,"110000001011"}, // -0.9891765099647809
   {5000,"110000010100"}, // -0.9807852804032304
   {5050,"110000011111"}, // -0.970031253194544
   {5100,"110000101100"}, // -0.9569403357322089
   {5150,"110000111100"}, // -0.9415440651830209
   {5200,"110001001110"}, // -0.9238795325112866
   {5250,"110001100010"}, // -0.9039892931234433
   {5300,"110001111001"}, // -0.881921264348355
   {5350,"110010010010"}, // -0.8577286100002722
   {5400,"110010101101"}, // -0.8314696123025455
   {5450,"110011001010"}, // -0.8032075314806453
   {5500,"110011101000"}, // -0.7730104533627369
   {5550,"110100001001"}, // -0.7409511253549591
   {5600,"110100101100"}, // -0.7071067811865477
   {5650,"110101010000"}, // -0.6715589548470187
   {5700,"110101110110"}, // -0.6343932841636459
   {5750,"110110011110"}, // -0.5956993044924332
   {5800,"110111000111"}, // -0.5555702330196022
   {5850,"110111110010"}, // -0.5141027441932219
   {5900,"111000011101"}, // -0.4713967368259979
   {5950,"111001001010"}, // -0.42755509343028253
   {6000,"111001111000"}, // -0.3826834323650904
   {6050,"111010100111"}, // -0.33688985339222
   {6100,"111011010111"}, // -0.2902846772544625
   {6150,"111100000111"}, // -0.24298017990326418
   {6200,"111100111000"}, // -0.19509032201612872
   {6250,"111101101010"}, // -0.1467304744553624
   {6300,"111110011100"}, // -0.0980171403295605
   {6350,"111111001110"}  // -0.04906767432741809
  };

int TSU::Trigo::atan2leg(TSU::L1TopoDataTypes<16,0> x, TSU::L1TopoDataTypes<16,0> y){
  short int octant=0;
  if((x.value()&(1<<16))&&(y.value()&(1<<16))){ // Ex and Ey negative
    if(std::abs(y.to_float()) < std::abs(x.to_float())) octant = 4; //100
    else octant = 5; // 101
  } else if(x.value()&(1<<16)){
    if(std::abs(y.to_float()) < std::abs(x.to_float())) octant = 3; //011
    else octant = 2; // 010
  } else if(y.value()&(1<<16)){
    if(std::abs(y.to_float()) < std::abs(x.to_float())) octant = 7; //111
    else octant = 6; // 110
  } else { // Ex and Ey both positive
    if(std::abs(y.to_float()) < std::abs(x.to_float())) octant = 0; //000
    else octant = 1; // 001
  }

  auto signed_x_f = x;
  auto signed_y_f = y;
  if(octant==0||octant==3||octant==4||octant==7){
    //signed_x_f = (abs(int(x)));
    signed_x_f = x.abs();
    signed_y_f = y.abs();
  } else {
    //signed_x_f = (abs(int(y)));
    signed_x_f = y.abs();
    signed_y_f = x.abs();
  }

  const std::vector<std::string> atan2_thresholds = {
						     "000010011101100",  //  1.260 (0.9)
						     "000011000010101", //  1.557 (1.0)
						     "000011110101100", //  1.964 (1.1)
						     "000101000001100", //  2.572 (1.2)
						     "000111000010010", //  3.602 (1.3)
						     "001011010100101", //  5.797 (1.4)
						     "011011100010101"}; // 14.101 (1.5)
  unsigned int flag = 0;
  for(size_t j=0;j<atan2_thresholds.size(); ++j){
    auto thresh =  TSU::L1TopoDataTypes<15,10>(atan2_thresholds.at(j));
    auto yy = signed_y_f*thresh;
    if(signed_x_f.to_float() > yy.to_float()) flag = (flag | (1<<j));
  }
  unsigned int octant_fine = 0;
  if(flag==0) octant_fine = 7;
  else if(flag==1) octant_fine = 6;
  else if(flag==3) octant_fine = 5;
  else if(flag==7) octant_fine = 4;
  else if(flag==15) octant_fine = 3;
  else if(flag==31) octant_fine = 2;
  else if(flag==63) octant_fine = 1;
  else if(flag==127) octant_fine = 0;

  unsigned int octant_fine2 = 0;
  if(flag==0) octant_fine2 = 0;
  else if(flag==1) octant_fine2 = 1;
  else if(flag==3) octant_fine2 = 2;
  else if(flag==7) octant_fine2 = 3;
  else if(flag==15) octant_fine2 = 4;
  else if(flag==31) octant_fine2 = 5;
  else if(flag==63) octant_fine2 = 6;
  else if(flag==127) octant_fine2 = 7;

  int intphi = octant << 3;
  if(octant==0||octant==2||octant==4||octant==6){
    intphi |= octant_fine;
  } else {
    intphi |= octant_fine2;
  }

  return intphi;
}

int TSU::Trigo::atan2(TSU::L1TopoDataTypes<16,0> x, TSU::L1TopoDataTypes<16,0> y){
  short int octant=0;
  if((x.value()&(1<<16))&&(y.value()&(1<<16))){ // Ex and Ey negative
    if(std::abs(y.to_float()) < std::abs(x.to_float())) octant = 4; //100
    else octant = 5; // 101
  } else if(x.value()&(1<<16)){
    if(std::abs(y.to_float()) < std::abs(x.to_float())) octant = 3; //011
    else octant = 2; // 010
  } else if(y.value()&(1<<16)){
    if(std::abs(y.to_float()) < std::abs(x.to_float())) octant = 7; //111
    else octant = 6; // 110
  } else { // Ex and Ey both positive
    if(std::abs(y.to_float()) < std::abs(x.to_float())) octant = 0; //000
    else octant = 1; // 001
  }

  auto signed_x_f = x;
  auto signed_y_f = y;
  if(octant==0||octant==3||octant==4||octant==7){
    //signed_x_f = (abs(int(x)));
    signed_x_f = x.abs();
    signed_y_f = y.abs();
  } else {
    //signed_x_f = (abs(int(y)));
    signed_x_f = y.abs();
    signed_y_f = x.abs();
  }
  
  // For phi in the first sector (0.8 < phi < 1.6) store the possible values of the tan
  const std::vector<std::string> atan2_thresholds =
    {
     "00000010010001101", // tan(0.85)=1.1383327132284393 rounded to 1.1376953125
     "00000010100001010", // tan(0.9)=1.2601582175503392 rounded to 1.259765625
     "00000010110010111", // tan(0.95)=1.398382589287699 rounded to 1.3974609375
     "00000011000111010", // tan(1.0)=1.5574077246549023 rounded to 1.556640625
     "00000011011111001", // tan(1.05)=1.7433153099831704 rounded to 1.7431640625
     "00000011111011011", // tan(1.1)=1.9647596572486523 rounded to 1.9638671875
     "00000100011110000", // tan(1.15)=2.2344969487553255 rounded to 2.234375
     "00000101001001001", // tan(1.2)=2.5721516221263188 rounded to 2.5712890625
     "00000110000001001", // tan(1.25)=3.0095696738628313 rounded to 3.0087890625
     "00000111001101000", // tan(1.3)=3.6021024479679786 rounded to 3.6015625
     "00001000111010010", // tan(1.35)=4.455221759562705 rounded to 4.455078125
     "00001011100110001", // tan(1.4)=5.797883715482887 rounded to 5.7978515625
     "00010000011110011", // tan(1.4500000000000002)=8.238092752965619 rounded to 8.2373046875
     "00011100001100111", // tan(1.5)=14.101419947171719 rounded to 14.1005859375
     "01100000001010000" // tan(1.55)=48.07848247921907 rounded to 48.078125
    };
  
  unsigned int flag = 0;
  for(size_t j=0;j<atan2_thresholds.size(); ++j){
    auto thresh =  TSU::L1TopoDataTypes<17,10>(atan2_thresholds.at(j));
    auto yy = signed_y_f*thresh;
    if(signed_x_f.to_float() > yy.to_float()) flag = (flag | (1<<j));
  }
  unsigned int octant_fine = 0;
  if(flag==0) octant_fine = 15;
  else if(flag==1) octant_fine = 14;
  else if(flag==3) octant_fine = 13;
  else if(flag==7) octant_fine = 12;
  else if(flag==15) octant_fine = 11;
  else if(flag==31) octant_fine = 10;
  else if(flag==63) octant_fine = 9;
  else if(flag==127) octant_fine = 8;
  else if(flag==255) octant_fine = 7;
  else if(flag==511) octant_fine = 6;
  else if(flag==1023) octant_fine = 5;
  else if(flag==2047) octant_fine = 4;
  else if(flag==3071) octant_fine = 3;
  else if(flag==5119) octant_fine = 2;
  else if(flag==9215) octant_fine = 1;
  else if(flag==17407) octant_fine = 0;

  unsigned int octant_fine2 = 0;
  if(flag==0) octant_fine2 = 0;
  else if(flag==1) octant_fine2 = 1;
  else if(flag==3) octant_fine2 = 2;
  else if(flag==7) octant_fine2 = 3;
  else if(flag==15) octant_fine2 = 4;
  else if(flag==31) octant_fine2 = 5;
  else if(flag==63) octant_fine2 = 6;
  else if(flag==127) octant_fine2 = 7;
  else if(flag==255) octant_fine2 = 8;
  else if(flag==511) octant_fine2 = 9;
  else if(flag==1023) octant_fine2 = 10;
  else if(flag==2047) octant_fine2 = 11;
  else if(flag==3071) octant_fine2 = 12;
  else if(flag==5119) octant_fine2 = 13;
  else if(flag==9215) octant_fine2 = 14;
  else if(flag==17407) octant_fine2 = 15;

  int intphi = octant << 3;
  if(octant==0||octant==2||octant==4||octant==6){
    intphi |= octant_fine;
  } else {
    intphi |= octant_fine2;
  }

  return intphi;
}
