package DetCommonPolicy

author  David.Berge@cern.ch
manager David.Berge@cern.ch,Joerg.Stelzer@cern.ch

use LCG_Policy *
use LCG_Settings *
use AtlasCommonPolicy *

# ---------------------------------------------------------
# No include path to be added for this package
# ---------------------------------------------------------
include_path none

# ---------------------------------------------------------
# ignore patterns from LCG_Policy
# ---------------------------------------------------------

pattern detcommon_ignores \
	ignore_pattern include_dir_policy ; \
	ignore_pattern install_includes ; \
	ignore_pattern install_pythonmods ; \
	ignore_pattern library

apply_pattern detcommon_ignores

# ---------------------------------------------------------
# library patterns - exact copy of the lcg patterns,
# only without the prefix 'lcg_' of the lcg libraries
# ---------------------------------------------------------

pattern detcommon_shared_library_settings \
  macro <package>_linkopts " -l<package> " ; \
  private ; \
  macro <package>_shlibflags "$(libraryshr_linkopts) \
	$(cmt_installarea_linkopts) $(<package>_use_linkopts) " ; \
  macro_remove <package>_use_linkopts "$(<package>_linkopts)" ; \
  end_private

pattern detcommon_shared_library \
  library <package> -no_prototypes  *.cxx ; \
  apply_pattern detcommon_shared_library_settings ; \
  apply_pattern optdebug_library name=<package>

pattern detcommon_shared_generic_library \
  library <package> -no_prototypes  <files> ; \
  apply_pattern detcommon_shared_library_settings ; \
  apply_pattern optdebug_library name=<package>


#
# for libraries with names different from the package name
#
pattern detcommon_shared_named_library_settings \
  macro <package>_linkopts " -l<library> " ; \
  private ; \
  macro <library>_shlibflags "$(libraryshr_linkopts) \
	$(cmt_installarea_linkopts) $(<library>_use_linkopts) " ; \
  macro_remove <library>_use_linkopts "$(<package>_linkopts)" ; \
  end_private

pattern detcommon_shared_named_generic_library \
  library <library> -no_prototypes  <files> ; \
  apply_pattern detcommon_shared_named_library_settings library=<library> ; \
  apply_pattern optdebug_library name=<library>

# ---------------------------------------------------------

# ---------------------------------------------------------
# Setup some special build options for applications
# ---------------------------------------------------------

pattern trigconf_example_application \
  application <name> <file> bindirname="bin" ;\
  macro_append <name>linkopts " $(<package>_linkopts) \
	-L$(CMTINSTALLAREA)/$(CMTCONFIG)/lib \
	$(Boost_linkopts_thread) "

pattern trigconf_application \
  apply_pattern trigconf_example_application name=TrigConf<name> \
    file=../src/test/<name>.cxx ;\
  macro_append TrigConf<name>_dependencies ' <package> '

pattern trigconf_generic_application \
  apply_pattern trigconf_example_application name=TrigConf<name> \
    file=../src/test/<name>.cxx ;\
  macro_append TrigConf<name>_dependencies ' <package> '

# ---------------------------------------------------------

# ---------------------------------------------------------
# Compiler flags
# ---------------------------------------------------------

macro_append cppflags " -Wwrite-strings -Wpointer-arith \
	-Woverloaded-virtual -Wno-long-long "
	
macro_append pp_cppflags       "" \
      host-slc6&target-slc5 " -D__USE_XOPEN2K8 "
	
# ---------------------------------------------------------


# ---------------------------------------------------------
# Java stuff
# ---------------------------------------------------------
set JAVA_SUBDIR "sw/lcg/external/Java" \
	BNL         "cernsw/java"
     
set JAVA_BASE "${SITEROOT}/${JAVA_SUBDIR}"

macro JDK_VENDOR "SUN_" \
      Darwin     ""
macro JDK_ARCH   "ia32"\
	  64         "amd64" \
	  Darwin     "Darwin"
macro JDK_FULL_VERSION "1.5.0_11" \
      Darwin           "1.5.0"

set JDK_HOME  "${JAVA_BASE}/JDK/${JDK_VENDOR}${JDK_FULL_VERSION}/${JDK_ARCH}"
set JAVA_HOME "${JDK_HOME}" target-mac106 ""

set _JAVA_OPTIONS "-Xms64m -Xmx128m"

path_remove PATH "/JDK"
path_append PATH "${JDK_HOME}/jre/bin" noJava ""
path_append PATH "${JDK_HOME}/bin" noJava ""

include_dirs "${JDK_HOME}/include"
include_dirs "${JDK_HOME}/include/linux"

macro JavaSDK_export_paths   "${JDK_HOME}"
macro JavaSDK_native_version "${JDK_VENDOR}${JDK_FULL_VERSION}"

macro JavaSDK_platform "" PACK "${JDK_ARCH}"

macro ANT_VERSION "1.7.0"
set   ANT_HOME    "${JAVA_BASE}/Ant/${ANT_VERSION}/share"

path_remove PATH "Ant"
path_prepend PATH "${ANT_HOME}/bin" noJava ""

set ANT_SITE "CMT"

make_fragment ant -header=dummy
			
macro Ant_export_paths   "${ANT_HOME}"
macro Ant_native_version "${ANT_VERSION}"

# ---------------------------------------------------------

# ---------------------------------------------------------
# Reset macro values to standard CMT values to overcome 
# their definition in LCG_Policy; except for the install 
# command, this is only done if block-tdaqc is set ... which 
# is done in ExternalPolicy for offline
# ---------------------------------------------------------

macro cmt_installarea_prefix "InstallArea"
cmtpath_pattern macro cmt_installarea_prefix "InstallArea"
macro application_suffix "" block-tdaqc ".exe"
macro cmt_installarea_command "ln -fs "

# ---------------------------------------------------------

# ---------------------------------------------------------
# Installation of files
# ---------------------------------------------------------

# fragments
make_fragment install_header_files -header=install_header_files_header
make_fragment install_header_files_header

# this line is to use the DetCommonPolicy/cmt/fragments/install_includes_header, which is a copy of the one
# in AtlasPolicy. If we don't do that, the one from LCG_Policy is used in most cases (depening on the order
# of use statements in packages outside DetCommon)
make_fragment install_includes_header


# install patterns for header files
pattern detcommon_header_installer ; \
    macro <package>_include_dirs "$(<package>_cmtpath)/$(<project>_installarea_prefix)/include/<package>" \
        <project>_without_installarea "$(<PACKAGE>ROOT)" ; \
    private ; \
    macro <package>_include_dirs "$(<PACKAGE>ROOT)" ; \
    end_private ; \
    include_dirs ${<package>_include_dirs} ; \
    document install_header_files install_header_files ; \
    include_path none

# ---------------------------------------------------------
# the following is an exact copy from ExternalPolicy...
# for the installation of data files
# ---------------------------------------------------------
# Patterns for specifically declaring and installing files in the
# current installation area
#
# The most generic pattern is "generic_declare". Its arguments are
#
#   <kind>   : the kind of installation. This name conditions the macros, actions and make target names
#              This also is used to fill in the macro <package>_<kind> that holds the list of things to install
#
#   <files>  : the list of things to install. This may include -s=dir options
#
#   <name>   : a supplementary name to distinguish several applications of this pattern
#
#   <prefix> : a prefix to $(CMTINSTALLAREA)
#
#   <install_command> : the installation command (to either copy or symlink)
#
# Then two patterns are derived from generic_declare:
#
#  generic_declare_for_link:
#  generic_declare_for_copy:
#
#   They both transmmit unchanged all arguments to generic_install and they select either to symlink or to copy using
#
#    $(symlink_command)
#    $(copy_command)
#
#--------------------------------------------
macro copy_command "cp -R -H"
macro symlink_command "ln -sf"

make_fragment atlas_data_installer -header=atlas_data_installer_header

pattern detcommon_generic_install \
  	macro_append <package>_<kind> " <files> " ; \
   document atlas_data_installer install_<name><kind> prefix=<prefix> $(<package>_<kind>) cmt_install_area_command="'<install_command>'"

pattern detcommon_link_files \
    apply_pattern detcommon_generic_install kind=<kind> files='<files>' prefix=<prefix> name=<name> install_command="'$(symlink_command)'"

pattern detcommon_copy_files \
    apply_pattern detcommon_generic_install kind=<kind> files='<files>' prefix=<prefix> name=<name> install_command="'$(copy_command)'"

pattern detcommon_install_docs \
    apply_pattern detcommon_link_files files='-s=../doc *.* <extras>' prefix=doc/<package>

# ---------------------------------------------------------
# fragment(s) from AtlasCommonPolicy
# to ensure those from LCG_Policy do not override them
# ---------------------------------------------------------
# library_no_static fragment from core CMT (renamed as library)
# to allow for shared library only to be built by default
# (instead of shared + static libraries)
# to disable this fragment/behaviour, activate tag WithStatic
tag static WithStatic
tag UnixStatic WithStatic
macro library_fragment "library" WithStatic ""
make_fragment $(library_fragment)
make_fragment application
