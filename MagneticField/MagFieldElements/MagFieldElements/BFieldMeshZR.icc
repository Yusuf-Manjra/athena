/*
  Copyright (C) 2002-2020 CERN for the benefit of the ATLAS collaboration
*/

//
// Find and return the cache of the bin containing (z,r)
//
inline void
BFieldMeshZR::getCache(double z,
                       double r,
                       BFieldCacheZR& cache,
                       double scaleFactor) const
{
  // find the mesh, and relative location in the mesh
  // z
  const std::vector<double>& mz(m_mesh[0]);
  int iz = int((z - zmin()) * m_invUnit[0]); // index to LUT
  iz = m_LUT[0][iz];                         // tentative mesh index from LUT
  if (z > mz[iz + 1]) {
    iz++;
  }
  // r
  const std::vector<double>& mr(m_mesh[1]);
  int ir = int((r - rmin()) * m_invUnit[1]); // index to LUT
  ir = m_LUT[1][ir];                         // tentative mesh index from LUT
  if (r > mr[ir + 1]) {
    ir++;
  }
  // store the bin edges
  cache.setRange(mz[iz], mz[iz + 1], mr[ir], mr[ir + 1]);
  // store the B field at the 8 corners
  int im0 = iz * m_zoff + ir; // index of the first corner
  cache.setField(0, m_field[im0], scaleFactor);
  cache.setField(1, m_field[im0 + 1], scaleFactor);
  cache.setField(2, m_field[im0 + m_zoff], scaleFactor);
  cache.setField(3, m_field[im0 + m_zoff + 1], scaleFactor);
}

